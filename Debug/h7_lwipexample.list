
h7_lwipexample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128d8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ba8  08012b78  08012b78  00022b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015720  08015720  00041a00  2**0
                  CONTENTS
  4 .ARM          00000008  08015720  08015720  00025720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015728  08015728  00041a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015728  08015728  00025728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801572c  0801572c  0002572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  30040000  30040000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  30040060  30040060  00040060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxArraySection 00001800  30040200  30040200  00040200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000094  24000000  08015730  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000339c  24000094  080157c4  00030094  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  24003430  080157c4  00033430  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003e5ce  00000000  00000000  00041a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000068df  00000000  00000000  0007fffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001868  00000000  00000000  000868e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001740  00000000  00000000  00088148  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000441cc  00000000  00000000  00089888  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00022eb1  00000000  00000000  000cda54  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00170594  00000000  00000000  000f0905  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  00260e99  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000068a8  00000000  00000000  00260f14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012b60 	.word	0x08012b60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	08012b60 	.word	0x08012b60

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000698:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <SCB_EnableICache+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <SCB_EnableICache+0x3c>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <SCB_EnableICache+0x3c>)
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <SCB_EnableDCache+0x7c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <SCB_EnableDCache+0x7c>)
 80006e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	0b5b      	lsrs	r3, r3, #13
 80006ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006f2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006fc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	015a      	lsls	r2, r3, #5
 8000702:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000706:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070c:	490f      	ldr	r1, [pc, #60]	; (800074c <SCB_EnableDCache+0x7c>)
 800070e:	4313      	orrs	r3, r2
 8000710:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1ef      	bne.n	80006fe <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	60fa      	str	r2, [r7, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1e5      	bne.n	80006f4 <SCB_EnableDCache+0x24>
 8000728:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <SCB_EnableDCache+0x7c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <SCB_EnableDCache+0x7c>)
 8000732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800073c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000754:	f000 fa2e 	bl	8000bb4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000758:	f7ff ff9a 	bl	8000690 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800075c:	f7ff ffb8 	bl	80006d0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fe84 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f81a 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f934 	bl	80009d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800076c:	f000 f8e6 	bl	800093c <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000770:	f000 f8ce 	bl	8000910 <MX_RNG_Init>
  MX_LWIP_Init();
 8000774:	f006 fb0a 	bl	8006d8c <MX_LWIP_Init>
  //httpd_init();
  //tcp_echoserver_init();

  /* Enable UDP  */
  //udp_client_connect();
  udp_server_init();
 8000778:	f000 fa4e 	bl	8000c18 <udp_server_init>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 800077c:	f006 fc52 	bl	8007024 <MX_LWIP_Process>

	  if(timerValue >= 1000)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <main+0x48>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800078a:	d3f7      	bcc.n	800077c <main+0x2c>
	  {
		  timerValue = 0;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <main+0x48>)
 800078e:	2200      	movs	r2, #0
 8000790:	801a      	strh	r2, [r3, #0]
		  udp_server_send_message();
 8000792:	f000 fa71 	bl	8000c78 <udp_server_send_message>
	  MX_LWIP_Process();
 8000796:	e7f1      	b.n	800077c <main+0x2c>
 8000798:	240000b0 	.word	0x240000b0

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0cc      	sub	sp, #304	; 0x130
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007a6:	224c      	movs	r2, #76	; 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f011 fab0 	bl	8011d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f011 faa9 	bl	8011d10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4618      	mov	r0, r3
 80007c4:	23bc      	movs	r3, #188	; 0xbc
 80007c6:	461a      	mov	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f011 faa1 	bl	8011d10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f002 ff2a 	bl	8003628 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <SystemClock_Config+0x16c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a4a      	ldr	r2, [pc, #296]	; (8000908 <SystemClock_Config+0x16c>)
 80007e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <SystemClock_Config+0x16c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <SystemClock_Config+0x170>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	4a45      	ldr	r2, [pc, #276]	; (800090c <SystemClock_Config+0x170>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fe:	4b43      	ldr	r3, [pc, #268]	; (800090c <SystemClock_Config+0x170>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	f003 0201 	and.w	r2, r3, #1
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800080e:	bf00      	nop
 8000810:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <SystemClock_Config+0x16c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081c:	d1f8      	bne.n	8000810 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800081e:	2322      	movs	r3, #34	; 0x22
 8000820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000824:	2301      	movs	r3, #1
 8000826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000842:	2304      	movs	r3, #4
 8000844:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000848:	233c      	movs	r3, #60	; 0x3c
 800084a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000860:	230c      	movs	r3, #12
 8000862:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000876:	4618      	mov	r0, r3
 8000878:	f002 ff10 	bl	800369c <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000882:	f000 f9c4 	bl	8000c0e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	233f      	movs	r3, #63	; 0x3f
 8000888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000898:	2308      	movs	r3, #8
 800089a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fafc 	bl	8003ebc <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x132>
  {
    Error_Handler();
 80008ca:	f000 f9a0 	bl	8000c0e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RNG;
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 80008d6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	67da      	str	r2, [r3, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fe69 	bl	80045c4 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x160>
  {
    Error_Handler();
 80008f8:	f000 f989 	bl	8000c0e <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	58024800 	.word	0x58024800
 800090c:	58000400 	.word	0x58000400

08000910 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_RNG_Init+0x24>)
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <MX_RNG_Init+0x28>)
 8000918:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_RNG_Init+0x24>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_RNG_Init+0x24>)
 8000922:	f005 f94f 	bl	8005bc4 <HAL_RNG_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800092c:	f000 f96f 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	240002c0 	.word	0x240002c0
 8000938:	48021800 	.word	0x48021800

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000942:	4a23      	ldr	r2, [pc, #140]	; (80009d0 <MX_USART3_UART_Init+0x94>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000986:	f005 f978 	bl	8005c7a <HAL_UART_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 f93d 	bl	8000c0e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000998:	f006 f913 	bl	8006bc2 <HAL_UARTEx_SetTxFifoThreshold>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009a2:	f000 f934 	bl	8000c0e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x90>)
 80009aa:	f006 f948 	bl	8006c3e <HAL_UARTEx_SetRxFifoThreshold>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f000 f92b 	bl	8000c0e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_USART3_UART_Init+0x90>)
 80009ba:	f006 f8c9 	bl	8006b50 <HAL_UARTEx_DisableFifoMode>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f000 f923 	bl	8000c0e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000234 	.word	0x24000234
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b6a      	ldr	r3, [pc, #424]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a68      	ldr	r2, [pc, #416]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b66      	ldr	r3, [pc, #408]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a08:	4b62      	ldr	r3, [pc, #392]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a61      	ldr	r2, [pc, #388]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a59      	ldr	r2, [pc, #356]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b53      	ldr	r3, [pc, #332]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a52      	ldr	r2, [pc, #328]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a80:	4b44      	ldr	r3, [pc, #272]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a43      	ldr	r2, [pc, #268]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	4a3b      	ldr	r2, [pc, #236]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ac2:	4835      	ldr	r0, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000ac4:	f002 fd96 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	4833      	ldr	r0, [pc, #204]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000ad0:	f002 fd90 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4831      	ldr	r0, [pc, #196]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000ada:	f002 fd8b 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	482c      	ldr	r0, [pc, #176]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000af4:	f002 fbce 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000af8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000b12:	f002 fbbf 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000b30:	f002 fbb0 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_GPIO_Init+0x1d4>)
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4819      	ldr	r0, [pc, #100]	; (8000bac <MX_GPIO_Init+0x1d8>)
 8000b48:	f002 fba4 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b5e:	230a      	movs	r3, #10
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_GPIO_Init+0x1dc>)
 8000b6a:	f002 fb93 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000b86:	f002 fb85 	bl	8003294 <HAL_GPIO_Init>

}
 8000b8a:	bf00      	nop
 8000b8c:	3730      	adds	r7, #48	; 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58024400 	.word	0x58024400
 8000b98:	58020400 	.word	0x58020400
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	58020800 	.word	0x58020800
 8000ba8:	11110000 	.word	0x11110000
 8000bac:	58021800 	.word	0x58021800
 8000bb0:	58020000 	.word	0x58020000

08000bb4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bc6:	f000 fde7 	bl	8001798 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000bd2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000bd6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000bd8:	231b      	movs	r3, #27
 8000bda:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000be4:	2303      	movs	r3, #3
 8000be6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fe00 	bl	8001800 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f000 fddf 	bl	80017c4 <HAL_MPU_Enable>

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c12:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x6>
	...

08000c18 <udp_server_init>:
u8_t   data[100];
__IO uint32_t message_count_server = 0;
struct udp_pcb *upcb;

void udp_server_init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
   err_t err;
   upcb = udp_new();
 8000c1e:	f00e fd11 	bl	800f644 <udp_new>
 8000c22:	4602      	mov	r2, r0
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <udp_server_init+0x54>)
 8000c26:	601a      	str	r2, [r3, #0]

   if (NULL != upcb)
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <udp_server_init+0x54>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d019      	beq.n	8000c64 <udp_server_init+0x4c>
   {
      err = udp_bind(upcb, IP_ADDR_ANY, SERVER_UDP_SERVER_PORT);
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <udp_server_init+0x54>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2207      	movs	r2, #7
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <udp_server_init+0x58>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f00e fb83 	bl	800f344 <udp_bind>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]

      if(ERR_OK == err)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d107      	bne.n	8000c5a <udp_server_init+0x42>
      {
        udp_recv(upcb, udp_server_receive_callback, NULL);
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <udp_server_init+0x54>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4908      	ldr	r1, [pc, #32]	; (8000c74 <udp_server_init+0x5c>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00e fc94 	bl	800f580 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000c58:	e004      	b.n	8000c64 <udp_server_init+0x4c>
        udp_remove(upcb);
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <udp_server_init+0x54>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f00e fcae 	bl	800f5c0 <udp_remove>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	240002d4 	.word	0x240002d4
 8000c70:	08015674 	.word	0x08015674
 8000c74:	08000cf1 	.word	0x08000cf1

08000c78 <udp_server_send_message>:

void udp_server_send_message(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	struct pbuf *p;

	sprintf((char*)data, "test");
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <udp_server_send_message+0x68>)
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <udp_server_send_message+0x6c>)
 8000c82:	6810      	ldr	r0, [r2, #0]
 8000c84:	6018      	str	r0, [r3, #0]
 8000c86:	7912      	ldrb	r2, [r2, #4]
 8000c88:	711a      	strb	r2, [r3, #4]

	/* allocate pbuf from pool*/
	p = pbuf_alloc(PBUF_TRANSPORT,strlen((char*)data), PBUF_RAM);
 8000c8a:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <udp_server_send_message+0x68>)
 8000c8c:	f7ff fb28 	bl	80002e0 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 709d 	mov.w	r0, #314	; 0x13a
 8000c9e:	f007 feef 	bl	8008a80 <pbuf_alloc>
 8000ca2:	6078      	str	r0, [r7, #4]

	if (p != NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d015      	beq.n	8000cd6 <udp_server_send_message+0x5e>
	{
      ip_addr_t myIPADDR;
	  IP_ADDR4(&myIPADDR, UDP_CLIENT_ADDR0, UDP_CLIENT_ADDR1, UDP_CLIENT_ADDR2, UDP_CLIENT_ADDR3);
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <udp_server_send_message+0x70>)
 8000cac:	603b      	str	r3, [r7, #0]
	  pbuf_take(p, (char*)data, strlen((char*)data));
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <udp_server_send_message+0x68>)
 8000cb0:	f7ff fb16 	bl	80002e0 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <udp_server_send_message+0x68>)
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f008 fc2b 	bl	8009518 <pbuf_take>
	  udp_sendto(upcb, p, &myIPADDR, SERVER_UDP_CLIENT_PORT);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <udp_server_send_message+0x74>)
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	463a      	mov	r2, r7
 8000cc8:	2308      	movs	r3, #8
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f00e f984 	bl	800efd8 <udp_sendto>
	  pbuf_free(p);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f008 f9b5 	bl	8009040 <pbuf_free>
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	240002d8 	.word	0x240002d8
 8000ce4:	08012b78 	.word	0x08012b78
 8000ce8:	1518fea9 	.word	0x1518fea9
 8000cec:	240002d4 	.word	0x240002d4

08000cf0 <udp_server_receive_callback>:

void udp_server_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p_tx;

  /* allocate pbuf from RAM*/
  p_tx = pbuf_alloc(PBUF_TRANSPORT,p->len, PBUF_RAM);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	895b      	ldrh	r3, [r3, #10]
 8000d02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d06:	4619      	mov	r1, r3
 8000d08:	f44f 709d 	mov.w	r0, #314	; 0x13a
 8000d0c:	f007 feb8 	bl	8008a80 <pbuf_alloc>
 8000d10:	6178      	str	r0, [r7, #20]

  if(p_tx != NULL)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d019      	beq.n	8000d4c <udp_server_receive_callback+0x5c>
  {
    pbuf_take(p_tx, (char*)p->payload, p->len);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6859      	ldr	r1, [r3, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	895b      	ldrh	r3, [r3, #10]
 8000d20:	461a      	mov	r2, r3
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f008 fbf8 	bl	8009518 <pbuf_take>
    udp_connect(upcb, addr, SERVER_UDP_CLIENT_PORT);
 8000d28:	2208      	movs	r2, #8
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	68b8      	ldr	r0, [r7, #8]
 8000d2e:	f00e fb91 	bl	800f454 <udp_connect>
    udp_send(upcb, p_tx);
 8000d32:	6979      	ldr	r1, [r7, #20]
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f00e f91b 	bl	800ef70 <udp_send>
    udp_disconnect(upcb);
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f00e fbf8 	bl	800f530 <udp_disconnect>
    pbuf_free(p_tx);
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f008 f97d 	bl	8009040 <pbuf_free>
    pbuf_free(p);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f008 f97a 	bl	8009040 <pbuf_free>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_RNG_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_RNG_MspInit+0x40>)
 8000d9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_RNG_MspInit+0x40>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_RNG_MspInit+0x40>)
 8000dac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	48021800 	.word	0x48021800
 8000dc8:	58024400 	.word	0x58024400

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12e      	bne.n	8000e4c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df4:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000e48:	f002 fa24 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40004800 	.word	0x40004800
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020c00 	.word	0x58020c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 fb50 	bl	8001550 <HAL_IncTick>
  if(timerValue < 1000)
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <SysTick_Handler+0x28>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eba:	d206      	bcs.n	8000eca <SysTick_Handler+0x22>
  {
	  timerValue++;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Handler+0x28>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <SysTick_Handler+0x28>)
 8000ec8:	801a      	strh	r2, [r3, #0]
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	240000b0 	.word	0x240000b0

08000ed4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e00a      	b.n	8000efc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ee6:	f3af 8000 	nop.w
 8000eea:	4601      	mov	r1, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	b2ca      	uxtb	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbf0      	blt.n	8000ee6 <_read+0x12>
	}

return len;
 8000f04:	687b      	ldr	r3, [r7, #4]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	e009      	b.n	8000f34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf1      	blt.n	8000f20 <_write+0x12>
	}
	return len;
 8000f3c:	687b      	ldr	r3, [r7, #4]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_close>:

int _close(int file)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_isatty>:

int _isatty(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	return 1;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d205      	bcs.n	8000fec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <_sbrk+0x6c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e009      	b.n	8001000 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a06      	ldr	r2, [pc, #24]	; (8001014 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	24080000 	.word	0x24080000
 8001010:	00000400 	.word	0x00000400
 8001014:	240000b4 	.word	0x240000b4
 8001018:	24003430 	.word	0x24003430
 800101c:	2400342c 	.word	0x2400342c

08001020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001026:	4b41      	ldr	r3, [pc, #260]	; (800112c <SystemInit+0x10c>)
 8001028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102c:	4a3f      	ldr	r2, [pc, #252]	; (800112c <SystemInit+0x10c>)
 800102e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001032:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001036:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <SystemInit+0x110>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	2b06      	cmp	r3, #6
 8001040:	d807      	bhi.n	8001052 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <SystemInit+0x110>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 030f 	bic.w	r3, r3, #15
 800104a:	4a39      	ldr	r2, [pc, #228]	; (8001130 <SystemInit+0x110>)
 800104c:	f043 0307 	orr.w	r3, r3, #7
 8001050:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <SystemInit+0x114>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a37      	ldr	r2, [pc, #220]	; (8001134 <SystemInit+0x114>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <SystemInit+0x114>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <SystemInit+0x114>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4932      	ldr	r1, [pc, #200]	; (8001134 <SystemInit+0x114>)
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <SystemInit+0x118>)
 800106c:	4013      	ands	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <SystemInit+0x110>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	2b07      	cmp	r3, #7
 800107a:	d907      	bls.n	800108c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <SystemInit+0x110>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <SystemInit+0x110>)
 8001086:	f043 0307 	orr.w	r3, r3, #7
 800108a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemInit+0x114>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemInit+0x114>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <SystemInit+0x114>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemInit+0x114>)
 80010a0:	4a26      	ldr	r2, [pc, #152]	; (800113c <SystemInit+0x11c>)
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <SystemInit+0x114>)
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <SystemInit+0x120>)
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemInit+0x114>)
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <SystemInit+0x124>)
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <SystemInit+0x114>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SystemInit+0x114>)
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <SystemInit+0x124>)
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <SystemInit+0x114>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <SystemInit+0x114>)
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <SystemInit+0x124>)
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <SystemInit+0x114>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <SystemInit+0x114>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <SystemInit+0x114>)
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <SystemInit+0x114>)
 80010dc:	2200      	movs	r2, #0
 80010de:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <SystemInit+0x128>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <SystemInit+0x12c>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ec:	d202      	bcs.n	80010f4 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <SystemInit+0x130>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
#endif

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <SystemInit+0x114>)
 80010f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <SystemInit+0x114>)
 80010fc:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8001100:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <SystemInit+0x114>)
 8001106:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800110a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800110c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <SystemInit+0x134>)
 8001110:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001114:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <SystemInit+0x10c>)
 8001118:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	52002000 	.word	0x52002000
 8001134:	58024400 	.word	0x58024400
 8001138:	eaf6ed7f 	.word	0xeaf6ed7f
 800113c:	02020200 	.word	0x02020200
 8001140:	01ff0000 	.word	0x01ff0000
 8001144:	01010280 	.word	0x01010280
 8001148:	5c001000 	.word	0x5c001000
 800114c:	ffff0000 	.word	0xffff0000
 8001150:	51008108 	.word	0x51008108
 8001154:	52004000 	.word	0x52004000

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800115c:	f7ff ff60 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001162:	e003      	b.n	800116c <LoopCopyDataInit>

08001164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800116a:	3104      	adds	r1, #4

0800116c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001174:	d3f6      	bcc.n	8001164 <CopyDataInit>
  ldr  r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001178:	e002      	b.n	8001180 <LoopFillZerobss>

0800117a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800117a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800117c:	f842 3b04 	str.w	r3, [r2], #4

08001180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001184:	d3f9      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f010 fd85 	bl	8011c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fae1 	bl	8000750 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001194:	08015730 	.word	0x08015730
  ldr  r0, =_sdata
 8001198:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800119c:	24000094 	.word	0x24000094
  ldr  r2, =_sbss
 80011a0:	24000094 	.word	0x24000094
  ldr  r3, = _ebss
 80011a4:	24003430 	.word	0x24003430

080011a8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC3_IRQHandler>

080011aa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <LAN8742_RegisterBusIO+0x28>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <LAN8742_RegisterBusIO+0x28>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <LAN8742_RegisterBusIO+0x28>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e014      	b.n	8001202 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d17c      	bne.n	8001328 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2220      	movs	r2, #32
 8001240:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e01c      	b.n	8001282 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f107 0208 	add.w	r2, r7, #8
 8001250:	2112      	movs	r1, #18
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	4798      	blx	r3
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	da03      	bge.n	8001264 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800125c:	f06f 0304 	mvn.w	r3, #4
 8001260:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001262:	e00b      	b.n	800127c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	d105      	bne.n	800127c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
         break;
 800127a:	e005      	b.n	8001288 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b1f      	cmp	r3, #31
 8001286:	d9df      	bls.n	8001248 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b1f      	cmp	r3, #31
 800128e:	d902      	bls.n	8001296 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001290:	f06f 0302 	mvn.w	r3, #2
 8001294:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d145      	bne.n	8001328 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6810      	ldr	r0, [r2, #0]
 80012a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012a8:	2100      	movs	r1, #0
 80012aa:	4798      	blx	r3
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db37      	blt.n	8001322 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6810      	ldr	r0, [r2, #0]
 80012ba:	f107 0208 	add.w	r2, r7, #8
 80012be:	2100      	movs	r1, #0
 80012c0:	4798      	blx	r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db28      	blt.n	800131a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4798      	blx	r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012d2:	e01c      	b.n	800130e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4798      	blx	r3
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e6:	d80e      	bhi.n	8001306 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6810      	ldr	r0, [r2, #0]
 80012f0:	f107 0208 	add.w	r2, r7, #8
 80012f4:	2100      	movs	r1, #0
 80012f6:	4798      	blx	r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da07      	bge.n	800130e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012fe:	f06f 0304 	mvn.w	r3, #4
 8001302:	613b      	str	r3, [r7, #16]
                 break;
 8001304:	e010      	b.n	8001328 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001306:	f06f 0301 	mvn.w	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
               break;
 800130c:	e00c      	b.n	8001328 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1dd      	bne.n	80012d4 <LAN8742_Init+0xc6>
 8001318:	e006      	b.n	8001328 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800131a:	f06f 0304 	mvn.w	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	e002      	b.n	8001328 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001322:	f06f 0303 	mvn.w	r3, #3
 8001326:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d112      	bne.n	8001354 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4798      	blx	r3
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001338:	bf00      	nop
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4798      	blx	r3
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800134c:	d9f5      	bls.n	800133a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001354:	693b      	ldr	r3, [r7, #16]
 }
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6810      	ldr	r0, [r2, #0]
 8001372:	f107 020c 	add.w	r2, r7, #12
 8001376:	2101      	movs	r1, #1
 8001378:	4798      	blx	r3
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	da02      	bge.n	8001386 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001380:	f06f 0304 	mvn.w	r3, #4
 8001384:	e06e      	b.n	8001464 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	2101      	movs	r1, #1
 8001394:	4798      	blx	r3
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	da02      	bge.n	80013a2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800139c:	f06f 0304 	mvn.w	r3, #4
 80013a0:	e060      	b.n	8001464 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80013ac:	2301      	movs	r3, #1
 80013ae:	e059      	b.n	8001464 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6810      	ldr	r0, [r2, #0]
 80013b8:	f107 020c 	add.w	r2, r7, #12
 80013bc:	2100      	movs	r1, #0
 80013be:	4798      	blx	r3
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da02      	bge.n	80013cc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013c6:	f06f 0304 	mvn.w	r3, #4
 80013ca:	e04b      	b.n	8001464 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11b      	bne.n	800140e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <LAN8742_GetLinkState+0x90>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013ea:	2302      	movs	r3, #2
 80013ec:	e03a      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e033      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001406:	2304      	movs	r3, #4
 8001408:	e02c      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800140a:	2305      	movs	r3, #5
 800140c:	e02a      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6810      	ldr	r0, [r2, #0]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	211f      	movs	r1, #31
 800141c:	4798      	blx	r3
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	da02      	bge.n	800142a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001424:	f06f 0304 	mvn.w	r3, #4
 8001428:	e01c      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001434:	2306      	movs	r3, #6
 8001436:	e015      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 031c 	and.w	r3, r3, #28
 800143e:	2b18      	cmp	r3, #24
 8001440:	d101      	bne.n	8001446 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001442:	2302      	movs	r3, #2
 8001444:	e00e      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f003 031c 	and.w	r3, r3, #28
 800144c:	2b08      	cmp	r3, #8
 800144e:	d101      	bne.n	8001454 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001450:	2303      	movs	r3, #3
 8001452:	e007      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 031c 	and.w	r3, r3, #28
 800145a:	2b14      	cmp	r3, #20
 800145c:	d101      	bne.n	8001462 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800145e:	2304      	movs	r3, #4
 8001460:	e000      	b.n	8001464 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001462:	2305      	movs	r3, #5
    }				
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 f95e 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001478:	f002 fed6 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 800147c:	4601      	mov	r1, r0
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_Init+0x68>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_Init+0x6c>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	fa21 f303 	lsr.w	r3, r1, r3
 8001494:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_Init+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_Init+0x6c>)
 80014a0:	5cd3      	ldrb	r3, [r2, r3]
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_Init+0x70>)
 80014ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_Init+0x74>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f814 	bl	80014e4 <HAL_InitTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e002      	b.n	80014cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fc45 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58024400 	.word	0x58024400
 80014d8:	08015570 	.word	0x08015570
 80014dc:	24000004 	.word	0x24000004
 80014e0:	24000000 	.word	0x24000000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_InitTick+0x60>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e021      	b.n	800153c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_InitTick+0x64>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_InitTick+0x60>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f935 	bl	800177e <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f90d 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x68>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2400000c 	.word	0x2400000c
 8001548:	24000000 	.word	0x24000000
 800154c:	24000008 	.word	0x24000008

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	2400000c 	.word	0x2400000c
 8001574:	2400033c 	.word	0x2400033c

08001578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2400033c 	.word	0x2400033c

08001590 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetREVID+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0c1b      	lsrs	r3, r3, #16
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	5c001000 	.word	0x5c001000

080015a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	58000400 	.word	0x58000400

080015d0 <__NVIC_SetPriorityGrouping>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff47 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb2 	bl	80016f0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800179c:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MPU_Disable+0x24>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_MPU_Disable+0x24>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_MPU_Disable+0x28>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000ed90 	.word	0xe000ed90

080017c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_MPU_Enable+0x34>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_MPU_Enable+0x38>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_MPU_Enable+0x38>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017e6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed90 	.word	0xe000ed90
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	785a      	ldrb	r2, [r3, #1]
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_MPU_ConfigRegion+0x84>)
 800180e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d029      	beq.n	800186c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_MPU_ConfigRegion+0x84>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7b1b      	ldrb	r3, [r3, #12]
 8001824:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7adb      	ldrb	r3, [r3, #11]
 800182a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800182c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7a9b      	ldrb	r3, [r3, #10]
 8001832:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001834:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7b5b      	ldrb	r3, [r3, #13]
 800183a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800183c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7b9b      	ldrb	r3, [r3, #14]
 8001842:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001844:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7bdb      	ldrb	r3, [r3, #15]
 800184a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800184c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7a5b      	ldrb	r3, [r3, #9]
 8001852:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7a1b      	ldrb	r3, [r3, #8]
 800185a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800185c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001866:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001868:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800186a:	e005      	b.n	8001878 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_MPU_ConfigRegion+0x84>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_MPU_ConfigRegion+0x84>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed90 	.word	0xe000ed90

08001888 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0c6      	b.n	8001a28 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f005 fc00 	bl	80070a8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2223      	movs	r2, #35	; 0x23
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_ETH_Init+0x1a8>)
 80018b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018b4:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_ETH_Init+0x1a8>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_ETH_Init+0x1a8>)
 80018c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7a1b      	ldrb	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fe67 	bl	80015a8 <HAL_SYSCFG_ETHInterfaceSelect>
 80018da:	e003      	b.n	80018e4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018e0:	f7ff fe62 	bl	80015a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fc:	f7ff fe3c 	bl	8001578 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001902:	e00f      	b.n	8001924 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001904:	f7ff fe38 	bl	8001578 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001912:	d907      	bls.n	8001924 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2204      	movs	r2, #4
 8001918:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	22e0      	movs	r2, #224	; 0xe0
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e081      	b.n	8001a28 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e6      	bne.n	8001904 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f001 f95c 	bl	8002bf4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800193c:	f002 fde6 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_ETH_Init+0x1ac>)
 8001944:	fba3 2302 	umull	r2, r3, r3, r2
 8001948:	0c9a      	lsrs	r2, r3, #18
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3a01      	subs	r2, #1
 8001950:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f001 f8af 	bl	8002ab8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001970:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001974:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	22e0      	movs	r2, #224	; 0xe0
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e04a      	b.n	8001a28 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f241 1308 	movw	r3, #4360	; 0x1108
 800199a:	4413      	add	r3, r2
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_ETH_Init+0x1b0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6952      	ldr	r2, [r2, #20]
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	f241 1308 	movw	r3, #4360	; 0x1108
 80019b2:	440b      	add	r3, r1
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 f974 	bl	8002ca4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f001 f9b8 	bl	8002d32 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	3305      	adds	r3, #5
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021a      	lsls	r2, r3, #8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3303      	adds	r3, #3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	061a      	lsls	r2, r3, #24
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	3302      	adds	r3, #2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a0e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2210      	movs	r2, #16
 8001a24:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58024400 	.word	0x58024400
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	ffff8001 	.word	0xffff8001

08001a3c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	330a      	adds	r3, #10
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_ETH_DescAssignMemory+0x28>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d904      	bls.n	8001a6e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e021      	b.n	8001ab2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d14c      	bne.n	8001b68 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2223      	movs	r2, #35	; 0x23
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0202 	orr.w	r2, r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b10:	4413      	add	r3, r2
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6811      	ldr	r1, [r2, #0]
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b20:	440b      	add	r3, r1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6811      	ldr	r1, [r2, #0]
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b3c:	440b      	add	r3, r1
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001b52:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b56:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2222      	movs	r2, #34	; 0x22
 8001b62:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d040      	beq.n	8001c08 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2223      	movs	r2, #35	; 0x23
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b94:	4413      	add	r3, r2
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6811      	ldr	r1, [r2, #0]
 8001b9c:	f023 0201 	bic.w	r2, r3, #1
 8001ba0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ba4:	440b      	add	r3, r1
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6811      	ldr	r1, [r2, #0]
 8001bb8:	f023 0201 	bic.w	r2, r3, #1
 8001bbc:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bc0:	440b      	add	r3, r1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0202 	bic.w	r2, r2, #2
 8001bf6:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2210      	movs	r2, #16
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
  }
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e073      	b.n	8001d20 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d16e      	bne.n	8001d1e <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001c40:	2200      	movs	r2, #0
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f001 f8d1 	bl	8002dec <ETH_Prepare_Tx_Descriptors>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e05f      	b.n	8001d20 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3206      	adds	r2, #6
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d904      	bls.n	8001c8a <HAL_ETH_Transmit+0x74>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	1f1a      	subs	r2, r3, #4
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	3106      	adds	r1, #6
 8001c96:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001c9a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001c9e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001ca0:	f7ff fc6a 	bl	8001578 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001ca6:	e034      	b.n	8001d12 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d011      	beq.n	8001cde <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	f043 0208 	orr.w	r2, r3, #8
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	22e0      	movs	r2, #224	; 0xe0
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e020      	b.n	8001d20 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d015      	beq.n	8001d12 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001ce6:	f7ff fc47 	bl	8001578 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d302      	bcc.n	8001cfc <HAL_ETH_Transmit+0xe6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	22e0      	movs	r2, #224	; 0xe0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e006      	b.n	8001d20 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dbc6      	blt.n	8001ca8 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	332c      	adds	r3, #44	; 0x2c
 8001d34:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d44:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d06b      	beq.n	8001e32 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e0ce      	b.n	8001efc <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d036      	beq.n	8001dde <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	3301      	adds	r3, #1
 8001d74:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d902      	bls.n	8001d92 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db11      	blt.n	8001dc8 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2201      	movs	r2, #1
 8001db4:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d902      	bls.n	8001dc8 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b04      	subs	r3, #4
 8001dc6:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e08e      	b.n	8001efc <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d012      	beq.n	8001e10 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001dee:	2301      	movs	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d902      	bls.n	8001e04 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b04      	subs	r3, #4
 8001e02:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	e010      	b.n	8001e32 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	3301      	adds	r3, #1
 8001e14:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d902      	bls.n	8001e28 <HAL_ETH_IsRxDataAvailable+0x100>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b04      	subs	r3, #4
 8001e26:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db02      	blt.n	8001e40 <HAL_ETH_IsRxDataAvailable+0x118>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d98e      	bls.n	8001d5e <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d056      	beq.n	8001ef4 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e03b      	b.n	8001ede <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e74:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d20d      	bcs.n	8001ed8 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d902      	bls.n	8001ece <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3bf      	bcc.n	8001e66 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	f241 1328 	movw	r3, #4392	; 0x1128
 8001ef0:	440b      	add	r3, r1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]

  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3724      	adds	r7, #36	; 0x24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	332c      	adds	r3, #44	; 0x2c
 8001f16:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e07d      	b.n	800203c <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10f      	bne.n	8001f68 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff feed 	bl	8001d28 <HAL_ETH_IsRxDataAvailable>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e071      	b.n	800203c <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	e031      	b.n	8001fd2 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	461a      	mov	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	461a      	mov	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fa8:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d902      	bls.n	8001fbc <HAL_ETH_GetRxDataBuffer+0xb4>
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	3b04      	subs	r3, #4
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3c7      	bcc.n	8001f6e <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d803      	bhi.n	8002008 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e018      	b.n	800203a <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d012      	beq.n	8002036 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	461a      	mov	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	e001      	b.n	800203a <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	332c      	adds	r3, #44	; 0x2c
 8002052:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fe60 	bl	8001d28 <HAL_ETH_IsRxDataAvailable>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e017      	b.n	80020a2 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	4413      	add	r3, r2
 800207a:	3b01      	subs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d902      	bls.n	800208a <HAL_ETH_GetRxDataLength+0x46>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3b04      	subs	r3, #4
 8002088:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b089      	sub	sp, #36	; 0x24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	332c      	adds	r3, #44	; 0x2c
 80020b6:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e057      	b.n	800218a <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e03b      	b.n	8002166 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020fc:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3b01      	subs	r3, #1
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d20d      	bcs.n	8002160 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d902      	bls.n	8002156 <HAL_ETH_BuildRxDescriptors+0xac>
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3b04      	subs	r3, #4
 8002154:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3301      	adds	r3, #1
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	429a      	cmp	r2, r3
 800216c:	d3bf      	bcc.n	80020ee <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	f241 1328 	movw	r3, #4392	; 0x1128
 8002178:	440b      	add	r3, r1
 800217a:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e03e      	b.n	8002236 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021c0:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	055b      	lsls	r3, r3, #21
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f043 030c 	orr.w	r3, r3, #12
 80021e4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80021f8:	f7ff f9be 	bl	8001578 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021fe:	e009      	b.n	8002214 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002200:	f7ff f9ba 	bl	8001578 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220e:	d901      	bls.n	8002214 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e010      	b.n	8002236 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ed      	bne.n	8002200 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e03c      	b.n	80022dc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800226a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	055b      	lsls	r3, r3, #21
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 030c 	bic.w	r3, r3, #12
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_ETH_WritePHYRegister+0xa4>)
 80022a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_ETH_WritePHYRegister+0xa4>)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80022ae:	f7ff f963 	bl	8001578 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80022b4:	e009      	b.n	80022ca <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80022b6:	f7ff f95f 	bl	8001578 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c4:	d901      	bls.n	80022ca <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e008      	b.n	80022dc <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ed      	bne.n	80022b6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40028000 	.word	0x40028000

080022e8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e1c3      	b.n	8002684 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf14      	ite	ne
 800247e:	2301      	movne	r3, #1
 8002480:	2300      	moveq	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0e5b      	lsrs	r3, r3, #25
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002610:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002620:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e00a      	b.n	80026ba <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d105      	bne.n	80026b8 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f860 	bl	8002774 <ETH_SetMACConfig>

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026d4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026dc:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026de:	f001 ff15 	bl	800450c <HAL_RCC_GetHCLKFreq>
 80026e2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d908      	bls.n	80026fe <HAL_ETH_SetMDIOClockRange+0x3a>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d804      	bhi.n	80026fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e027      	b.n	800274e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d908      	bls.n	8002718 <HAL_ETH_SetMDIOClockRange+0x54>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d804      	bhi.n	8002718 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e01a      	b.n	800274e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d903      	bls.n	8002728 <HAL_ETH_SetMDIOClockRange+0x64>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d911      	bls.n	800274c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d908      	bls.n	8002742 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d804      	bhi.n	8002742 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e005      	b.n	800274e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e000      	b.n	800274e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800274c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	01312cff 	.word	0x01312cff
 8002764:	02160ebf 	.word	0x02160ebf
 8002768:	039386ff 	.word	0x039386ff
 800276c:	05f5e0ff 	.word	0x05f5e0ff
 8002770:	08f0d17f 	.word	0x08f0d17f

08002774 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002786:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	791b      	ldrb	r3, [r3, #4]
 800278c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800278e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	7b1b      	ldrb	r3, [r3, #12]
 8002794:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002796:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	7b5b      	ldrb	r3, [r3, #13]
 800279c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800279e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	7b9b      	ldrb	r3, [r3, #14]
 80027a4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80027a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7bdb      	ldrb	r3, [r3, #15]
 80027ac:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027ae:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	7c12      	ldrb	r2, [r2, #16]
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d102      	bne.n	80027be <ETH_SetMACConfig+0x4a>
 80027b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027bc:	e000      	b.n	80027c0 <ETH_SetMACConfig+0x4c>
 80027be:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027c0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	7c52      	ldrb	r2, [r2, #17]
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d102      	bne.n	80027d0 <ETH_SetMACConfig+0x5c>
 80027ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ce:	e000      	b.n	80027d2 <ETH_SetMACConfig+0x5e>
 80027d0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027d2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	7c9b      	ldrb	r3, [r3, #18]
 80027d8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027da:	431a      	orrs	r2, r3
                                macconf->Speed |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80027e0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80027e6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	7f1b      	ldrb	r3, [r3, #28]
 80027ec:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80027ee:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7f5b      	ldrb	r3, [r3, #29]
 80027f4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80027f6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	7f92      	ldrb	r2, [r2, #30]
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	d102      	bne.n	8002806 <ETH_SetMACConfig+0x92>
 8002800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002804:	e000      	b.n	8002808 <ETH_SetMACConfig+0x94>
 8002806:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002808:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7fdb      	ldrb	r3, [r3, #31]
 800280e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002810:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002818:	2a00      	cmp	r2, #0
 800281a:	d102      	bne.n	8002822 <ETH_SetMACConfig+0xae>
 800281c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002820:	e000      	b.n	8002824 <ETH_SetMACConfig+0xb0>
 8002822:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002824:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800282a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002832:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002834:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <ETH_SetMACConfig+0x22c>)
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	430b      	orrs	r3, r1
 8002850:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800285e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002860:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002868:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800286a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002872:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002874:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800287c:	2a00      	cmp	r2, #0
 800287e:	d102      	bne.n	8002886 <ETH_SetMACConfig+0x112>
 8002880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002884:	e000      	b.n	8002888 <ETH_SetMACConfig+0x114>
 8002886:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002888:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <ETH_SetMACConfig+0x230>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	430b      	orrs	r3, r1
 80028a4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <ETH_SetMACConfig+0x234>)
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	430b      	orrs	r3, r1
 80028c8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028d0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028d6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d101      	bne.n	80028e6 <ETH_SetMACConfig+0x172>
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	e000      	b.n	80028e8 <ETH_SetMACConfig+0x174>
 80028e6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80028e8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028fa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	430b      	orrs	r3, r1
 8002908:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002910:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002918:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f023 0103 	bic.w	r1, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	430a      	orrs	r2, r1
 8002932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800293e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800295a:	2a00      	cmp	r2, #0
 800295c:	d101      	bne.n	8002962 <ETH_SetMACConfig+0x1ee>
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	e000      	b.n	8002964 <ETH_SetMACConfig+0x1f0>
 8002962:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002964:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800296c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800296e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002976:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002984:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	430a      	orrs	r2, r1
 8002990:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	00048083 	.word	0x00048083
 80029a4:	c0f88000 	.word	0xc0f88000
 80029a8:	fffffef0 	.word	0xfffffef0

080029ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <ETH_SetDMAConfig+0xf8>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	6809      	ldr	r1, [r1, #0]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80029d2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80029de:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	7b1b      	ldrb	r3, [r3, #12]
 80029e4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80029f2:	4413      	add	r3, r2
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <ETH_SetDMAConfig+0xfc>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6811      	ldr	r1, [r2, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a06:	440b      	add	r3, r1
 8002a08:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7b5b      	ldrb	r3, [r3, #13]
 8002a0e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <ETH_SetDMAConfig+0x100>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6811      	ldr	r1, [r2, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002a32:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	7d1b      	ldrb	r3, [r3, #20]
 8002a3c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a3e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	7f5b      	ldrb	r3, [r3, #29]
 8002a44:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002a52:	4413      	add	r3, r2
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <ETH_SetDMAConfig+0x104>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	f241 1304 	movw	r3, #4356	; 0x1104
 8002a66:	440b      	add	r3, r1
 8002a68:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	7f1b      	ldrb	r3, [r3, #28]
 8002a6e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002a80:	4413      	add	r3, r2
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <ETH_SetDMAConfig+0x108>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	f241 1308 	movw	r3, #4360	; 0x1108
 8002a94:	440b      	add	r3, r1
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	ffff87fd 	.word	0xffff87fd
 8002aa8:	ffff2ffe 	.word	0xffff2ffe
 8002aac:	fffec000 	.word	0xfffec000
 8002ab0:	ffc0efef 	.word	0xffc0efef
 8002ab4:	7fc0ffff 	.word	0x7fc0ffff

08002ab8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0a4      	sub	sp, #144	; 0x90
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b10:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002b14:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b32:	2300      	movs	r3, #0
 8002b34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b50:	2320      	movs	r3, #32
 8002b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b6c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b74:	2302      	movs	r3, #2
 8002b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002b92:	2300      	movs	r3, #0
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fde6 	bl	8002774 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bd0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002bd8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fee1 	bl	80029ac <ETH_SetDMAConfig>
}
 8002bea:	bf00      	nop
 8002bec:	3790      	adds	r7, #144	; 0x90
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c0e:	f001 fc7d 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8002c12:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d908      	bls.n	8002c2e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d804      	bhi.n	8002c2e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e027      	b.n	8002c7e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d908      	bls.n	8002c48 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d804      	bhi.n	8002c48 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e01a      	b.n	8002c7e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d903      	bls.n	8002c58 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d911      	bls.n	8002c7c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d908      	bls.n	8002c72 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d804      	bhi.n	8002c72 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e005      	b.n	8002c7e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e000      	b.n	8002c7e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c7c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	01312cff 	.word	0x01312cff
 8002c94:	02160ebf 	.word	0x02160ebf
 8002c98:	039386ff 	.word	0x039386ff
 8002c9c:	05f5e0ff 	.word	0x05f5e0ff
 8002ca0:	08f0d17f 	.word	0x08f0d17f

08002ca4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e01d      	b.n	8002cee <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	3206      	adds	r2, #6
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d9de      	bls.n	8002cb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f241 132c 	movw	r3, #4396	; 0x112c
 8002d02:	4413      	add	r3, r2
 8002d04:	2203      	movs	r2, #3
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68d9      	ldr	r1, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f241 1314 	movw	r3, #4372	; 0x1114
 8002d14:	4413      	add	r3, r2
 8002d16:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002d24:	601a      	str	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e024      	b.n	8002d8a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6919      	ldr	r1, [r3, #16]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	330a      	adds	r3, #10
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d9d7      	bls.n	8002d40 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	f241 1330 	movw	r3, #4400	; 0x1130
 8002db6:	4413      	add	r3, r2
 8002db8:	2203      	movs	r2, #3
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6919      	ldr	r1, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f241 131c 	movw	r3, #4380	; 0x111c
 8002dc8:	4413      	add	r3, r2
 8002dca:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f241 1328 	movw	r3, #4392	; 0x1128
 8002ddc:	4413      	add	r3, r2
 8002dde:	6019      	str	r1, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b08d      	sub	sp, #52	; 0x34
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e16:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e2a:	d101      	bne.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e223      	b.n	8003278 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d044      	beq.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4b72      	ldr	r3, [pc, #456]	; (800300c <ETH_Prepare_Tx_Descriptors+0x220>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d027      	beq.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002eb4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	; (8003010 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	6992      	ldr	r2, [r2, #24]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <ETH_Prepare_Tx_Descriptors+0x11c>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d030      	beq.n	8002f6a <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	3301      	adds	r3, #1
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d902      	bls.n	8002f32 <ETH_Prepare_Tx_Descriptors+0x146>
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	3301      	adds	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f4e:	d10c      	bne.n	8002f6a <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	e186      	b.n	8003278 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	6852      	ldr	r2, [r2, #4]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	0412      	lsls	r2, r2, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	e008      	b.n	8002fcc <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d021      	beq.n	800301c <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	04db      	lsls	r3, r3, #19
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	69d2      	ldr	r2, [r2, #28]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	e02e      	b.n	800306a <ETH_Prepare_Tx_Descriptors+0x27e>
 800300c:	ffff0000 	.word	0xffff0000
 8003010:	ffffc000 	.word	0xffffc000
 8003014:	c000ffff 	.word	0xc000ffff
 8003018:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	4b98      	ldr	r3, [pc, #608]	; (8003284 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	6852      	ldr	r2, [r2, #4]
 8003028:	431a      	orrs	r2, r3
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	431a      	orrs	r2, r3
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80c0 	beq.w	800323a <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80030cc:	e0b5      	b.n	800323a <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	3301      	adds	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d902      	bls.n	80030ec <ETH_Prepare_Tx_Descriptors+0x300>
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	3b04      	subs	r3, #4
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800310a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800310e:	d126      	bne.n	800315e <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e016      	b.n	8003152 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	3301      	adds	r3, #1
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	2b03      	cmp	r3, #3
 800313a:	d902      	bls.n	8003142 <ETH_Prepare_Tx_Descriptors+0x356>
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	3b04      	subs	r3, #4
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	3301      	adds	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	429a      	cmp	r2, r3
 8003158:	d3e4      	bcc.n	8003124 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	e08c      	b.n	8003278 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	3301      	adds	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800317a:	4013      	ands	r3, r2
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	6852      	ldr	r2, [r2, #4]
 8003180:	431a      	orrs	r2, r3
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	4b3a      	ldr	r3, [pc, #232]	; (800328c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	6852      	ldr	r2, [r2, #4]
 80031aa:	0412      	lsls	r2, r2, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	e008      	b.n	80031c6 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	4b33      	ldr	r3, [pc, #204]	; (800328c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00f      	beq.n	80031f2 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80031d8:	4013      	ands	r3, r2
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	69d2      	ldr	r2, [r2, #28]
 80031de:	431a      	orrs	r2, r3
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	e017      	b.n	8003222 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <ETH_Prepare_Tx_Descriptors+0x498>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	6852      	ldr	r2, [r2, #4]
 80031fe:	431a      	orrs	r2, r3
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	431a      	orrs	r2, r3
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f47f af45 	bne.w	80030ce <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	e005      	b.n	8003264 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003274:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3734      	adds	r7, #52	; 0x34
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	ffff8000 	.word	0xffff8000
 8003288:	ffffc000 	.word	0xffffc000
 800328c:	c000ffff 	.word	0xc000ffff
 8003290:	fffc0000 	.word	0xfffc0000

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_GPIO_Init+0x234>)
 80032a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032a6:	e194      	b.n	80035d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8186 	beq.w	80035cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d00b      	beq.n	80032e0 <HAL_GPIO_Init+0x4c>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d007      	beq.n	80032e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d4:	2b11      	cmp	r3, #17
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d130      	bne.n	8003342 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003316:	2201      	movs	r2, #1
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0201 	and.w	r2, r3, #1
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0xee>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b12      	cmp	r3, #18
 8003380:	d123      	bne.n	80033ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	08da      	lsrs	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3208      	adds	r2, #8
 800338a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	08da      	lsrs	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3208      	adds	r2, #8
 80033c4:	69b9      	ldr	r1, [r7, #24]
 80033c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0203 	and.w	r2, r3, #3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80e0 	beq.w	80035cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_GPIO_Init+0x238>)
 800340e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003412:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_GPIO_Init+0x238>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_GPIO_Init+0x238>)
 800341e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800342a:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <HAL_GPIO_Init+0x23c>)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3302      	adds	r3, #2
 8003432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	220f      	movs	r2, #15
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_GPIO_Init+0x240>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d052      	beq.n	80034fc <HAL_GPIO_Init+0x268>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_GPIO_Init+0x244>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_GPIO_Init+0x22e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_GPIO_Init+0x248>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02b      	beq.n	80034be <HAL_GPIO_Init+0x22a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <HAL_GPIO_Init+0x24c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d025      	beq.n	80034ba <HAL_GPIO_Init+0x226>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <HAL_GPIO_Init+0x250>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01f      	beq.n	80034b6 <HAL_GPIO_Init+0x222>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <HAL_GPIO_Init+0x254>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d019      	beq.n	80034b2 <HAL_GPIO_Init+0x21e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_GPIO_Init+0x258>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_GPIO_Init+0x21a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_GPIO_Init+0x25c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00d      	beq.n	80034aa <HAL_GPIO_Init+0x216>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_GPIO_Init+0x260>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <HAL_GPIO_Init+0x212>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <HAL_GPIO_Init+0x264>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_GPIO_Init+0x20e>
 800349e:	2309      	movs	r3, #9
 80034a0:	e02d      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034a2:	230a      	movs	r3, #10
 80034a4:	e02b      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034a6:	2308      	movs	r3, #8
 80034a8:	e029      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034aa:	2307      	movs	r3, #7
 80034ac:	e027      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e025      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034b2:	2305      	movs	r3, #5
 80034b4:	e023      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034b6:	2304      	movs	r3, #4
 80034b8:	e021      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034ba:	2303      	movs	r3, #3
 80034bc:	e01f      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e01d      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e01b      	b.n	80034fe <HAL_GPIO_Init+0x26a>
 80034c6:	bf00      	nop
 80034c8:	58000080 	.word	0x58000080
 80034cc:	58024400 	.word	0x58024400
 80034d0:	58000400 	.word	0x58000400
 80034d4:	58020000 	.word	0x58020000
 80034d8:	58020400 	.word	0x58020400
 80034dc:	58020800 	.word	0x58020800
 80034e0:	58020c00 	.word	0x58020c00
 80034e4:	58021000 	.word	0x58021000
 80034e8:	58021400 	.word	0x58021400
 80034ec:	58021800 	.word	0x58021800
 80034f0:	58021c00 	.word	0x58021c00
 80034f4:	58022000 	.word	0x58022000
 80034f8:	58022400 	.word	0x58022400
 80034fc:	2300      	movs	r3, #0
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	f002 0203 	and.w	r2, r2, #3
 8003504:	0092      	lsls	r2, r2, #2
 8003506:	4093      	lsls	r3, r2
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800350e:	4938      	ldr	r1, [pc, #224]	; (80035f0 <HAL_GPIO_Init+0x35c>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3301      	adds	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f ae63 	bne.w	80032a8 <HAL_GPIO_Init+0x14>
  }
}
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	58000400 	.word	0x58000400

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_PWREx_ConfigSupply+0x70>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d00a      	beq.n	8003652 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_PWREx_ConfigSupply+0x70>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e01f      	b.n	800368e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e01d      	b.n	800368e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_PWREx_ConfigSupply+0x70>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	490f      	ldr	r1, [pc, #60]	; (8003698 <HAL_PWREx_ConfigSupply+0x70>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4313      	orrs	r3, r2
 8003660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003662:	f7fd ff89 	bl	8001578 <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003668:	e009      	b.n	800367e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800366a:	f7fd ff85 	bl	8001578 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003678:	d901      	bls.n	800367e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e007      	b.n	800368e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_PWREx_ConfigSupply+0x70>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368a:	d1ee      	bne.n	800366a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	58024800 	.word	0x58024800

0800369c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e3ff      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8087 	beq.w	80037ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036bc:	4b99      	ldr	r3, [pc, #612]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036c6:	4b97      	ldr	r3, [pc, #604]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d007      	beq.n	80036e2 <HAL_RCC_OscConfig+0x46>
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	2b18      	cmp	r3, #24
 80036d6:	d110      	bne.n	80036fa <HAL_RCC_OscConfig+0x5e>
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d10b      	bne.n	80036fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e2:	4b90      	ldr	r3, [pc, #576]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d06c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x12c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d168      	bne.n	80037c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e3d9      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x76>
 8003704:	4b87      	ldr	r3, [pc, #540]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a86      	ldr	r2, [pc, #536]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e02e      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x98>
 800371a:	4b82      	ldr	r3, [pc, #520]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a81      	ldr	r2, [pc, #516]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b7f      	ldr	r3, [pc, #508]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7e      	ldr	r2, [pc, #504]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800372c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0xbc>
 800373e:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a78      	ldr	r2, [pc, #480]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b76      	ldr	r3, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003758:	4b72      	ldr	r3, [pc, #456]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a71      	ldr	r2, [pc, #452]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b6f      	ldr	r3, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fefe 	bl	8001578 <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fefa 	bl	8001578 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e38d      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003792:	4b64      	ldr	r3, [pc, #400]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xe4>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd feea 	bl	8001578 <HAL_GetTick>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fd fee6 	bl	8001578 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e379      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ba:	4b5a      	ldr	r3, [pc, #360]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x10c>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80ae 	beq.w	8003934 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d8:	4b52      	ldr	r3, [pc, #328]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037e2:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_RCC_OscConfig+0x162>
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b18      	cmp	r3, #24
 80037f2:	d13a      	bne.n	800386a <HAL_RCC_OscConfig+0x1ce>
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d135      	bne.n	800386a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fe:	4b49      	ldr	r3, [pc, #292]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x17a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e34b      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	f7fd febb 	bl	8001590 <HAL_GetREVID>
 800381a:	4602      	mov	r2, r0
 800381c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003820:	429a      	cmp	r2, r3
 8003822:	d817      	bhi.n	8003854 <HAL_RCC_OscConfig+0x1b8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d108      	bne.n	800383e <HAL_RCC_OscConfig+0x1a2>
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003834:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	e07a      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	031b      	lsls	r3, r3, #12
 800384c:	4935      	ldr	r1, [pc, #212]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003852:	e06f      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b33      	ldr	r3, [pc, #204]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	4930      	ldr	r1, [pc, #192]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003868:	e064      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d045      	beq.n	80038fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0219 	bic.w	r2, r3, #25
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4929      	ldr	r1, [pc, #164]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd fe78 	bl	8001578 <HAL_GetTick>
 8003888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388c:	f7fd fe74 	bl	8001578 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e307      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	f7fd fe71 	bl	8001590 <HAL_GetREVID>
 80038ae:	4602      	mov	r2, r0
 80038b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d817      	bhi.n	80038e8 <HAL_RCC_OscConfig+0x24c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d108      	bne.n	80038d2 <HAL_RCC_OscConfig+0x236>
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038c8:	4a16      	ldr	r2, [pc, #88]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	6053      	str	r3, [r2, #4]
 80038d0:	e030      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	031b      	lsls	r3, r3, #12
 80038e0:	4910      	ldr	r1, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
 80038e6:	e025      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	490b      	ldr	r1, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e01a      	b.n	8003934 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a08      	ldr	r2, [pc, #32]	; (8003924 <HAL_RCC_OscConfig+0x288>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fd fe35 	bl	8001578 <HAL_GetTick>
 800390e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7fd fe31 	bl	8001578 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d903      	bls.n	8003928 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e2c4      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
 8003924:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003928:	4ba4      	ldr	r3, [pc, #656]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ee      	bne.n	8003912 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80a9 	beq.w	8003a94 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4b9e      	ldr	r3, [pc, #632]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800394a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800394c:	4b9b      	ldr	r3, [pc, #620]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d007      	beq.n	8003968 <HAL_RCC_OscConfig+0x2cc>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b18      	cmp	r3, #24
 800395c:	d13a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x338>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d135      	bne.n	80039d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003968:	4b94      	ldr	r3, [pc, #592]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_OscConfig+0x2e4>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d001      	beq.n	8003980 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e296      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003980:	f7fd fe06 	bl	8001590 <HAL_GetREVID>
 8003984:	4602      	mov	r2, r0
 8003986:	f241 0303 	movw	r3, #4099	; 0x1003
 800398a:	429a      	cmp	r2, r3
 800398c:	d817      	bhi.n	80039be <HAL_RCC_OscConfig+0x322>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b20      	cmp	r3, #32
 8003994:	d108      	bne.n	80039a8 <HAL_RCC_OscConfig+0x30c>
 8003996:	4b89      	ldr	r3, [pc, #548]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800399e:	4a87      	ldr	r2, [pc, #540]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a6:	e075      	b.n	8003a94 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a8:	4b84      	ldr	r3, [pc, #528]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	069b      	lsls	r3, r3, #26
 80039b6:	4981      	ldr	r1, [pc, #516]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039bc:	e06a      	b.n	8003a94 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	061b      	lsls	r3, r3, #24
 80039cc:	497b      	ldr	r1, [pc, #492]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d2:	e05f      	b.n	8003a94 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d042      	beq.n	8003a62 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039dc:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a76      	ldr	r2, [pc, #472]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 80039e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fdc6 	bl	8001578 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039f0:	f7fd fdc2 	bl	8001578 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e255      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a02:	4b6e      	ldr	r3, [pc, #440]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a0e:	f7fd fdbf 	bl	8001590 <HAL_GetREVID>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d817      	bhi.n	8003a4c <HAL_RCC_OscConfig+0x3b0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d108      	bne.n	8003a36 <HAL_RCC_OscConfig+0x39a>
 8003a24:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a2c:	4a63      	ldr	r2, [pc, #396]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a32:	6053      	str	r3, [r2, #4]
 8003a34:	e02e      	b.n	8003a94 <HAL_RCC_OscConfig+0x3f8>
 8003a36:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	069b      	lsls	r3, r3, #26
 8003a44:	495d      	ldr	r1, [pc, #372]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 8003a4a:	e023      	b.n	8003a94 <HAL_RCC_OscConfig+0x3f8>
 8003a4c:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	4958      	ldr	r1, [pc, #352]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60cb      	str	r3, [r1, #12]
 8003a60:	e018      	b.n	8003a94 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a62:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a55      	ldr	r2, [pc, #340]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fd83 	bl	8001578 <HAL_GetTick>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a76:	f7fd fd7f 	bl	8001578 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e212      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a88:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d036      	beq.n	8003b0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d019      	beq.n	8003adc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa8:	4b44      	ldr	r3, [pc, #272]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aac:	4a43      	ldr	r2, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd fd60 	bl	8001578 <HAL_GetTick>
 8003ab8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd fd5c 	bl	8001578 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1ef      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x420>
 8003ada:	e018      	b.n	8003b0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003adc:	4b37      	ldr	r3, [pc, #220]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae0:	4a36      	ldr	r2, [pc, #216]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fd46 	bl	8001578 <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af0:	f7fd fd42 	bl	8001578 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1d5      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d036      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a25      	ldr	r2, [pc, #148]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fd23 	bl	8001578 <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b36:	f7fd fd1f 	bl	8001578 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1b2      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x49a>
 8003b54:	e018      	b.n	8003b88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b56:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fd09 	bl	8001578 <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b6a:	f7fd fd05 	bl	8001578 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e198      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <HAL_RCC_OscConfig+0x520>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8085 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_RCC_OscConfig+0x524>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_OscConfig+0x524>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fce9 	bl	8001578 <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fd fce5 	bl	8001578 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b64      	cmp	r3, #100	; 0x64
 8003bb6:	d905      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e178      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc4:	4b96      	ldr	r3, [pc, #600]	; (8003e20 <HAL_RCC_OscConfig+0x784>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ec      	beq.n	8003baa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x54a>
 8003bd8:	4b92      	ldr	r3, [pc, #584]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a91      	ldr	r2, [pc, #580]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e02d      	b.n	8003c42 <HAL_RCC_OscConfig+0x5a6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x56c>
 8003bee:	4b8d      	ldr	r3, [pc, #564]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a8c      	ldr	r2, [pc, #560]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a89      	ldr	r2, [pc, #548]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x5a6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x58e>
 8003c10:	4b84      	ldr	r3, [pc, #528]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a83      	ldr	r2, [pc, #524]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a80      	ldr	r2, [pc, #512]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x5a6>
 8003c2a:	4b7e      	ldr	r3, [pc, #504]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	4b7b      	ldr	r3, [pc, #492]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a7a      	ldr	r2, [pc, #488]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fc95 	bl	8001578 <HAL_GetTick>
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd fc91 	bl	8001578 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e122      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c68:	4b6e      	ldr	r3, [pc, #440]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x5b6>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd fc7f 	bl	8001578 <HAL_GetTick>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fc7b 	bl	8001578 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10c      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c94:	4b63      	ldr	r3, [pc, #396]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8101 	beq.w	8003eac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003caa:	4b5e      	ldr	r3, [pc, #376]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb2:	2b18      	cmp	r3, #24
 8003cb4:	f000 80bc 	beq.w	8003e30 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f040 8095 	bne.w	8003dec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b58      	ldr	r3, [pc, #352]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7fd fc53 	bl	8001578 <HAL_GetTick>
 8003cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd6:	f7fd fc4f 	bl	8001578 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0e2      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f0      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf4:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCC_OscConfig+0x78c>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	430a      	orrs	r2, r1
 8003d08:	4946      	ldr	r1, [pc, #280]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	628b      	str	r3, [r1, #40]	; 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	3b01      	subs	r3, #1
 8003d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	025b      	lsls	r3, r3, #9
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	3b01      	subs	r3, #1
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d3e:	4939      	ldr	r1, [pc, #228]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d44:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a36      	ldr	r2, [pc, #216]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d50:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <HAL_RCC_OscConfig+0x790>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d5c:	00d2      	lsls	r2, r2, #3
 8003d5e:	4931      	ldr	r1, [pc, #196]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d64:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f023 020c 	bic.w	r2, r3, #12
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	492c      	ldr	r1, [pc, #176]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f023 0202 	bic.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	4928      	ldr	r1, [pc, #160]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003da0:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fbd8 	bl	8001578 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd fbd4 	bl	8001578 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e067      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x730>
 8003dea:	e05f      	b.n	8003eac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fbbe 	bl	8001578 <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd fbba 	bl	8001578 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04d      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <HAL_RCC_OscConfig+0x788>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x764>
 8003e1e:	e045      	b.n	8003eac <HAL_RCC_OscConfig+0x810>
 8003e20:	58024800 	.word	0x58024800
 8003e24:	58024400 	.word	0x58024400
 8003e28:	fffffc0c 	.word	0xfffffc0c
 8003e2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x81c>)
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_RCC_OscConfig+0x81c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d031      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0203 	and.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d12a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d122      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0a5b      	lsrs	r3, r3, #9
 8003e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d108      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	0e1b      	lsrs	r3, r3, #24
 8003e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3730      	adds	r7, #48	; 0x30
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	58024400 	.word	0x58024400

08003ebc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e19c      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b8a      	ldr	r3, [pc, #552]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d910      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b87      	ldr	r3, [pc, #540]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 020f 	bic.w	r2, r3, #15
 8003ee6:	4985      	ldr	r1, [pc, #532]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b83      	ldr	r3, [pc, #524]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e184      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d908      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f1c:	4b78      	ldr	r3, [pc, #480]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	4975      	ldr	r1, [pc, #468]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	4b70      	ldr	r3, [pc, #448]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d908      	bls.n	8003f5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	496a      	ldr	r1, [pc, #424]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d010      	beq.n	8003f8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d908      	bls.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f78:	4b61      	ldr	r3, [pc, #388]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	495e      	ldr	r1, [pc, #376]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d908      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fa6:	4b56      	ldr	r3, [pc, #344]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4953      	ldr	r1, [pc, #332]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d908      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f023 020f 	bic.w	r2, r3, #15
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4947      	ldr	r1, [pc, #284]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d055      	beq.n	800409e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ff2:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4940      	ldr	r1, [pc, #256]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8004000:	4313      	orrs	r3, r2
 8004002:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d107      	bne.n	800401c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800400c:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d121      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0f6      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d107      	bne.n	8004034 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004024:	4b36      	ldr	r3, [pc, #216]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d115      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0ea      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800403c:	4b30      	ldr	r3, [pc, #192]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0de      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0d6      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f023 0207 	bic.w	r2, r3, #7
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4925      	ldr	r1, [pc, #148]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800406a:	4313      	orrs	r3, r2
 800406c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fd fa83 	bl	8001578 <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004074:	e00a      	b.n	800408c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004076:	f7fd fa7f 	bl	8001578 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0be      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	429a      	cmp	r2, r3
 800409c:	d1eb      	bne.n	8004076 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d208      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	490e      	ldr	r1, [pc, #56]	; (8004100 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d214      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 020f 	bic.w	r2, r3, #15
 80040e2:	4906      	ldr	r1, [pc, #24]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_ClockConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e086      	b.n	800420a <HAL_RCC_ClockConfig+0x34e>
 80040fc:	52002000 	.word	0x52002000
 8004100:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800411c:	429a      	cmp	r2, r3
 800411e:	d208      	bcs.n	8004132 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004120:	4b3c      	ldr	r3, [pc, #240]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4939      	ldr	r1, [pc, #228]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800412e:	4313      	orrs	r3, r2
 8004130:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800414a:	429a      	cmp	r2, r3
 800414c:	d208      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	492e      	ldr	r1, [pc, #184]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800415c:	4313      	orrs	r3, r2
 800415e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004178:	429a      	cmp	r2, r3
 800417a:	d208      	bcs.n	800418e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	4922      	ldr	r1, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 800418a:	4313      	orrs	r3, r2
 800418c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d208      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4917      	ldr	r1, [pc, #92]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041bc:	f000 f834 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041c0:	4601      	mov	r1, r0
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	4a12      	ldr	r2, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x35c>)
 80041ce:	5cd3      	ldrb	r3, [r2, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa21 f303 	lsr.w	r3, r1, r3
 80041d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_RCC_ClockConfig+0x358>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <HAL_RCC_ClockConfig+0x35c>)
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x360>)
 80041f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_RCC_ClockConfig+0x364>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x368>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd f970 	bl	80014e4 <HAL_InitTick>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	08015570 	.word	0x08015570
 800421c:	24000004 	.word	0x24000004
 8004220:	24000000 	.word	0x24000000
 8004224:	24000008 	.word	0x24000008

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800422e:	4baf      	ldr	r3, [pc, #700]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004236:	2b18      	cmp	r3, #24
 8004238:	f200 814e 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_RCC_GetSysClockFreq+0x1c>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	080042a9 	.word	0x080042a9
 8004248:	080044d9 	.word	0x080044d9
 800424c:	080044d9 	.word	0x080044d9
 8004250:	080044d9 	.word	0x080044d9
 8004254:	080044d9 	.word	0x080044d9
 8004258:	080044d9 	.word	0x080044d9
 800425c:	080044d9 	.word	0x080044d9
 8004260:	080044d9 	.word	0x080044d9
 8004264:	080042cf 	.word	0x080042cf
 8004268:	080044d9 	.word	0x080044d9
 800426c:	080044d9 	.word	0x080044d9
 8004270:	080044d9 	.word	0x080044d9
 8004274:	080044d9 	.word	0x080044d9
 8004278:	080044d9 	.word	0x080044d9
 800427c:	080044d9 	.word	0x080044d9
 8004280:	080044d9 	.word	0x080044d9
 8004284:	080042d5 	.word	0x080042d5
 8004288:	080044d9 	.word	0x080044d9
 800428c:	080044d9 	.word	0x080044d9
 8004290:	080044d9 	.word	0x080044d9
 8004294:	080044d9 	.word	0x080044d9
 8004298:	080044d9 	.word	0x080044d9
 800429c:	080044d9 	.word	0x080044d9
 80042a0:	080044d9 	.word	0x080044d9
 80042a4:	080042db 	.word	0x080042db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a8:	4b90      	ldr	r3, [pc, #576]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042b4:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	4a8c      	ldr	r2, [pc, #560]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042c6:	e10a      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042c8:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042ca:	61bb      	str	r3, [r7, #24]
    break;
 80042cc:	e107      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042ce:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80042d0:	61bb      	str	r3, [r7, #24]
    break;
 80042d2:	e104      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042d4:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80042d6:	61bb      	str	r3, [r7, #24]
    break;
 80042d8:	e101      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042da:	4b84      	ldr	r3, [pc, #528]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042e4:	4b81      	ldr	r3, [pc, #516]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042f0:	4b7e      	ldr	r3, [pc, #504]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042fa:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	08db      	lsrs	r3, r3, #3
 8004300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80da 	beq.w	80044d2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d05a      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x1b2>
 8004324:	2b01      	cmp	r3, #1
 8004326:	d302      	bcc.n	800432e <HAL_RCC_GetSysClockFreq+0x106>
 8004328:	2b02      	cmp	r3, #2
 800432a:	d078      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x1f6>
 800432c:	e099      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800432e:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02d      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800433a:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	08db      	lsrs	r3, r3, #3
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	4a6a      	ldr	r2, [pc, #424]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004374:	ed97 6a02 	vldr	s12, [r7, #8]
 8004378:	eddf 5a60 	vldr	s11, [pc, #384]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800437c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004390:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004394:	e087      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2d8>
 80043a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a8:	4b50      	ldr	r3, [pc, #320]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80043bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2d4>
 80043c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043d8:	e065      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2dc>
 80043e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004400:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441c:	e043      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004428:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004508 <HAL_RCC_GetSysClockFreq+0x2e0>
 800442c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004440:	ed97 6a02 	vldr	s12, [r7, #8]
 8004444:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004460:	e021      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004484:	ed97 6a02 	vldr	s12, [r7, #8]
 8004488:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800448c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044a4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	0a5b      	lsrs	r3, r3, #9
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b0:	3301      	adds	r3, #1
 80044b2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044be:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ca:	ee17 3a90 	vmov	r3, s15
 80044ce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044d0:	e005      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
    break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80044da:	61bb      	str	r3, [r7, #24]
    break;
 80044dc:	bf00      	nop
  }

  return sysclockfreq;
 80044de:	69bb      	ldr	r3, [r7, #24]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3724      	adds	r7, #36	; 0x24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	58024400 	.word	0x58024400
 80044f0:	03d09000 	.word	0x03d09000
 80044f4:	003d0900 	.word	0x003d0900
 80044f8:	007a1200 	.word	0x007a1200
 80044fc:	46000000 	.word	0x46000000
 8004500:	4c742400 	.word	0x4c742400
 8004504:	4a742400 	.word	0x4a742400
 8004508:	4af42400 	.word	0x4af42400

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004512:	f7ff fe89 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8004516:	4601      	mov	r1, r0
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_RCC_GetHCLKFreq+0x50>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <HAL_RCC_GetHCLKFreq+0x54>)
 8004524:	5cd3      	ldrb	r3, [r2, r3]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	fa21 f303 	lsr.w	r3, r1, r3
 800452e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_RCC_GetHCLKFreq+0x50>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <HAL_RCC_GetHCLKFreq+0x54>)
 800453a:	5cd3      	ldrb	r3, [r2, r3]
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <HAL_RCC_GetHCLKFreq+0x58>)
 8004548:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800454a:	4a07      	ldr	r2, [pc, #28]	; (8004568 <HAL_RCC_GetHCLKFreq+0x5c>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_RCC_GetHCLKFreq+0x58>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	58024400 	.word	0x58024400
 8004560:	08015570 	.word	0x08015570
 8004564:	24000004 	.word	0x24000004
 8004568:	24000000 	.word	0x24000000

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004570:	f7ff ffcc 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004574:	4601      	mov	r1, r0
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	58024400 	.word	0x58024400
 8004594:	08015570 	.word	0x08015570

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800459c:	f7ff ffb6 	bl	800450c <HAL_RCC_GetHCLKFreq>
 80045a0:	4601      	mov	r1, r0
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	58024400 	.word	0x58024400
 80045c0:	08015570 	.word	0x08015570

080045c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045cc:	2300      	movs	r3, #0
 80045ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045d0:	2300      	movs	r3, #0
 80045d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d03d      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e8:	d013      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d802      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045f4:	e01f      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80045f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045fa:	d013      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80045fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004600:	d01c      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004602:	e018      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004604:	4baf      	ldr	r3, [pc, #700]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4aae      	ldr	r2, [pc, #696]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 f96f 	bl	80058fc <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fa18 	bl	8005a60 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004644:	4b9f      	ldr	r3, [pc, #636]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004650:	499c      	ldr	r1, [pc, #624]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004652:	4313      	orrs	r3, r2
 8004654:	650b      	str	r3, [r1, #80]	; 0x50
 8004656:	e001      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	2b04      	cmp	r3, #4
 800466e:	d826      	bhi.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	0800468d 	.word	0x0800468d
 800467c:	0800469b 	.word	0x0800469b
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046c5 	.word	0x080046c5
 8004688:	080046c5 	.word	0x080046c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4a8c      	ldr	r2, [pc, #560]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004698:	e015      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f92b 	bl	80058fc <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046aa:	e00c      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3324      	adds	r3, #36	; 0x24
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f9d4 	bl	8005a60 <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80046c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046cc:	4b7d      	ldr	r3, [pc, #500]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	f023 0207 	bic.w	r2, r3, #7
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	497a      	ldr	r1, [pc, #488]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	650b      	str	r3, [r1, #80]	; 0x50
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d03e      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d01c      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d804      	bhi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d00d      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004704:	e01e      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004706:	2bc0      	cmp	r3, #192	; 0xc0
 8004708:	d01f      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800470a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470e:	d01e      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004710:	e018      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004712:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	4a6b      	ldr	r2, [pc, #428]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800471e:	e017      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 f8e8 	bl	80058fc <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004730:	e00e      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f991 	bl	8005a60 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
      break;
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004756:	4b5b      	ldr	r3, [pc, #364]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	4958      	ldr	r1, [pc, #352]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004764:	4313      	orrs	r3, r2
 8004766:	650b      	str	r3, [r1, #80]	; 0x50
 8004768:	e001      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d044      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004784:	d01f      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478a:	d805      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004794:	d00e      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004796:	e01f      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004798:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800479c:	d01f      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800479e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047a2:	d01e      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80047a4:	e018      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4a46      	ldr	r2, [pc, #280]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b2:	e017      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f89e 	bl	80058fc <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047c4:	e00e      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3324      	adds	r3, #36	; 0x24
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 f947 	bl	8005a60 <RCCEx_PLL3_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d6:	e005      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
      break;
 80047dc:	e002      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80047e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047ea:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047f8:	4932      	ldr	r1, [pc, #200]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	658b      	str	r3, [r1, #88]	; 0x58
 80047fe:	e001      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480c:	2b00      	cmp	r3, #0
 800480e:	d044      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481a:	d01f      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800481c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004820:	d805      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800482a:	d00e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800482c:	e01f      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800482e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004832:	d01f      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004838:	d01e      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800483a:	e018      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004848:	e017      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f853 	bl	80058fc <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800485a:	e00e      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3324      	adds	r3, #36	; 0x24
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f8fc 	bl	8005a60 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800486c:	e005      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
      break;
 8004872:	e002      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800488e:	490d      	ldr	r1, [pc, #52]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004890:	4313      	orrs	r3, r2
 8004892:	658b      	str	r3, [r1, #88]	; 0x58
 8004894:	e001      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d035      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d00c      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d802      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80048b6:	e017      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80048bc:	2b30      	cmp	r3, #48	; 0x30
 80048be:	d018      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80048c0:	e012      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c8:	4baf      	ldr	r3, [pc, #700]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4aae      	ldr	r2, [pc, #696]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048d4:	e00e      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	2102      	movs	r1, #2
 80048dc:	4618      	mov	r0, r3
 80048de:	f001 f80d 	bl	80058fc <RCCEx_PLL2_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048e6:	e005      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
      break;
 80048ec:	e002      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80048f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048fa:	4ba3      	ldr	r3, [pc, #652]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	49a0      	ldr	r1, [pc, #640]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800490c:	e001      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d042      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004926:	d01f      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d805      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d00e      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004938:	e01f      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800493a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800493e:	d01f      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004944:	d01e      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004946:	e018      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004948:	4b8f      	ldr	r3, [pc, #572]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4a8e      	ldr	r2, [pc, #568]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800494e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004954:	e017      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f000 ffcd 	bl	80058fc <RCCEx_PLL2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004966:	e00e      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f876 	bl	8005a60 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004978:	e005      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800498c:	4b7e      	ldr	r3, [pc, #504]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	497b      	ldr	r1, [pc, #492]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	650b      	str	r3, [r1, #80]	; 0x50
 800499e:	e001      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d042      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b8:	d01b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80049ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049be:	d805      	bhi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d022      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80049ca:	e01b      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80049cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049d0:	d01d      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80049d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d6:	d01c      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80049d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049dc:	d01b      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80049de:	e011      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ff88 	bl	80058fc <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049f0:	e012      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f831 	bl	8005a60 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a02:	e009      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a1e:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	4957      	ldr	r1, [pc, #348]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	650b      	str	r3, [r1, #80]	; 0x50
 8004a30:	e001      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d044      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4c:	d01b      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a52:	d805      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d022      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004a5e:	e01b      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a64:	d01d      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a6a:	d01c      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a70:	d01b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004a72:	e011      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ff3e 	bl	80058fc <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a84:	e012      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3324      	adds	r3, #36	; 0x24
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ffe7 	bl	8005a60 <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a96:	e009      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ab2:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ac0:	4931      	ldr	r1, [pc, #196]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02d      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ae0:	d005      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae6:	d009      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004aec:	e00f      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004afa:	e00c      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fefa 	bl	80058fc <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b0c:	e003      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	e000      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b28:	4917      	ldr	r1, [pc, #92]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b2e:	e001      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d035      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d81b      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b8d 	.word	0x08004b8d
 8004b54:	08004b61 	.word	0x08004b61
 8004b58:	08004b6f 	.word	0x08004b6f
 8004b5c:	08004b8d 	.word	0x08004b8d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b6c:	e00f      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2102      	movs	r1, #2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fec1 	bl	80058fc <RCCEx_PLL2_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b7e:	e006      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	e003      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
      break;
 8004b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b94:	4bba      	ldr	r3, [pc, #744]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	f023 0203 	bic.w	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	49b7      	ldr	r1, [pc, #732]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ba6:	e001      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8086 	beq.w	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bba:	4bb2      	ldr	r3, [pc, #712]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4ab1      	ldr	r2, [pc, #708]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fcd7 	bl	8001578 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bcc:	e009      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fcd3 	bl	8001578 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	; 0x64
 8004bda:	d902      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	75fb      	strb	r3, [r7, #23]
        break;
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be2:	4ba8      	ldr	r3, [pc, #672]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d166      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004bf4:	4ba2      	ldr	r3, [pc, #648]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bfe:	4053      	eors	r3, r2
 8004c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c08:	4b9d      	ldr	r3, [pc, #628]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c12:	4b9b      	ldr	r3, [pc, #620]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a9a      	ldr	r2, [pc, #616]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1e:	4b98      	ldr	r3, [pc, #608]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a97      	ldr	r2, [pc, #604]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c2a:	4a95      	ldr	r2, [pc, #596]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	d115      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fc fc9c 	bl	8001578 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c42:	e00b      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fc fc98 	bl	8001578 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d902      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	75fb      	strb	r3, [r7, #23]
            break;
 8004c5a:	e005      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5c:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ed      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d126      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7c:	d10d      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004c7e:	4b80      	ldr	r3, [pc, #512]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c8c:	0919      	lsrs	r1, r3, #4
 8004c8e:	4b7e      	ldr	r3, [pc, #504]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004c90:	400b      	ands	r3, r1
 8004c92:	497b      	ldr	r1, [pc, #492]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
 8004c98:	e005      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004c9a:	4b79      	ldr	r3, [pc, #484]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	4a78      	ldr	r2, [pc, #480]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ca0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ca4:	6113      	str	r3, [r2, #16]
 8004ca6:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ca8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb4:	4972      	ldr	r1, [pc, #456]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	670b      	str	r3, [r1, #112]	; 0x70
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	75bb      	strb	r3, [r7, #22]
 8004cc0:	e001      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d07d      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd6:	2b28      	cmp	r3, #40	; 0x28
 8004cd8:	d866      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004daf 	.word	0x08004daf
 8004ce4:	08004da9 	.word	0x08004da9
 8004ce8:	08004da9 	.word	0x08004da9
 8004cec:	08004da9 	.word	0x08004da9
 8004cf0:	08004da9 	.word	0x08004da9
 8004cf4:	08004da9 	.word	0x08004da9
 8004cf8:	08004da9 	.word	0x08004da9
 8004cfc:	08004da9 	.word	0x08004da9
 8004d00:	08004d85 	.word	0x08004d85
 8004d04:	08004da9 	.word	0x08004da9
 8004d08:	08004da9 	.word	0x08004da9
 8004d0c:	08004da9 	.word	0x08004da9
 8004d10:	08004da9 	.word	0x08004da9
 8004d14:	08004da9 	.word	0x08004da9
 8004d18:	08004da9 	.word	0x08004da9
 8004d1c:	08004da9 	.word	0x08004da9
 8004d20:	08004d97 	.word	0x08004d97
 8004d24:	08004da9 	.word	0x08004da9
 8004d28:	08004da9 	.word	0x08004da9
 8004d2c:	08004da9 	.word	0x08004da9
 8004d30:	08004da9 	.word	0x08004da9
 8004d34:	08004da9 	.word	0x08004da9
 8004d38:	08004da9 	.word	0x08004da9
 8004d3c:	08004da9 	.word	0x08004da9
 8004d40:	08004daf 	.word	0x08004daf
 8004d44:	08004da9 	.word	0x08004da9
 8004d48:	08004da9 	.word	0x08004da9
 8004d4c:	08004da9 	.word	0x08004da9
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004da9 	.word	0x08004da9
 8004d60:	08004daf 	.word	0x08004daf
 8004d64:	08004da9 	.word	0x08004da9
 8004d68:	08004da9 	.word	0x08004da9
 8004d6c:	08004da9 	.word	0x08004da9
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004daf 	.word	0x08004daf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	2101      	movs	r1, #1
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fdb6 	bl	80058fc <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d94:	e00c      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3324      	adds	r3, #36	; 0x24
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fe5f 	bl	8005a60 <RCCEx_PLL3_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004db6:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc2:	492f      	ldr	r1, [pc, #188]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	654b      	str	r3, [r1, #84]	; 0x54
 8004dc8:	e001      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d037      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d820      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e2b 	.word	0x08004e2b
 8004dec:	08004e01 	.word	0x08004e01
 8004df0:	08004e13 	.word	0x08004e13
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e2b 	.word	0x08004e2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fd78 	bl	80058fc <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e10:	e00c      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3324      	adds	r3, #36	; 0x24
 8004e16:	2101      	movs	r1, #1
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fe21 	bl	8005a60 <RCCEx_PLL3_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f023 0207 	bic.w	r2, r3, #7
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	4910      	ldr	r1, [pc, #64]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	654b      	str	r3, [r1, #84]	; 0x54
 8004e44:	e001      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d040      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	d827      	bhi.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004eb7 	.word	0x08004eb7
 8004e6c:	08004e8d 	.word	0x08004e8d
 8004e70:	08004e9f 	.word	0x08004e9f
 8004e74:	08004eb7 	.word	0x08004eb7
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004eb7 	.word	0x08004eb7
 8004e80:	58024400 	.word	0x58024400
 8004e84:	58024800 	.word	0x58024800
 8004e88:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fd32 	bl	80058fc <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e9c:	e00c      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3324      	adds	r3, #36	; 0x24
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fddb 	bl	8005a60 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ebe:	4bb2      	ldr	r3, [pc, #712]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	f023 0207 	bic.w	r2, r3, #7
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ecc:	49ae      	ldr	r1, [pc, #696]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8004ed2:	e001      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d044      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eee:	d01b      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef4:	d805      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d022      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004f00:	e01b      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d01d      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f0c:	d01c      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004f0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f12:	d01b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004f14:	e011      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fced 	bl	80058fc <RCCEx_PLL2_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f26:	e012      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3324      	adds	r3, #36	; 0x24
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fd96 	bl	8005a60 <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f38:	e009      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3e:	e006      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004f40:	bf00      	nop
 8004f42:	e004      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f54:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f62:	4989      	ldr	r1, [pc, #548]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	654b      	str	r3, [r1, #84]	; 0x54
 8004f68:	e001      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d044      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f84:	d01b      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8a:	d805      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d022      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004f96:	e01b      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9c:	d01d      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004f9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fa2:	d01c      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fa8:	d01b      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004faa:	e011      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fca2 	bl	80058fc <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fbc:	e012      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3324      	adds	r3, #36	; 0x24
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fd4b 	bl	8005a60 <RCCEx_PLL3_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fce:	e009      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e004      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fea:	4b67      	ldr	r3, [pc, #412]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ff8:	4963      	ldr	r1, [pc, #396]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	658b      	str	r3, [r1, #88]	; 0x58
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b00      	cmp	r3, #0
 800500e:	d044      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501a:	d01b      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800501c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005020:	d805      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d022      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800502c:	e01b      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d01d      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005034:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005038:	d01c      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800503a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800503e:	d01b      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005040:	e011      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fc57 	bl	80058fc <RCCEx_PLL2_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005052:	e012      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3324      	adds	r3, #36	; 0x24
 8005058:	2102      	movs	r1, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fd00 	bl	8005a60 <RCCEx_PLL3_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005064:	e009      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
      break;
 800506a:	e006      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800506c:	bf00      	nop
 800506e:	e004      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005070:	bf00      	nop
 8005072:	e002      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005080:	4b41      	ldr	r3, [pc, #260]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508e:	493e      	ldr	r1, [pc, #248]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005090:	4313      	orrs	r3, r2
 8005092:	658b      	str	r3, [r1, #88]	; 0x58
 8005094:	e001      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b0:	d10a      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3324      	adds	r3, #36	; 0x24
 80050b6:	2102      	movs	r1, #2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fcd1 	bl	8005a60 <RCCEx_PLL3_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d6:	492c      	ldr	r1, [pc, #176]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f2:	d10a      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3324      	adds	r3, #36	; 0x24
 80050f8:	2102      	movs	r1, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fcb0 	bl	8005a60 <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005118:	491b      	ldr	r1, [pc, #108]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800511a:	4313      	orrs	r3, r2
 800511c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d032      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d00d      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513a:	d016      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d111      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fbd8 	bl	80058fc <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005150:	e00c      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3324      	adds	r3, #36	; 0x24
 8005156:	2102      	movs	r1, #2
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fc81 	bl	8005a60 <RCCEx_PLL3_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005162:	e003      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
      break;
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800516a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10c      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005180:	4901      	ldr	r1, [pc, #4]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005182:	4313      	orrs	r3, r2
 8005184:	658b      	str	r3, [r1, #88]	; 0x58
 8005186:	e003      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02f      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a6:	d00c      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80051a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051ac:	d015      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d10f      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b79      	ldr	r3, [pc, #484]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a78      	ldr	r2, [pc, #480]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80051c0:	e00c      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	2101      	movs	r1, #1
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fc49 	bl	8005a60 <RCCEx_PLL3_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80051d2:	e003      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
      break;
 80051d8:	e000      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80051da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e2:	4b6e      	ldr	r3, [pc, #440]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f0:	496a      	ldr	r1, [pc, #424]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	654b      	str	r3, [r1, #84]	; 0x54
 80051f6:	e001      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d029      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d007      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005216:	e00f      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005218:	4b60      	ldr	r3, [pc, #384]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	4a5f      	ldr	r2, [pc, #380]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800521e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005224:	e00b      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	2102      	movs	r1, #2
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fb65 	bl	80058fc <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005236:	e002      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
      break;
 800523c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005244:	4b55      	ldr	r3, [pc, #340]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005250:	4952      	ldr	r1, [pc, #328]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005256:	e001      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbf6 	bl	8005a60 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d02f      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d00c      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005298:	d802      	bhi.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800529e:	e00d      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a4:	d00f      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80052a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052aa:	d00e      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ae:	4b3b      	ldr	r3, [pc, #236]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4a3a      	ldr	r2, [pc, #232]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80052ba:	e007      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
      break;
 80052c0:	e004      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80052ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052d2:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052de:	492f      	ldr	r1, [pc, #188]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	654b      	str	r3, [r1, #84]	; 0x54
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052f6:	4b29      	ldr	r3, [pc, #164]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4926      	ldr	r1, [pc, #152]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005304:	4313      	orrs	r3, r2
 8005306:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005314:	4b21      	ldr	r3, [pc, #132]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005322:	491e      	ldr	r1, [pc, #120]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005324:	4313      	orrs	r3, r2
 8005326:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005334:	4b19      	ldr	r3, [pc, #100]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	4916      	ldr	r1, [pc, #88]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005342:	4313      	orrs	r3, r2
 8005344:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	4a11      	ldr	r2, [pc, #68]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005358:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800535c:	6113      	str	r3, [r2, #16]
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005368:	490c      	ldr	r1, [pc, #48]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	da08      	bge.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	4906      	ldr	r1, [pc, #24]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005388:	7dbb      	ldrb	r3, [r7, #22]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	58024400 	.word	0x58024400

080053a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053a4:	f7ff f8b2 	bl	800450c <HAL_RCC_GetHCLKFreq>
 80053a8:	4601      	mov	r1, r0
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053b6:	5cd3      	ldrb	r3, [r2, r3]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	58024400 	.word	0x58024400
 80053c8:	08015570 	.word	0x08015570

080053cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	; 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053d4:	4b9d      	ldr	r3, [pc, #628]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80053de:	4b9b      	ldr	r3, [pc, #620]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	0b1b      	lsrs	r3, r3, #12
 80053e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053ea:	4b98      	ldr	r3, [pc, #608]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	091b      	lsrs	r3, r3, #4
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80053f6:	4b95      	ldr	r3, [pc, #596]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 810a 	beq.w	800562e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d05a      	beq.n	80054d6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005420:	2b01      	cmp	r3, #1
 8005422:	d302      	bcc.n	800542a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005424:	2b02      	cmp	r3, #2
 8005426:	d078      	beq.n	800551a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005428:	e099      	b.n	800555e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800542a:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02d      	beq.n	8005492 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005436:	4b85      	ldr	r3, [pc, #532]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	08db      	lsrs	r3, r3, #3
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	4a83      	ldr	r2, [pc, #524]	; (8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005442:	fa22 f303 	lsr.w	r3, r2, r3
 8005446:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005460:	4b7a      	ldr	r3, [pc, #488]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005470:	ed97 6a03 	vldr	s12, [r7, #12]
 8005474:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005490:	e087      	b.n	80055a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80054a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a4:	4b69      	ldr	r3, [pc, #420]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80054bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d4:	e065      	b.n	80055a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80054e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e8:	4b58      	ldr	r3, [pc, #352]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005514:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005518:	e043      	b.n	80055a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005524:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005660 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552c:	4b47      	ldr	r3, [pc, #284]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005540:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005558:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800555c:	e021      	b.n	80055a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005568:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800556c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005580:	ed97 6a03 	vldr	s12, [r7, #12]
 8005584:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055a0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	0a5b      	lsrs	r3, r3, #9
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c8:	ee17 2a90 	vmov	r2, s15
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f6:	ee17 2a90 	vmov	r2, s15
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	0e1b      	lsrs	r3, r3, #24
 8005604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005618:	edd7 6a07 	vldr	s13, [r7, #28]
 800561c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005624:	ee17 2a90 	vmov	r2, s15
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800562c:	e008      	b.n	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	3724      	adds	r7, #36	; 0x24
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	58024400 	.word	0x58024400
 8005650:	03d09000 	.word	0x03d09000
 8005654:	46000000 	.word	0x46000000
 8005658:	4c742400 	.word	0x4c742400
 800565c:	4a742400 	.word	0x4a742400
 8005660:	4af42400 	.word	0x4af42400

08005664 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800566c:	4b9d      	ldr	r3, [pc, #628]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005676:	4b9b      	ldr	r3, [pc, #620]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	0d1b      	lsrs	r3, r3, #20
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005682:	4b98      	ldr	r3, [pc, #608]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800568e:	4b95      	ldr	r3, [pc, #596]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 810a 	beq.w	80058c6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d05a      	beq.n	800576e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d302      	bcc.n	80056c2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d078      	beq.n	80057b2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80056c0:	e099      	b.n	80057f6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c2:	4b88      	ldr	r3, [pc, #544]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02d      	beq.n	800572a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056ce:	4b85      	ldr	r3, [pc, #532]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	4a83      	ldr	r2, [pc, #524]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f8:	4b7a      	ldr	r3, [pc, #488]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005708:	ed97 6a03 	vldr	s12, [r7, #12]
 800570c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005724:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005728:	e087      	b.n	800583a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005734:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573c:	4b69      	ldr	r3, [pc, #420]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005744:	ee07 3a90 	vmov	s15, r3
 8005748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005750:	eddf 5a66 	vldr	s11, [pc, #408]	; 80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800576c:	e065      	b.n	800583a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005778:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800577c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005780:	4b58      	ldr	r3, [pc, #352]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005790:	ed97 6a03 	vldr	s12, [r7, #12]
 8005794:	eddf 5a55 	vldr	s11, [pc, #340]	; 80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057b0:	e043      	b.n	800583a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80057c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c4:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80057dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057f4:	e021      	b.n	800583a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005800:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005808:	4b36      	ldr	r3, [pc, #216]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005818:	ed97 6a03 	vldr	s12, [r7, #12]
 800581c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005838:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800583a:	4b2a      	ldr	r3, [pc, #168]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	0a5b      	lsrs	r3, r3, #9
 8005840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005854:	edd7 6a07 	vldr	s13, [r7, #28]
 8005858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005860:	ee17 2a90 	vmov	r2, s15
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005868:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800587e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005882:	edd7 6a07 	vldr	s13, [r7, #28]
 8005886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588e:	ee17 2a90 	vmov	r2, s15
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	0e1b      	lsrs	r3, r3, #24
 800589c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058bc:	ee17 2a90 	vmov	r2, s15
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058c4:	e008      	b.n	80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	609a      	str	r2, [r3, #8]
}
 80058d8:	bf00      	nop
 80058da:	3724      	adds	r7, #36	; 0x24
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	58024400 	.word	0x58024400
 80058e8:	03d09000 	.word	0x03d09000
 80058ec:	46000000 	.word	0x46000000
 80058f0:	4c742400 	.word	0x4c742400
 80058f4:	4a742400 	.word	0x4a742400
 80058f8:	4af42400 	.word	0x4af42400

080058fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800590a:	4b53      	ldr	r3, [pc, #332]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d101      	bne.n	800591a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e099      	b.n	8005a4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800591a:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a4e      	ldr	r2, [pc, #312]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fb fe27 	bl	8001578 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800592e:	f7fb fe23 	bl	8001578 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e086      	b.n	8005a4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f0      	bne.n	800592e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800594c:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	031b      	lsls	r3, r3, #12
 800595a:	493f      	ldr	r1, [pc, #252]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	628b      	str	r3, [r1, #40]	; 0x28
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	025b      	lsls	r3, r3, #9
 8005972:	b29b      	uxth	r3, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	3b01      	subs	r3, #1
 800597c:	041b      	lsls	r3, r3, #16
 800597e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	3b01      	subs	r3, #1
 800598a:	061b      	lsls	r3, r3, #24
 800598c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005990:	4931      	ldr	r1, [pc, #196]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	492d      	ldr	r1, [pc, #180]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059a8:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	f023 0220 	bic.w	r2, r3, #32
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	4928      	ldr	r1, [pc, #160]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059ba:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059c0:	f023 0310 	bic.w	r3, r3, #16
 80059c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <RCCEx_PLL2_Config+0x160>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	69d2      	ldr	r2, [r2, #28]
 80059d2:	00d2      	lsls	r2, r2, #3
 80059d4:	4920      	ldr	r1, [pc, #128]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059da:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059e0:	f043 0310 	orr.w	r3, r3, #16
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059f8:	e00f      	b.n	8005a1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a0c:	e005      	b.n	8005a1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a11      	ldr	r2, [pc, #68]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a26:	f7fb fda7 	bl	8001578 <HAL_GetTick>
 8005a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a2c:	e008      	b.n	8005a40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a2e:	f7fb fda3 	bl	8001578 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e006      	b.n	8005a4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	ffff0007 	.word	0xffff0007

08005a60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a6e:	4b53      	ldr	r3, [pc, #332]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d101      	bne.n	8005a7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e099      	b.n	8005bb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a7e:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a4e      	ldr	r2, [pc, #312]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fb fd75 	bl	8001578 <HAL_GetTick>
 8005a8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a90:	e008      	b.n	8005aa4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a92:	f7fb fd71 	bl	8001578 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e086      	b.n	8005bb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aa4:	4b45      	ldr	r3, [pc, #276]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ab0:	4b42      	ldr	r3, [pc, #264]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	493f      	ldr	r1, [pc, #252]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	025b      	lsls	r3, r3, #9
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005af4:	4931      	ldr	r1, [pc, #196]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	492d      	ldr	r1, [pc, #180]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b0c:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4928      	ldr	r1, [pc, #160]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b1e:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <RCCEx_PLL3_Config+0x160>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	69d2      	ldr	r2, [r2, #28]
 8005b36:	00d2      	lsls	r2, r2, #3
 8005b38:	4920      	ldr	r1, [pc, #128]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b5c:	e00f      	b.n	8005b7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d106      	bne.n	8005b72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b70:	e005      	b.n	8005b7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8a:	f7fb fcf5 	bl	8001578 <HAL_GetTick>
 8005b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b90:	e008      	b.n	8005ba4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b92:	f7fb fcf1 	bl	8001578 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e006      	b.n	8005bb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	ffff0007 	.word	0xffff0007

08005bc4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e04d      	b.n	8005c72 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7a5b      	ldrb	r3, [r3, #9]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb f8ce 	bl	8000d88 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 0120 	bic.w	r1, r3, #32
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0204 	orr.w	r2, r2, #4
 8005c16:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d104      	bne.n	8005c30 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e020      	b.n	8005c72 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c30:	f7fb fca2 	bl	8001578 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c36:	e00e      	b.n	8005c56 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c38:	f7fb fc9e 	bl	8001578 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d907      	bls.n	8005c56 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e00d      	b.n	8005c72 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d0e9      	beq.n	8005c38 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e042      	b.n	8005d12 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb f894 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f82d 	bl	8005d1c <UART_SetConfig>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e022      	b.n	8005d12 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fdd1 	bl	800687c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ce8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fe58 	bl	80069c0 <UART_CheckIdleState>
 8005d10:	4603      	mov	r3, r0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d20:	b08e      	sub	sp, #56	; 0x38
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4bc1      	ldr	r3, [pc, #772]	; (800605c <UART_SetConfig+0x340>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4ab7      	ldr	r2, [pc, #732]	; (8006060 <UART_SetConfig+0x344>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	4bb2      	ldr	r3, [pc, #712]	; (8006064 <UART_SetConfig+0x348>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005da2:	430b      	orrs	r3, r1
 8005da4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	f023 010f 	bic.w	r1, r3, #15
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4aa9      	ldr	r2, [pc, #676]	; (8006068 <UART_SetConfig+0x34c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d177      	bne.n	8005eb6 <UART_SetConfig+0x19a>
 8005dc6:	4ba9      	ldr	r3, [pc, #676]	; (800606c <UART_SetConfig+0x350>)
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dce:	2b28      	cmp	r3, #40	; 0x28
 8005dd0:	d86c      	bhi.n	8005eac <UART_SetConfig+0x190>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0xbc>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e7d 	.word	0x08005e7d
 8005ddc:	08005ead 	.word	0x08005ead
 8005de0:	08005ead 	.word	0x08005ead
 8005de4:	08005ead 	.word	0x08005ead
 8005de8:	08005ead 	.word	0x08005ead
 8005dec:	08005ead 	.word	0x08005ead
 8005df0:	08005ead 	.word	0x08005ead
 8005df4:	08005ead 	.word	0x08005ead
 8005df8:	08005e85 	.word	0x08005e85
 8005dfc:	08005ead 	.word	0x08005ead
 8005e00:	08005ead 	.word	0x08005ead
 8005e04:	08005ead 	.word	0x08005ead
 8005e08:	08005ead 	.word	0x08005ead
 8005e0c:	08005ead 	.word	0x08005ead
 8005e10:	08005ead 	.word	0x08005ead
 8005e14:	08005ead 	.word	0x08005ead
 8005e18:	08005e8d 	.word	0x08005e8d
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ead 	.word	0x08005ead
 8005e24:	08005ead 	.word	0x08005ead
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005ead 	.word	0x08005ead
 8005e30:	08005ead 	.word	0x08005ead
 8005e34:	08005ead 	.word	0x08005ead
 8005e38:	08005e95 	.word	0x08005e95
 8005e3c:	08005ead 	.word	0x08005ead
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005ead 	.word	0x08005ead
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005ead 	.word	0x08005ead
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005e9d 	.word	0x08005e9d
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005ead 	.word	0x08005ead
 8005e68:	08005ead 	.word	0x08005ead
 8005e6c:	08005ead 	.word	0x08005ead
 8005e70:	08005ead 	.word	0x08005ead
 8005e74:	08005ead 	.word	0x08005ead
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e82:	e233      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8a:	e22f      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e22b      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e227      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e223      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e21f      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	bf00      	nop
 8005eb4:	e21a      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a6d      	ldr	r2, [pc, #436]	; (8006070 <UART_SetConfig+0x354>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d132      	bne.n	8005f26 <UART_SetConfig+0x20a>
 8005ec0:	4b6a      	ldr	r3, [pc, #424]	; (800606c <UART_SetConfig+0x350>)
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d827      	bhi.n	8005f1c <UART_SetConfig+0x200>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x1b8>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e1fb      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e1f7      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e1f3      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e1ef      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e1eb      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1a:	e1e7      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f22:	bf00      	nop
 8005f24:	e1e2      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a52      	ldr	r2, [pc, #328]	; (8006074 <UART_SetConfig+0x358>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d132      	bne.n	8005f96 <UART_SetConfig+0x27a>
 8005f30:	4b4e      	ldr	r3, [pc, #312]	; (800606c <UART_SetConfig+0x350>)
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d827      	bhi.n	8005f8c <UART_SetConfig+0x270>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x228>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f62:	e1c3      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f64:	2304      	movs	r3, #4
 8005f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6a:	e1bf      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f72:	e1bb      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f74:	2310      	movs	r3, #16
 8005f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7a:	e1b7      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e1b3      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f84:	2340      	movs	r3, #64	; 0x40
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	e1af      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f92:	bf00      	nop
 8005f94:	e1aa      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a37      	ldr	r2, [pc, #220]	; (8006078 <UART_SetConfig+0x35c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d132      	bne.n	8006006 <UART_SetConfig+0x2ea>
 8005fa0:	4b32      	ldr	r3, [pc, #200]	; (800606c <UART_SetConfig+0x350>)
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d827      	bhi.n	8005ffc <UART_SetConfig+0x2e0>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x298>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fdd 	.word	0x08005fdd
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e18b      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fda:	e187      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe2:	e183      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fea:	e17f      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005fec:	2320      	movs	r3, #32
 8005fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff2:	e17b      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffa:	e177      	b.n	80062ec <UART_SetConfig+0x5d0>
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006002:	bf00      	nop
 8006004:	e172      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <UART_SetConfig+0x360>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d144      	bne.n	800609a <UART_SetConfig+0x37e>
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <UART_SetConfig+0x350>)
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	2b05      	cmp	r3, #5
 800601a:	d839      	bhi.n	8006090 <UART_SetConfig+0x374>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <UART_SetConfig+0x308>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	0800603d 	.word	0x0800603d
 8006028:	08006045 	.word	0x08006045
 800602c:	0800604d 	.word	0x0800604d
 8006030:	08006055 	.word	0x08006055
 8006034:	08006081 	.word	0x08006081
 8006038:	08006089 	.word	0x08006089
 800603c:	2300      	movs	r3, #0
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e153      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604a:	e14f      	b.n	80062ec <UART_SetConfig+0x5d0>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006052:	e14b      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605a:	e147      	b.n	80062ec <UART_SetConfig+0x5d0>
 800605c:	cfff69f3 	.word	0xcfff69f3
 8006060:	58000c00 	.word	0x58000c00
 8006064:	11fff4ff 	.word	0x11fff4ff
 8006068:	40011000 	.word	0x40011000
 800606c:	58024400 	.word	0x58024400
 8006070:	40004400 	.word	0x40004400
 8006074:	40004800 	.word	0x40004800
 8006078:	40004c00 	.word	0x40004c00
 800607c:	40005000 	.word	0x40005000
 8006080:	2320      	movs	r3, #32
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e131      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e12d      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	bf00      	nop
 8006098:	e128      	b.n	80062ec <UART_SetConfig+0x5d0>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4ab6      	ldr	r2, [pc, #728]	; (8006378 <UART_SetConfig+0x65c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d178      	bne.n	8006196 <UART_SetConfig+0x47a>
 80060a4:	4bb5      	ldr	r3, [pc, #724]	; (800637c <UART_SetConfig+0x660>)
 80060a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ac:	2b28      	cmp	r3, #40	; 0x28
 80060ae:	d86d      	bhi.n	800618c <UART_SetConfig+0x470>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0x39c>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	0800615d 	.word	0x0800615d
 80060bc:	0800618d 	.word	0x0800618d
 80060c0:	0800618d 	.word	0x0800618d
 80060c4:	0800618d 	.word	0x0800618d
 80060c8:	0800618d 	.word	0x0800618d
 80060cc:	0800618d 	.word	0x0800618d
 80060d0:	0800618d 	.word	0x0800618d
 80060d4:	0800618d 	.word	0x0800618d
 80060d8:	08006165 	.word	0x08006165
 80060dc:	0800618d 	.word	0x0800618d
 80060e0:	0800618d 	.word	0x0800618d
 80060e4:	0800618d 	.word	0x0800618d
 80060e8:	0800618d 	.word	0x0800618d
 80060ec:	0800618d 	.word	0x0800618d
 80060f0:	0800618d 	.word	0x0800618d
 80060f4:	0800618d 	.word	0x0800618d
 80060f8:	0800616d 	.word	0x0800616d
 80060fc:	0800618d 	.word	0x0800618d
 8006100:	0800618d 	.word	0x0800618d
 8006104:	0800618d 	.word	0x0800618d
 8006108:	0800618d 	.word	0x0800618d
 800610c:	0800618d 	.word	0x0800618d
 8006110:	0800618d 	.word	0x0800618d
 8006114:	0800618d 	.word	0x0800618d
 8006118:	08006175 	.word	0x08006175
 800611c:	0800618d 	.word	0x0800618d
 8006120:	0800618d 	.word	0x0800618d
 8006124:	0800618d 	.word	0x0800618d
 8006128:	0800618d 	.word	0x0800618d
 800612c:	0800618d 	.word	0x0800618d
 8006130:	0800618d 	.word	0x0800618d
 8006134:	0800618d 	.word	0x0800618d
 8006138:	0800617d 	.word	0x0800617d
 800613c:	0800618d 	.word	0x0800618d
 8006140:	0800618d 	.word	0x0800618d
 8006144:	0800618d 	.word	0x0800618d
 8006148:	0800618d 	.word	0x0800618d
 800614c:	0800618d 	.word	0x0800618d
 8006150:	0800618d 	.word	0x0800618d
 8006154:	0800618d 	.word	0x0800618d
 8006158:	08006185 	.word	0x08006185
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006162:	e0c3      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616a:	e0bf      	b.n	80062ec <UART_SetConfig+0x5d0>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006172:	e0bb      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e0b7      	b.n	80062ec <UART_SetConfig+0x5d0>
 800617c:	2320      	movs	r3, #32
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e0b3      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e0af      	b.n	80062ec <UART_SetConfig+0x5d0>
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	bf00      	nop
 8006194:	e0aa      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	; (8006380 <UART_SetConfig+0x664>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d132      	bne.n	8006206 <UART_SetConfig+0x4ea>
 80061a0:	4b76      	ldr	r3, [pc, #472]	; (800637c <UART_SetConfig+0x660>)
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	2b05      	cmp	r3, #5
 80061aa:	d827      	bhi.n	80061fc <UART_SetConfig+0x4e0>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x498>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061cd 	.word	0x080061cd
 80061b8:	080061d5 	.word	0x080061d5
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d2:	e08b      	b.n	80062ec <UART_SetConfig+0x5d0>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061da:	e087      	b.n	80062ec <UART_SetConfig+0x5d0>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e083      	b.n	80062ec <UART_SetConfig+0x5d0>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e07f      	b.n	80062ec <UART_SetConfig+0x5d0>
 80061ec:	2320      	movs	r3, #32
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	e07b      	b.n	80062ec <UART_SetConfig+0x5d0>
 80061f4:	2340      	movs	r3, #64	; 0x40
 80061f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fa:	e077      	b.n	80062ec <UART_SetConfig+0x5d0>
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006202:	bf00      	nop
 8006204:	e072      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a5e      	ldr	r2, [pc, #376]	; (8006384 <UART_SetConfig+0x668>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d132      	bne.n	8006276 <UART_SetConfig+0x55a>
 8006210:	4b5a      	ldr	r3, [pc, #360]	; (800637c <UART_SetConfig+0x660>)
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	2b05      	cmp	r3, #5
 800621a:	d827      	bhi.n	800626c <UART_SetConfig+0x550>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x508>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	0800623d 	.word	0x0800623d
 8006228:	08006245 	.word	0x08006245
 800622c:	0800624d 	.word	0x0800624d
 8006230:	08006255 	.word	0x08006255
 8006234:	0800625d 	.word	0x0800625d
 8006238:	08006265 	.word	0x08006265
 800623c:	2300      	movs	r3, #0
 800623e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006242:	e053      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006244:	2304      	movs	r3, #4
 8006246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624a:	e04f      	b.n	80062ec <UART_SetConfig+0x5d0>
 800624c:	2308      	movs	r3, #8
 800624e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006252:	e04b      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006254:	2310      	movs	r3, #16
 8006256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625a:	e047      	b.n	80062ec <UART_SetConfig+0x5d0>
 800625c:	2320      	movs	r3, #32
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006262:	e043      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006264:	2340      	movs	r3, #64	; 0x40
 8006266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626a:	e03f      	b.n	80062ec <UART_SetConfig+0x5d0>
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006272:	bf00      	nop
 8006274:	e03a      	b.n	80062ec <UART_SetConfig+0x5d0>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a43      	ldr	r2, [pc, #268]	; (8006388 <UART_SetConfig+0x66c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d132      	bne.n	80062e6 <UART_SetConfig+0x5ca>
 8006280:	4b3e      	ldr	r3, [pc, #248]	; (800637c <UART_SetConfig+0x660>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	2b05      	cmp	r3, #5
 800628a:	d827      	bhi.n	80062dc <UART_SetConfig+0x5c0>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0x578>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062b5 	.word	0x080062b5
 800629c:	080062bd 	.word	0x080062bd
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	2302      	movs	r3, #2
 80062ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b2:	e01b      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ba:	e017      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c2:	e013      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ca:	e00f      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062cc:	2320      	movs	r3, #32
 80062ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d2:	e00b      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062d4:	2340      	movs	r3, #64	; 0x40
 80062d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062da:	e007      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <UART_SetConfig+0x5d0>
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <UART_SetConfig+0x66c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f040 80b8 	bne.w	8006468 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d019      	beq.n	8006334 <UART_SetConfig+0x618>
 8006300:	2b08      	cmp	r3, #8
 8006302:	dc04      	bgt.n	800630e <UART_SetConfig+0x5f2>
 8006304:	2b02      	cmp	r3, #2
 8006306:	d009      	beq.n	800631c <UART_SetConfig+0x600>
 8006308:	2b04      	cmp	r3, #4
 800630a:	d00b      	beq.n	8006324 <UART_SetConfig+0x608>
 800630c:	e042      	b.n	8006394 <UART_SetConfig+0x678>
 800630e:	2b20      	cmp	r3, #32
 8006310:	d02b      	beq.n	800636a <UART_SetConfig+0x64e>
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d02c      	beq.n	8006370 <UART_SetConfig+0x654>
 8006316:	2b10      	cmp	r3, #16
 8006318:	d014      	beq.n	8006344 <UART_SetConfig+0x628>
 800631a:	e03b      	b.n	8006394 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800631c:	f7ff f840 	bl	80053a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006320:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006322:	e03d      	b.n	80063a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff f84f 	bl	80053cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006332:	e035      	b.n	80063a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006334:	f107 0308 	add.w	r3, r7, #8
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f993 	bl	8005664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006342:	e02d      	b.n	80063a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006344:	4b0d      	ldr	r3, [pc, #52]	; (800637c <UART_SetConfig+0x660>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <UART_SetConfig+0x660>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	08db      	lsrs	r3, r3, #3
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	4a0c      	ldr	r2, [pc, #48]	; (800638c <UART_SetConfig+0x670>)
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006362:	e01d      	b.n	80063a0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <UART_SetConfig+0x670>)
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006368:	e01a      	b.n	80063a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <UART_SetConfig+0x674>)
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800636e:	e017      	b.n	80063a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006376:	e013      	b.n	80063a0 <UART_SetConfig+0x684>
 8006378:	40011400 	.word	0x40011400
 800637c:	58024400 	.word	0x58024400
 8006380:	40007800 	.word	0x40007800
 8006384:	40007c00 	.word	0x40007c00
 8006388:	58000c00 	.word	0x58000c00
 800638c:	03d09000 	.word	0x03d09000
 8006390:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800639e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 824d 	beq.w	8006842 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	4aad      	ldr	r2, [pc, #692]	; (8006664 <UART_SetConfig+0x948>)
 80063ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ba:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	4413      	add	r3, r2
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d305      	bcc.n	80063d8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d903      	bls.n	80063e0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063de:	e230      	b.n	8006842 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	4618      	mov	r0, r3
 80063e4:	f04f 0100 	mov.w	r1, #0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	4a9d      	ldr	r2, [pc, #628]	; (8006664 <UART_SetConfig+0x948>)
 80063ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f04f 0400 	mov.w	r4, #0
 80063f8:	461a      	mov	r2, r3
 80063fa:	4623      	mov	r3, r4
 80063fc:	f7f9 ffc8 	bl	8000390 <__aeabi_uldivmod>
 8006400:	4603      	mov	r3, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4619      	mov	r1, r3
 8006406:	4622      	mov	r2, r4
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	f04f 0400 	mov.w	r4, #0
 8006410:	0214      	lsls	r4, r2, #8
 8006412:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006416:	020b      	lsls	r3, r1, #8
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	0852      	lsrs	r2, r2, #1
 800641e:	4611      	mov	r1, r2
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	eb13 0b01 	adds.w	fp, r3, r1
 8006428:	eb44 0c02 	adc.w	ip, r4, r2
 800642c:	4658      	mov	r0, fp
 800642e:	4661      	mov	r1, ip
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	461a      	mov	r2, r3
 800643a:	4623      	mov	r3, r4
 800643c:	f7f9 ffa8 	bl	8000390 <__aeabi_uldivmod>
 8006440:	4603      	mov	r3, r0
 8006442:	460c      	mov	r4, r1
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644c:	d308      	bcc.n	8006460 <UART_SetConfig+0x744>
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006454:	d204      	bcs.n	8006460 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	e1f0      	b.n	8006842 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006466:	e1ec      	b.n	8006842 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006470:	f040 8100 	bne.w	8006674 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	f200 80b7 	bhi.w	80065ec <UART_SetConfig+0x8d0>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x768>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	08006589 	.word	0x08006589
 8006488:	08006591 	.word	0x08006591
 800648c:	080065ed 	.word	0x080065ed
 8006490:	080065ed 	.word	0x080065ed
 8006494:	08006599 	.word	0x08006599
 8006498:	080065ed 	.word	0x080065ed
 800649c:	080065ed 	.word	0x080065ed
 80064a0:	080065ed 	.word	0x080065ed
 80064a4:	080065a9 	.word	0x080065a9
 80064a8:	080065ed 	.word	0x080065ed
 80064ac:	080065ed 	.word	0x080065ed
 80064b0:	080065ed 	.word	0x080065ed
 80064b4:	080065ed 	.word	0x080065ed
 80064b8:	080065ed 	.word	0x080065ed
 80064bc:	080065ed 	.word	0x080065ed
 80064c0:	080065ed 	.word	0x080065ed
 80064c4:	080065b9 	.word	0x080065b9
 80064c8:	080065ed 	.word	0x080065ed
 80064cc:	080065ed 	.word	0x080065ed
 80064d0:	080065ed 	.word	0x080065ed
 80064d4:	080065ed 	.word	0x080065ed
 80064d8:	080065ed 	.word	0x080065ed
 80064dc:	080065ed 	.word	0x080065ed
 80064e0:	080065ed 	.word	0x080065ed
 80064e4:	080065ed 	.word	0x080065ed
 80064e8:	080065ed 	.word	0x080065ed
 80064ec:	080065ed 	.word	0x080065ed
 80064f0:	080065ed 	.word	0x080065ed
 80064f4:	080065ed 	.word	0x080065ed
 80064f8:	080065ed 	.word	0x080065ed
 80064fc:	080065ed 	.word	0x080065ed
 8006500:	080065ed 	.word	0x080065ed
 8006504:	080065df 	.word	0x080065df
 8006508:	080065ed 	.word	0x080065ed
 800650c:	080065ed 	.word	0x080065ed
 8006510:	080065ed 	.word	0x080065ed
 8006514:	080065ed 	.word	0x080065ed
 8006518:	080065ed 	.word	0x080065ed
 800651c:	080065ed 	.word	0x080065ed
 8006520:	080065ed 	.word	0x080065ed
 8006524:	080065ed 	.word	0x080065ed
 8006528:	080065ed 	.word	0x080065ed
 800652c:	080065ed 	.word	0x080065ed
 8006530:	080065ed 	.word	0x080065ed
 8006534:	080065ed 	.word	0x080065ed
 8006538:	080065ed 	.word	0x080065ed
 800653c:	080065ed 	.word	0x080065ed
 8006540:	080065ed 	.word	0x080065ed
 8006544:	080065ed 	.word	0x080065ed
 8006548:	080065ed 	.word	0x080065ed
 800654c:	080065ed 	.word	0x080065ed
 8006550:	080065ed 	.word	0x080065ed
 8006554:	080065ed 	.word	0x080065ed
 8006558:	080065ed 	.word	0x080065ed
 800655c:	080065ed 	.word	0x080065ed
 8006560:	080065ed 	.word	0x080065ed
 8006564:	080065ed 	.word	0x080065ed
 8006568:	080065ed 	.word	0x080065ed
 800656c:	080065ed 	.word	0x080065ed
 8006570:	080065ed 	.word	0x080065ed
 8006574:	080065ed 	.word	0x080065ed
 8006578:	080065ed 	.word	0x080065ed
 800657c:	080065ed 	.word	0x080065ed
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080065e5 	.word	0x080065e5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fd fff0 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 800658c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800658e:	e033      	b.n	80065f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe f802 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8006594:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006596:	e02f      	b.n	80065f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006598:	f107 0314 	add.w	r3, r7, #20
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe ff15 	bl	80053cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a6:	e027      	b.n	80065f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a8:	f107 0308 	add.w	r3, r7, #8
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f859 	bl	8005664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065b6:	e01f      	b.n	80065f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b8:	4b2b      	ldr	r3, [pc, #172]	; (8006668 <UART_SetConfig+0x94c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065c4:	4b28      	ldr	r3, [pc, #160]	; (8006668 <UART_SetConfig+0x94c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	08db      	lsrs	r3, r3, #3
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	4a27      	ldr	r2, [pc, #156]	; (800666c <UART_SetConfig+0x950>)
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065d6:	e00f      	b.n	80065f8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <UART_SetConfig+0x950>)
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065dc:	e00c      	b.n	80065f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <UART_SetConfig+0x954>)
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e2:	e009      	b.n	80065f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065ea:	e005      	b.n	80065f8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80065f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8121 	beq.w	8006842 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <UART_SetConfig+0x948>)
 8006606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800660a:	461a      	mov	r2, r3
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006612:	005a      	lsls	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	441a      	add	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	b29b      	uxth	r3, r3
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d916      	bls.n	800665c <UART_SetConfig+0x940>
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d212      	bcs.n	800665c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	b29b      	uxth	r3, r3
 800663a:	f023 030f 	bic.w	r3, r3, #15
 800663e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	b29b      	uxth	r3, r3
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	b29a      	uxth	r2, r3
 800664c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800664e:	4313      	orrs	r3, r2
 8006650:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	e0f2      	b.n	8006842 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006662:	e0ee      	b.n	8006842 <UART_SetConfig+0xb26>
 8006664:	08015580 	.word	0x08015580
 8006668:	58024400 	.word	0x58024400
 800666c:	03d09000 	.word	0x03d09000
 8006670:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	f200 80b7 	bhi.w	80067ec <UART_SetConfig+0xad0>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x968>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	08006789 	.word	0x08006789
 8006688:	08006791 	.word	0x08006791
 800668c:	080067ed 	.word	0x080067ed
 8006690:	080067ed 	.word	0x080067ed
 8006694:	08006799 	.word	0x08006799
 8006698:	080067ed 	.word	0x080067ed
 800669c:	080067ed 	.word	0x080067ed
 80066a0:	080067ed 	.word	0x080067ed
 80066a4:	080067a9 	.word	0x080067a9
 80066a8:	080067ed 	.word	0x080067ed
 80066ac:	080067ed 	.word	0x080067ed
 80066b0:	080067ed 	.word	0x080067ed
 80066b4:	080067ed 	.word	0x080067ed
 80066b8:	080067ed 	.word	0x080067ed
 80066bc:	080067ed 	.word	0x080067ed
 80066c0:	080067ed 	.word	0x080067ed
 80066c4:	080067b9 	.word	0x080067b9
 80066c8:	080067ed 	.word	0x080067ed
 80066cc:	080067ed 	.word	0x080067ed
 80066d0:	080067ed 	.word	0x080067ed
 80066d4:	080067ed 	.word	0x080067ed
 80066d8:	080067ed 	.word	0x080067ed
 80066dc:	080067ed 	.word	0x080067ed
 80066e0:	080067ed 	.word	0x080067ed
 80066e4:	080067ed 	.word	0x080067ed
 80066e8:	080067ed 	.word	0x080067ed
 80066ec:	080067ed 	.word	0x080067ed
 80066f0:	080067ed 	.word	0x080067ed
 80066f4:	080067ed 	.word	0x080067ed
 80066f8:	080067ed 	.word	0x080067ed
 80066fc:	080067ed 	.word	0x080067ed
 8006700:	080067ed 	.word	0x080067ed
 8006704:	080067df 	.word	0x080067df
 8006708:	080067ed 	.word	0x080067ed
 800670c:	080067ed 	.word	0x080067ed
 8006710:	080067ed 	.word	0x080067ed
 8006714:	080067ed 	.word	0x080067ed
 8006718:	080067ed 	.word	0x080067ed
 800671c:	080067ed 	.word	0x080067ed
 8006720:	080067ed 	.word	0x080067ed
 8006724:	080067ed 	.word	0x080067ed
 8006728:	080067ed 	.word	0x080067ed
 800672c:	080067ed 	.word	0x080067ed
 8006730:	080067ed 	.word	0x080067ed
 8006734:	080067ed 	.word	0x080067ed
 8006738:	080067ed 	.word	0x080067ed
 800673c:	080067ed 	.word	0x080067ed
 8006740:	080067ed 	.word	0x080067ed
 8006744:	080067ed 	.word	0x080067ed
 8006748:	080067ed 	.word	0x080067ed
 800674c:	080067ed 	.word	0x080067ed
 8006750:	080067ed 	.word	0x080067ed
 8006754:	080067ed 	.word	0x080067ed
 8006758:	080067ed 	.word	0x080067ed
 800675c:	080067ed 	.word	0x080067ed
 8006760:	080067ed 	.word	0x080067ed
 8006764:	080067ed 	.word	0x080067ed
 8006768:	080067ed 	.word	0x080067ed
 800676c:	080067ed 	.word	0x080067ed
 8006770:	080067ed 	.word	0x080067ed
 8006774:	080067ed 	.word	0x080067ed
 8006778:	080067ed 	.word	0x080067ed
 800677c:	080067ed 	.word	0x080067ed
 8006780:	080067ed 	.word	0x080067ed
 8006784:	080067e5 	.word	0x080067e5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006788:	f7fd fef0 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 800678c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800678e:	e033      	b.n	80067f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006790:	f7fd ff02 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8006794:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006796:	e02f      	b.n	80067f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fe15 	bl	80053cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a6:	e027      	b.n	80067f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a8:	f107 0308 	add.w	r3, r7, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe ff59 	bl	8005664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b6:	e01f      	b.n	80067f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b8:	4b2c      	ldr	r3, [pc, #176]	; (800686c <UART_SetConfig+0xb50>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067c4:	4b29      	ldr	r3, [pc, #164]	; (800686c <UART_SetConfig+0xb50>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	4a28      	ldr	r2, [pc, #160]	; (8006870 <UART_SetConfig+0xb54>)
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <UART_SetConfig+0xb54>)
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067dc:	e00c      	b.n	80067f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067de:	4b25      	ldr	r3, [pc, #148]	; (8006874 <UART_SetConfig+0xb58>)
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067e2:	e009      	b.n	80067f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ea:	e005      	b.n	80067f8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067f6:	bf00      	nop
    }

    if (pclk != 0U)
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d021      	beq.n	8006842 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <UART_SetConfig+0xb5c>)
 8006804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006808:	461a      	mov	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	441a      	add	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d908      	bls.n	800683c <UART_SetConfig+0xb20>
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006830:	d204      	bcs.n	800683c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	60da      	str	r2, [r3, #12]
 800683a:	e002      	b.n	8006842 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800685e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006862:	4618      	mov	r0, r3
 8006864:	3738      	adds	r7, #56	; 0x38
 8006866:	46bd      	mov	sp, r7
 8006868:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800686c:	58024400 	.word	0x58024400
 8006870:	03d09000 	.word	0x03d09000
 8006874:	003d0900 	.word	0x003d0900
 8006878:	08015580 	.word	0x08015580

0800687c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697a:	d10a      	bne.n	8006992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069d0:	f7fa fdd2 	bl	8001578 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10e      	bne.n	8006a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f82c 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e022      	b.n	8006a48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d10e      	bne.n	8006a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f816 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e00c      	b.n	8006a48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	e062      	b.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d05e      	beq.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6a:	f7fa fd85 	bl	8001578 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d302      	bcc.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11d      	bne.n	8006abc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e045      	b.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d02e      	beq.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad8:	d126      	bne.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0201 	bic.w	r2, r2, #1
 8006b02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e00f      	b.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69da      	ldr	r2, [r3, #28]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4013      	ands	r3, r2
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	bf0c      	ite	eq
 8006b38:	2301      	moveq	r3, #1
 8006b3a:	2300      	movne	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d08d      	beq.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e027      	b.n	8006bb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2224      	movs	r2, #36	; 0x24
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0201 	bic.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e02d      	b.n	8006c36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2224      	movs	r2, #36	; 0x24
 8006be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0201 	bic.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f850 	bl	8006cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e02d      	b.n	8006cb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2224      	movs	r2, #36	; 0x24
 8006c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f812 	bl	8006cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006cc4:	4a2f      	ldr	r2, [pc, #188]	; (8006d84 <UARTEx_SetNbDataToProcess+0xc8>)
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006cd2:	4a2d      	ldr	r2, [pc, #180]	; (8006d88 <UARTEx_SetNbDataToProcess+0xcc>)
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cdc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cf8:	e03d      	b.n	8006d76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cfa:	2310      	movs	r3, #16
 8006cfc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cfe:	2310      	movs	r3, #16
 8006d00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	0e5b      	lsrs	r3, r3, #25
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	0f5b      	lsrs	r3, r3, #29
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006d22:	7fbb      	ldrb	r3, [r7, #30]
 8006d24:	7f3a      	ldrb	r2, [r7, #28]
 8006d26:	f107 0120 	add.w	r1, r7, #32
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d30:	fb02 f303 	mul.w	r3, r2, r3
 8006d34:	7f3a      	ldrb	r2, [r7, #28]
 8006d36:	f107 0120 	add.w	r1, r7, #32
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006d4c:	7ffb      	ldrb	r3, [r7, #31]
 8006d4e:	7f7a      	ldrb	r2, [r7, #29]
 8006d50:	f107 0120 	add.w	r1, r7, #32
 8006d54:	440a      	add	r2, r1
 8006d56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d5a:	fb02 f303 	mul.w	r3, r2, r3
 8006d5e:	7f7a      	ldrb	r2, [r7, #29]
 8006d60:	f107 0120 	add.w	r1, r7, #32
 8006d64:	440a      	add	r2, r1
 8006d66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d76:	bf00      	nop
 8006d78:	3724      	adds	r7, #36	; 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	08012b80 	.word	0x08012b80
 8006d88:	08012b88 	.word	0x08012b88

08006d8c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8006d92:	4b8d      	ldr	r3, [pc, #564]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006d94:	22a9      	movs	r2, #169	; 0xa9
 8006d96:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8006d98:	4b8b      	ldr	r3, [pc, #556]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006d9a:	22fe      	movs	r2, #254	; 0xfe
 8006d9c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 24;
 8006d9e:	4b8a      	ldr	r3, [pc, #552]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006da0:	2218      	movs	r2, #24
 8006da2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 157;
 8006da4:	4b88      	ldr	r3, [pc, #544]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006da6:	229d      	movs	r2, #157	; 0x9d
 8006da8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006daa:	4b88      	ldr	r3, [pc, #544]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006dac:	22ff      	movs	r2, #255	; 0xff
 8006dae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006db0:	4b86      	ldr	r3, [pc, #536]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006db2:	22ff      	movs	r2, #255	; 0xff
 8006db4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006db6:	4b85      	ldr	r3, [pc, #532]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006dbc:	4b83      	ldr	r3, [pc, #524]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 8006dc2:	4b83      	ldr	r3, [pc, #524]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006dc4:	22a9      	movs	r2, #169	; 0xa9
 8006dc6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8006dc8:	4b81      	ldr	r3, [pc, #516]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006dca:	22fe      	movs	r2, #254	; 0xfe
 8006dcc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 24;
 8006dce:	4b80      	ldr	r3, [pc, #512]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006dd0:	2218      	movs	r2, #24
 8006dd2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006dd4:	4b7e      	ldr	r3, [pc, #504]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006dda:	f000 fdf9 	bl	80079d0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006dde:	4b7a      	ldr	r3, [pc, #488]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	061a      	lsls	r2, r3, #24
 8006de4:	4b78      	ldr	r3, [pc, #480]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	431a      	orrs	r2, r3
 8006dec:	4b76      	ldr	r3, [pc, #472]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006dee:	789b      	ldrb	r3, [r3, #2]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	4313      	orrs	r3, r2
 8006df4:	4a74      	ldr	r2, [pc, #464]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006df6:	78d2      	ldrb	r2, [r2, #3]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	061a      	lsls	r2, r3, #24
 8006dfc:	4b72      	ldr	r3, [pc, #456]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	0619      	lsls	r1, r3, #24
 8006e02:	4b71      	ldr	r3, [pc, #452]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	4319      	orrs	r1, r3
 8006e0a:	4b6f      	ldr	r3, [pc, #444]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e0c:	789b      	ldrb	r3, [r3, #2]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	430b      	orrs	r3, r1
 8006e12:	496d      	ldr	r1, [pc, #436]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e14:	78c9      	ldrb	r1, [r1, #3]
 8006e16:	430b      	orrs	r3, r1
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	4b69      	ldr	r3, [pc, #420]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	0619      	lsls	r1, r3, #24
 8006e26:	4b68      	ldr	r3, [pc, #416]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	4319      	orrs	r1, r3
 8006e2e:	4b66      	ldr	r3, [pc, #408]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e30:	789b      	ldrb	r3, [r3, #2]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	430b      	orrs	r3, r1
 8006e36:	4964      	ldr	r1, [pc, #400]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e38:	78c9      	ldrb	r1, [r1, #3]
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e42:	431a      	orrs	r2, r3
 8006e44:	4b60      	ldr	r3, [pc, #384]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	0619      	lsls	r1, r3, #24
 8006e4a:	4b5f      	ldr	r3, [pc, #380]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	4319      	orrs	r1, r3
 8006e52:	4b5d      	ldr	r3, [pc, #372]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e54:	789b      	ldrb	r3, [r3, #2]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	495b      	ldr	r1, [pc, #364]	; (8006fc8 <MX_LWIP_Init+0x23c>)
 8006e5c:	78c9      	ldrb	r1, [r1, #3]
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	0e1b      	lsrs	r3, r3, #24
 8006e62:	4313      	orrs	r3, r2
 8006e64:	4a5b      	ldr	r2, [pc, #364]	; (8006fd4 <MX_LWIP_Init+0x248>)
 8006e66:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006e68:	4b58      	ldr	r3, [pc, #352]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	061a      	lsls	r2, r3, #24
 8006e6e:	4b57      	ldr	r3, [pc, #348]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	431a      	orrs	r2, r3
 8006e76:	4b55      	ldr	r3, [pc, #340]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e78:	789b      	ldrb	r3, [r3, #2]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	4a53      	ldr	r2, [pc, #332]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e80:	78d2      	ldrb	r2, [r2, #3]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	061a      	lsls	r2, r3, #24
 8006e86:	4b51      	ldr	r3, [pc, #324]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	0619      	lsls	r1, r3, #24
 8006e8c:	4b4f      	ldr	r3, [pc, #316]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	4319      	orrs	r1, r3
 8006e94:	4b4d      	ldr	r3, [pc, #308]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e96:	789b      	ldrb	r3, [r3, #2]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	494b      	ldr	r1, [pc, #300]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006e9e:	78c9      	ldrb	r1, [r1, #3]
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	4b48      	ldr	r3, [pc, #288]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	0619      	lsls	r1, r3, #24
 8006eb0:	4b46      	ldr	r3, [pc, #280]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	4319      	orrs	r1, r3
 8006eb8:	4b44      	ldr	r3, [pc, #272]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006eba:	789b      	ldrb	r3, [r3, #2]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	4942      	ldr	r1, [pc, #264]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006ec2:	78c9      	ldrb	r1, [r1, #3]
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	4b3f      	ldr	r3, [pc, #252]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	0619      	lsls	r1, r3, #24
 8006ed4:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	4319      	orrs	r1, r3
 8006edc:	4b3b      	ldr	r3, [pc, #236]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006ede:	789b      	ldrb	r3, [r3, #2]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	4939      	ldr	r1, [pc, #228]	; (8006fcc <MX_LWIP_Init+0x240>)
 8006ee6:	78c9      	ldrb	r1, [r1, #3]
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	0e1b      	lsrs	r3, r3, #24
 8006eec:	4313      	orrs	r3, r2
 8006eee:	4a3a      	ldr	r2, [pc, #232]	; (8006fd8 <MX_LWIP_Init+0x24c>)
 8006ef0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006ef2:	4b37      	ldr	r3, [pc, #220]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	061a      	lsls	r2, r3, #24
 8006ef8:	4b35      	ldr	r3, [pc, #212]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	431a      	orrs	r2, r3
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f02:	789b      	ldrb	r3, [r3, #2]
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	4313      	orrs	r3, r2
 8006f08:	4a31      	ldr	r2, [pc, #196]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f0a:	78d2      	ldrb	r2, [r2, #3]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	061a      	lsls	r2, r3, #24
 8006f10:	4b2f      	ldr	r3, [pc, #188]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	0619      	lsls	r1, r3, #24
 8006f16:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	4319      	orrs	r1, r3
 8006f1e:	4b2c      	ldr	r3, [pc, #176]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f20:	789b      	ldrb	r3, [r3, #2]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	430b      	orrs	r3, r1
 8006f26:	492a      	ldr	r1, [pc, #168]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f28:	78c9      	ldrb	r1, [r1, #3]
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f32:	431a      	orrs	r2, r3
 8006f34:	4b26      	ldr	r3, [pc, #152]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	0619      	lsls	r1, r3, #24
 8006f3a:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	4319      	orrs	r1, r3
 8006f42:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f44:	789b      	ldrb	r3, [r3, #2]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	4921      	ldr	r1, [pc, #132]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f4c:	78c9      	ldrb	r1, [r1, #3]
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	0a1b      	lsrs	r3, r3, #8
 8006f52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f56:	431a      	orrs	r2, r3
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	0619      	lsls	r1, r3, #24
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	041b      	lsls	r3, r3, #16
 8006f64:	4319      	orrs	r1, r3
 8006f66:	4b1a      	ldr	r3, [pc, #104]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f68:	789b      	ldrb	r3, [r3, #2]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	4918      	ldr	r1, [pc, #96]	; (8006fd0 <MX_LWIP_Init+0x244>)
 8006f70:	78c9      	ldrb	r1, [r1, #3]
 8006f72:	430b      	orrs	r3, r1
 8006f74:	0e1b      	lsrs	r3, r3, #24
 8006f76:	4313      	orrs	r3, r2
 8006f78:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <MX_LWIP_Init+0x250>)
 8006f7a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006f7c:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <MX_LWIP_Init+0x254>)
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <MX_LWIP_Init+0x258>)
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <MX_LWIP_Init+0x250>)
 8006f8a:	4a13      	ldr	r2, [pc, #76]	; (8006fd8 <MX_LWIP_Init+0x24c>)
 8006f8c:	4911      	ldr	r1, [pc, #68]	; (8006fd4 <MX_LWIP_Init+0x248>)
 8006f8e:	4816      	ldr	r0, [pc, #88]	; (8006fe8 <MX_LWIP_Init+0x25c>)
 8006f90:	f001 fa16 	bl	80083c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006f94:	4814      	ldr	r0, [pc, #80]	; (8006fe8 <MX_LWIP_Init+0x25c>)
 8006f96:	f001 fbc5 	bl	8008724 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006f9a:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <MX_LWIP_Init+0x25c>)
 8006f9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006fa0:	089b      	lsrs	r3, r3, #2
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006fac:	480e      	ldr	r0, [pc, #56]	; (8006fe8 <MX_LWIP_Init+0x25c>)
 8006fae:	f001 fbc9 	bl	8008744 <netif_set_up>
 8006fb2:	e002      	b.n	8006fba <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006fb4:	480c      	ldr	r0, [pc, #48]	; (8006fe8 <MX_LWIP_Init+0x25c>)
 8006fb6:	f001 fc31 	bl	800881c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006fba:	490c      	ldr	r1, [pc, #48]	; (8006fec <MX_LWIP_Init+0x260>)
 8006fbc:	480a      	ldr	r0, [pc, #40]	; (8006fe8 <MX_LWIP_Init+0x25c>)
 8006fbe:	f001 fcc3 	bl	8008948 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006fc2:	bf00      	nop
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	24000384 	.word	0x24000384
 8006fcc:	24000380 	.word	0x24000380
 8006fd0:	24000340 	.word	0x24000340
 8006fd4:	24000378 	.word	0x24000378
 8006fd8:	24000388 	.word	0x24000388
 8006fdc:	2400038c 	.word	0x2400038c
 8006fe0:	08011ae9 	.word	0x08011ae9
 8006fe4:	080075cd 	.word	0x080075cd
 8006fe8:	24000344 	.word	0x24000344
 8006fec:	08007041 	.word	0x08007041

08006ff0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8006ff8:	f7fa fabe 	bl	8001578 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <Ethernet_Link_Periodic_Handle+0x30>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b63      	cmp	r3, #99	; 0x63
 8007006:	d907      	bls.n	8007018 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007008:	f7fa fab6 	bl	8001578 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	4b04      	ldr	r3, [pc, #16]	; (8007020 <Ethernet_Link_Periodic_Handle+0x30>)
 8007010:	601a      	str	r2, [r3, #0]
    ethernet_link_check_state(netif);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb6e 	bl	80076f4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	2400037c 	.word	0x2400037c

08007024 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007028:	4804      	ldr	r0, [pc, #16]	; (800703c <MX_LWIP_Process+0x18>)
 800702a:	f000 faaf 	bl	800758c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800702e:	f007 fd9b 	bl	800eb68 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007032:	4802      	ldr	r0, [pc, #8]	; (800703c <MX_LWIP_Process+0x18>)
 8007034:	f7ff ffdc 	bl	8006ff0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007038:	bf00      	nop
 800703a:	bd80      	pop	{r7, pc}
 800703c:	24000344 	.word	0x24000344

08007040 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <SCB_InvalidateDCache_by_Addr>:
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007066:	2320      	movs	r3, #32
 8007068:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800706a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800706e:	e00b      	b.n	8007088 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8007070:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <SCB_InvalidateDCache_by_Addr+0x50>)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	dcf0      	bgt.n	8007070 <SCB_InvalidateDCache_by_Addr+0x1c>
 800708e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007092:	f3bf 8f6f 	isb	sy
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	e000ed00 	.word	0xe000ed00

080070a8 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08e      	sub	sp, #56	; 0x38
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	605a      	str	r2, [r3, #4]
 80070ba:	609a      	str	r2, [r3, #8]
 80070bc:	60da      	str	r2, [r3, #12]
 80070be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a61      	ldr	r2, [pc, #388]	; (800724c <HAL_ETH_MspInit+0x1a4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	f040 80bb 	bne.w	8007242 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80070cc:	4b60      	ldr	r3, [pc, #384]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 80070ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070d2:	4a5f      	ldr	r2, [pc, #380]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 80070d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80070dc:	4b5c      	ldr	r3, [pc, #368]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 80070de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80070ea:	4b59      	ldr	r3, [pc, #356]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 80070ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070f0:	4a57      	ldr	r2, [pc, #348]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 80070f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80070fa:	4b55      	ldr	r3, [pc, #340]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 80070fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007108:	4b51      	ldr	r3, [pc, #324]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 800710a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800710e:	4a50      	ldr	r2, [pc, #320]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007114:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007118:	4b4d      	ldr	r3, [pc, #308]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 800711a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007126:	4b4a      	ldr	r3, [pc, #296]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800712c:	4a48      	ldr	r2, [pc, #288]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 800712e:	f043 0304 	orr.w	r3, r3, #4
 8007132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007136:	4b46      	ldr	r3, [pc, #280]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007144:	4b42      	ldr	r3, [pc, #264]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800714a:	4a41      	ldr	r2, [pc, #260]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007154:	4b3e      	ldr	r3, [pc, #248]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007162:	4b3b      	ldr	r3, [pc, #236]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007168:	4a39      	ldr	r2, [pc, #228]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 800716a:	f043 0302 	orr.w	r3, r3, #2
 800716e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007172:	4b37      	ldr	r3, [pc, #220]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007180:	4b33      	ldr	r3, [pc, #204]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007186:	4a32      	ldr	r2, [pc, #200]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007190:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <HAL_ETH_MspInit+0x1a8>)
 8007192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800719e:	2302      	movs	r3, #2
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a2:	2302      	movs	r3, #2
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071aa:	2300      	movs	r3, #0
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071ae:	230b      	movs	r3, #11
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b6:	4619      	mov	r1, r3
 80071b8:	4826      	ldr	r0, [pc, #152]	; (8007254 <HAL_ETH_MspInit+0x1ac>)
 80071ba:	f7fc f86b 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80071be:	2386      	movs	r3, #134	; 0x86
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071c2:	2302      	movs	r3, #2
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ca:	2303      	movs	r3, #3
 80071cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071ce:	230b      	movs	r3, #11
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d6:	4619      	mov	r1, r3
 80071d8:	481f      	ldr	r0, [pc, #124]	; (8007258 <HAL_ETH_MspInit+0x1b0>)
 80071da:	f7fc f85b 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80071de:	2330      	movs	r3, #48	; 0x30
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e2:	2302      	movs	r3, #2
 80071e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ea:	2303      	movs	r3, #3
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071ee:	230b      	movs	r3, #11
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f6:	4619      	mov	r1, r3
 80071f8:	4816      	ldr	r0, [pc, #88]	; (8007254 <HAL_ETH_MspInit+0x1ac>)
 80071fa:	f7fc f84b 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80071fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007204:	2302      	movs	r3, #2
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007208:	2300      	movs	r3, #0
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800720c:	2303      	movs	r3, #3
 800720e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007210:	230b      	movs	r3, #11
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007218:	4619      	mov	r1, r3
 800721a:	4810      	ldr	r0, [pc, #64]	; (800725c <HAL_ETH_MspInit+0x1b4>)
 800721c:	f7fc f83a 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007220:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007226:	2302      	movs	r3, #2
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722a:	2300      	movs	r3, #0
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722e:	2303      	movs	r3, #3
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007232:	230b      	movs	r3, #11
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723a:	4619      	mov	r1, r3
 800723c:	4808      	ldr	r0, [pc, #32]	; (8007260 <HAL_ETH_MspInit+0x1b8>)
 800723e:	f7fc f829 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007242:	bf00      	nop
 8007244:	3738      	adds	r7, #56	; 0x38
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40028000 	.word	0x40028000
 8007250:	58024400 	.word	0x58024400
 8007254:	58020800 	.word	0x58020800
 8007258:	58020000 	.word	0x58020000
 800725c:	58020400 	.word	0x58020400
 8007260:	58021800 	.word	0x58021800

08007264 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007274:	4b4a      	ldr	r3, [pc, #296]	; (80073a0 <low_level_init+0x13c>)
 8007276:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <low_level_init+0x140>)
 8007278:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800727a:	2300      	movs	r3, #0
 800727c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8007282:	23e1      	movs	r3, #225	; 0xe1
 8007284:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800728a:	2300      	movs	r3, #0
 800728c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800728e:	2300      	movs	r3, #0
 8007290:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8007292:	4a43      	ldr	r2, [pc, #268]	; (80073a0 <low_level_init+0x13c>)
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800729a:	4b41      	ldr	r3, [pc, #260]	; (80073a0 <low_level_init+0x13c>)
 800729c:	2201      	movs	r2, #1
 800729e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80072a0:	4b3f      	ldr	r3, [pc, #252]	; (80073a0 <low_level_init+0x13c>)
 80072a2:	4a41      	ldr	r2, [pc, #260]	; (80073a8 <low_level_init+0x144>)
 80072a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80072a6:	4b3e      	ldr	r3, [pc, #248]	; (80073a0 <low_level_init+0x13c>)
 80072a8:	4a40      	ldr	r2, [pc, #256]	; (80073ac <low_level_init+0x148>)
 80072aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80072ac:	4b3c      	ldr	r3, [pc, #240]	; (80073a0 <low_level_init+0x13c>)
 80072ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80072b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80072b4:	483a      	ldr	r0, [pc, #232]	; (80073a0 <low_level_init+0x13c>)
 80072b6:	f7fa fae7 	bl	8001888 <HAL_ETH_Init>
 80072ba:	4603      	mov	r3, r0
 80072bc:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80072be:	2234      	movs	r2, #52	; 0x34
 80072c0:	2100      	movs	r1, #0
 80072c2:	483b      	ldr	r0, [pc, #236]	; (80073b0 <low_level_init+0x14c>)
 80072c4:	f00a fd24 	bl	8011d10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80072c8:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <low_level_init+0x14c>)
 80072ca:	2221      	movs	r2, #33	; 0x21
 80072cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80072ce:	4b38      	ldr	r3, [pc, #224]	; (80073b0 <low_level_init+0x14c>)
 80072d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <low_level_init+0x14c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80072dc:	4835      	ldr	r0, [pc, #212]	; (80073b4 <low_level_init+0x150>)
 80072de:	f000 ff37 	bl	8008150 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2206      	movs	r2, #6
 80072e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80072ea:	4b2d      	ldr	r3, [pc, #180]	; (80073a0 <low_level_init+0x13c>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80072f6:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <low_level_init+0x13c>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	785a      	ldrb	r2, [r3, #1]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007302:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <low_level_init+0x13c>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	789a      	ldrb	r2, [r3, #2]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800730e:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <low_level_init+0x13c>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	78da      	ldrb	r2, [r3, #3]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800731a:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <low_level_init+0x13c>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	791a      	ldrb	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007326:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <low_level_init+0x13c>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	795a      	ldrb	r2, [r3, #5]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007338:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007340:	f043 030a 	orr.w	r3, r3, #10
 8007344:	b2da      	uxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	e00e      	b.n	8007370 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	025b      	lsls	r3, r3, #9
 800735c:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <low_level_init+0x154>)
 800735e:	441a      	add	r2, r3
 8007360:	2300      	movs	r3, #0
 8007362:	6979      	ldr	r1, [r7, #20]
 8007364:	480e      	ldr	r0, [pc, #56]	; (80073a0 <low_level_init+0x13c>)
 8007366:	f7fa fb69 	bl	8001a3c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	3301      	adds	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d9ed      	bls.n	8007352 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007376:	4911      	ldr	r1, [pc, #68]	; (80073bc <low_level_init+0x158>)
 8007378:	4811      	ldr	r0, [pc, #68]	; (80073c0 <low_level_init+0x15c>)
 800737a:	f7f9 ff16 	bl	80011aa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800737e:	4810      	ldr	r0, [pc, #64]	; (80073c0 <low_level_init+0x15c>)
 8007380:	f7f9 ff45 	bl	800120e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007384:	7cfb      	ldrb	r3, [r7, #19]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9b2 	bl	80076f4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007390:	e001      	b.n	8007396 <low_level_init+0x132>
    Error_Handler();
 8007392:	f7f9 fc3c 	bl	8000c0e <Error_Handler>
}
 8007396:	bf00      	nop
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	2400047c 	.word	0x2400047c
 80073a4:	40028000 	.word	0x40028000
 80073a8:	30040060 	.word	0x30040060
 80073ac:	30040000 	.word	0x30040000
 80073b0:	240004ec 	.word	0x240004ec
 80073b4:	08015598 	.word	0x08015598
 80073b8:	30040200 	.word	0x30040200
 80073bc:	24000010 	.word	0x24000010
 80073c0:	2400045c 	.word	0x2400045c

080073c4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b092      	sub	sp, #72	; 0x48
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	2230      	movs	r2, #48	; 0x30
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f00a fc95 	bl	8011d10 <memset>

  for(q = p; q != NULL; q = q->next)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ea:	e049      	b.n	8007480 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 80073ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d902      	bls.n	80073f8 <low_level_output+0x34>
      return ERR_IF;
 80073f2:	f06f 030b 	mvn.w	r3, #11
 80073f6:	e056      	b.n	80074a6 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80073f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fa:	6859      	ldr	r1, [r3, #4]
 80073fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073fe:	4613      	mov	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800740a:	4413      	add	r3, r2
 800740c:	3b3c      	subs	r3, #60	; 0x3c
 800740e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007412:	895b      	ldrh	r3, [r3, #10]
 8007414:	4619      	mov	r1, r3
 8007416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007424:	4413      	add	r3, r2
 8007426:	3b38      	subs	r3, #56	; 0x38
 8007428:	6019      	str	r1, [r3, #0]

    if(i>0)
 800742a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742c:	2b00      	cmp	r3, #0
 800742e:	d012      	beq.n	8007456 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007432:	1e5a      	subs	r2, r3, #1
 8007434:	f107 000c 	add.w	r0, r7, #12
 8007438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800743a:	460b      	mov	r3, r1
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	440b      	add	r3, r1
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	18c1      	adds	r1, r0, r3
 8007444:	4613      	mov	r3, r2
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007450:	4413      	add	r3, r2
 8007452:	3b34      	subs	r3, #52	; 0x34
 8007454:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800745e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007460:	4613      	mov	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800746c:	4413      	add	r3, r2
 800746e:	3b34      	subs	r3, #52	; 0x34
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007476:	3301      	adds	r3, #1
 8007478:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800747a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	643b      	str	r3, [r7, #64]	; 0x40
 8007480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1b2      	bne.n	80073ec <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	891b      	ldrh	r3, [r3, #8]
 800748a:	461a      	mov	r2, r3
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <low_level_output+0xec>)
 800748e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007490:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <low_level_output+0xec>)
 8007492:	f107 030c 	add.w	r3, r7, #12
 8007496:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007498:	2214      	movs	r2, #20
 800749a:	4905      	ldr	r1, [pc, #20]	; (80074b0 <low_level_output+0xec>)
 800749c:	4805      	ldr	r0, [pc, #20]	; (80074b4 <low_level_output+0xf0>)
 800749e:	f7fa fbba 	bl	8001c16 <HAL_ETH_Transmit>

  return errval;
 80074a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3748      	adds	r7, #72	; 0x48
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	240004ec 	.word	0x240004ec
 80074b4:	2400047c 	.word	0x2400047c

080074b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b094      	sub	sp, #80	; 0x50
 80074bc:	af02      	add	r7, sp, #8
 80074be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	643b      	str	r3, [r7, #64]	; 0x40
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	2300      	movs	r3, #0
 80074ca:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	2230      	movs	r2, #48	; 0x30
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f00a fc1b 	bl	8011d10 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80074da:	2300      	movs	r3, #0
 80074dc:	647b      	str	r3, [r7, #68]	; 0x44
 80074de:	e015      	b.n	800750c <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 80074e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	f107 010c 	add.w	r1, r7, #12
 80074e8:	4613      	mov	r3, r2
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4419      	add	r1, r3
 80074f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007500:	4413      	add	r3, r2
 8007502:	3b34      	subs	r3, #52	; 0x34
 8007504:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8007506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007508:	3301      	adds	r3, #1
 800750a:	647b      	str	r3, [r7, #68]	; 0x44
 800750c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800750e:	2b02      	cmp	r3, #2
 8007510:	d9e6      	bls.n	80074e0 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 8007512:	481b      	ldr	r0, [pc, #108]	; (8007580 <low_level_input+0xc8>)
 8007514:	f7fa fc08 	bl	8001d28 <HAL_ETH_IsRxDataAvailable>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d02a      	beq.n	8007574 <low_level_input+0xbc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	4619      	mov	r1, r3
 8007524:	4816      	ldr	r0, [pc, #88]	; (8007580 <low_level_input+0xc8>)
 8007526:	f7fa fcef 	bl	8001f08 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4619      	mov	r1, r3
 8007530:	4813      	ldr	r0, [pc, #76]	; (8007580 <low_level_input+0xc8>)
 8007532:	f7fa fd87 	bl	8002044 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8007536:	4812      	ldr	r0, [pc, #72]	; (8007580 <low_level_input+0xc8>)
 8007538:	f7fa fdb7 	bl	80020aa <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fd86 	bl	8007054 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007548:	480e      	ldr	r0, [pc, #56]	; (8007584 <low_level_input+0xcc>)
 800754a:	f000 fe75 	bl	8008238 <memp_malloc_pool>
 800754e:	63f8      	str	r0, [r7, #60]	; 0x3c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8007550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007552:	4a0d      	ldr	r2, [pc, #52]	; (8007588 <low_level_input+0xd0>)
 8007554:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	b299      	uxth	r1, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	b292      	uxth	r2, r2
 8007560:	9201      	str	r2, [sp, #4]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	2241      	movs	r2, #65	; 0x41
 8007568:	2000      	movs	r0, #0
 800756a:	f001 fbaf 	bl	8008ccc <pbuf_alloced_custom>
 800756e:	6438      	str	r0, [r7, #64]	; 0x40

    return p;
 8007570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007572:	e000      	b.n	8007576 <low_level_input+0xbe>
  }
  else
  {
    return NULL;
 8007574:	2300      	movs	r3, #0
  }
}
 8007576:	4618      	mov	r0, r3
 8007578:	3748      	adds	r7, #72	; 0x48
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2400047c 	.word	0x2400047c
 8007584:	08015598 	.word	0x08015598
 8007588:	08007629 	.word	0x08007629

0800758c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff ff8f 	bl	80074b8 <low_level_input>
 800759a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d010      	beq.n	80075c4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	4798      	blx	r3
 80075ac:	4603      	mov	r3, r0
 80075ae:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80075b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f001 fd41 	bl	8009040 <pbuf_free>
    p = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e000      	b.n	80075c6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80075c4:	bf00      	nop
  }

}
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <ethernetif_init+0x1c>
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <ethernetif_init+0x48>)
 80075dc:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 80075e0:	490d      	ldr	r1, [pc, #52]	; (8007618 <ethernetif_init+0x4c>)
 80075e2:	480e      	ldr	r0, [pc, #56]	; (800761c <ethernetif_init+0x50>)
 80075e4:	f00a fb9c 	bl	8011d20 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2273      	movs	r2, #115	; 0x73
 80075ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2274      	movs	r2, #116	; 0x74
 80075f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a09      	ldr	r2, [pc, #36]	; (8007620 <ethernetif_init+0x54>)
 80075fc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a08      	ldr	r2, [pc, #32]	; (8007624 <ethernetif_init+0x58>)
 8007602:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fe2d 	bl	8007264 <low_level_init>

  return ERR_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	08012b90 	.word	0x08012b90
 8007618:	08012bac 	.word	0x08012bac
 800761c:	08012bbc 	.word	0x08012bbc
 8007620:	0800ff6d 	.word	0x0800ff6d
 8007624:	080073c5 	.word	0x080073c5

08007628 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	4803      	ldr	r0, [pc, #12]	; (8007644 <pbuf_free_custom+0x1c>)
 8007638:	f000 fe6c 	bl	8008314 <memp_free_pool>
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	08015598 	.word	0x08015598

08007648 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800764c:	f7f9 ff94 	bl	8001578 <HAL_GetTick>
 8007650:	4603      	mov	r3, r0
}
 8007652:	4618      	mov	r0, r3
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800765c:	4802      	ldr	r0, [pc, #8]	; (8007668 <ETH_PHY_IO_Init+0x10>)
 800765e:	f7fb f831 	bl	80026c4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd80      	pop	{r7, pc}
 8007668:	2400047c 	.word	0x2400047c

0800766c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
  return 0;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	4807      	ldr	r0, [pc, #28]	; (80076ac <ETH_PHY_IO_ReadReg+0x30>)
 8007690:	f7fa fd81 	bl	8002196 <HAL_ETH_ReadPHYRegister>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	e000      	b.n	80076a2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	2400047c 	.word	0x2400047c

080076b0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	4807      	ldr	r0, [pc, #28]	; (80076e0 <ETH_PHY_IO_WriteReg+0x30>)
 80076c4:	f7fa fdbc 	bl	8002240 <HAL_ETH_WritePHYRegister>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	e000      	b.n	80076d6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	2400047c 	.word	0x2400047c

080076e4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80076e8:	f7f9 ff46 	bl	8001578 <HAL_GetTick>
 80076ec:	4603      	mov	r3, r0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b0a0      	sub	sp, #128	; 0x80
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007700:	2300      	movs	r3, #0
 8007702:	67bb      	str	r3, [r7, #120]	; 0x78
 8007704:	2300      	movs	r3, #0
 8007706:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007708:	483a      	ldr	r0, [pc, #232]	; (80077f4 <ethernet_link_check_state+0x100>)
 800770a:	f7f9 fe28 	bl	800135e <LAN8742_GetLinkState>
 800770e:	4603      	mov	r3, r0
 8007710:	673b      	str	r3, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007718:	089b      	lsrs	r3, r3, #2
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <ethernet_link_check_state+0x4a>
 8007724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007726:	2b01      	cmp	r3, #1
 8007728:	d809      	bhi.n	800773e <ethernet_link_check_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 800772a:	4833      	ldr	r0, [pc, #204]	; (80077f8 <ethernet_link_check_state+0x104>)
 800772c:	f7fa fa23 	bl	8001b76 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f873 	bl	800881c <netif_set_down>
    netif_set_link_down(netif);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 f8d6 	bl	80088e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800773c:	e055      	b.n	80077ea <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d14e      	bne.n	80077ea <ethernet_link_check_state+0xf6>
 800774c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800774e:	2b01      	cmp	r3, #1
 8007750:	d94b      	bls.n	80077ea <ethernet_link_check_state+0xf6>
    switch (PHYLinkState)
 8007752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007754:	3b02      	subs	r3, #2
 8007756:	2b03      	cmp	r3, #3
 8007758:	d82a      	bhi.n	80077b0 <ethernet_link_check_state+0xbc>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <ethernet_link_check_state+0x6c>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007771 	.word	0x08007771
 8007764:	08007783 	.word	0x08007783
 8007768:	08007793 	.word	0x08007793
 800776c:	080077a3 	.word	0x080077a3
      duplex = ETH_FULLDUPLEX_MODE;
 8007770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007774:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800777a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800777c:	2301      	movs	r3, #1
 800777e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007780:	e017      	b.n	80077b2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8007782:	2300      	movs	r3, #0
 8007784:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800778a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800778c:	2301      	movs	r3, #1
 800778e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007790:	e00f      	b.n	80077b2 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 8007792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007796:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007798:	2300      	movs	r3, #0
 800779a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800779c:	2301      	movs	r3, #1
 800779e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80077a0:	e007      	b.n	80077b2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80077a6:	2300      	movs	r3, #0
 80077a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80077ae:	e000      	b.n	80077b2 <ethernet_link_check_state+0xbe>
      break;
 80077b0:	bf00      	nop
    if(linkchanged)
 80077b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d018      	beq.n	80077ea <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80077b8:	f107 030c 	add.w	r3, r7, #12
 80077bc:	4619      	mov	r1, r3
 80077be:	480e      	ldr	r0, [pc, #56]	; (80077f8 <ethernet_link_check_state+0x104>)
 80077c0:	f7fa fd92 	bl	80022e8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80077c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80077c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ca:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	4619      	mov	r1, r3
 80077d2:	4809      	ldr	r0, [pc, #36]	; (80077f8 <ethernet_link_check_state+0x104>)
 80077d4:	f7fa ff5c 	bl	8002690 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80077d8:	4807      	ldr	r0, [pc, #28]	; (80077f8 <ethernet_link_check_state+0x104>)
 80077da:	f7fa f970 	bl	8001abe <HAL_ETH_Start>
      netif_set_up(netif);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 ffb0 	bl	8008744 <netif_set_up>
      netif_set_link_up(netif);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f84b 	bl	8008880 <netif_set_link_up>
}
 80077ea:	bf00      	nop
 80077ec:	3780      	adds	r7, #128	; 0x80
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	2400045c 	.word	0x2400045c
 80077f8:	2400047c 	.word	0x2400047c

080077fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	b21a      	sxth	r2, r3
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	b21b      	sxth	r3, r3
 8007814:	4313      	orrs	r3, r2
 8007816:	b21b      	sxth	r3, r3
 8007818:	b29b      	uxth	r3, r3
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	061a      	lsls	r2, r3, #24
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	0e1b      	lsrs	r3, r3, #24
 800784a:	4313      	orrs	r3, r2
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8007858:	b480      	push	{r7}
 800785a:	b089      	sub	sp, #36	; 0x24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <lwip_standard_chksum+0x40>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd0a      	ble.n	8007898 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	1c53      	adds	r3, r2, #1
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	f107 030e 	add.w	r3, r7, #14
 800788c:	3301      	adds	r3, #1
 800788e:	7812      	ldrb	r2, [r2, #0]
 8007890:	701a      	strb	r2, [r3, #0]
    len--;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	3b01      	subs	r3, #1
 8007896:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800789c:	e00a      	b.n	80078b4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	1c9a      	adds	r2, r3, #2
 80078a2:	61ba      	str	r2, [r7, #24]
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
    len -= 2;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	3b02      	subs	r3, #2
 80078b2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	dcf1      	bgt.n	800789e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dd04      	ble.n	80078ca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80078c0:	f107 030e 	add.w	r3, r7, #14
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80078ca:	89fb      	ldrh	r3, [r7, #14]
 80078cc:	461a      	mov	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	0c1a      	lsrs	r2, r3, #16
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4413      	add	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	0c1a      	lsrs	r2, r3, #16
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	b29b      	uxth	r3, r3
}
 8007906:	4618      	mov	r0, r3
 8007908:	3724      	adds	r7, #36	; 0x24
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff98 	bl	8007858 <lwip_standard_chksum>
 8007928:	4603      	mov	r3, r0
 800792a:	43db      	mvns	r3, r3
 800792c:	b29b      	uxth	r3, r3
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e02b      	b.n	80079a4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	895b      	ldrh	r3, [r3, #10]
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f7ff ff7e 	bl	8007858 <lwip_standard_chksum>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	4413      	add	r3, r2
 8007964:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	0c1a      	lsrs	r2, r3, #16
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	b29b      	uxth	r3, r3
 800796e:	4413      	add	r3, r2
 8007970:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	895b      	ldrh	r3, [r3, #10]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	bf0c      	ite	eq
 8007986:	2301      	moveq	r3, #1
 8007988:	2300      	movne	r3, #0
 800798a:	b2db      	uxtb	r3, r3
 800798c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	021b      	lsls	r3, r3, #8
 8007992:	b29a      	uxth	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	b2db      	uxtb	r3, r3
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1d0      	bne.n	800794c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	43db      	mvns	r3, r3
 80079c6:	b29b      	uxth	r3, r3
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80079da:	f000 f8d9 	bl	8007b90 <mem_init>
  memp_init();
 80079de:	f000 fbe7 	bl	80081b0 <memp_init>
  pbuf_init();
  netif_init();
 80079e2:	f000 fce5 	bl	80083b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80079e6:	f007 f901 	bl	800ebec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80079ea:	f001 fe59 	bl	80096a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80079ee:	f007 f875 	bl	800eadc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <ptr_to_mem+0x20>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	4413      	add	r3, r2
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	240000bc 	.word	0x240000bc

08007a20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a05      	ldr	r2, [pc, #20]	; (8007a40 <mem_to_ptr+0x20>)
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	b29b      	uxth	r3, r3
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	240000bc 	.word	0x240000bc

08007a44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007a44:	b590      	push	{r4, r7, lr}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007a4c:	4b47      	ldr	r3, [pc, #284]	; (8007b6c <plug_holes+0x128>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d206      	bcs.n	8007a64 <plug_holes+0x20>
 8007a56:	4b46      	ldr	r3, [pc, #280]	; (8007b70 <plug_holes+0x12c>)
 8007a58:	f240 12df 	movw	r2, #479	; 0x1df
 8007a5c:	4945      	ldr	r1, [pc, #276]	; (8007b74 <plug_holes+0x130>)
 8007a5e:	4846      	ldr	r0, [pc, #280]	; (8007b78 <plug_holes+0x134>)
 8007a60:	f00a f95e 	bl	8011d20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007a64:	4b45      	ldr	r3, [pc, #276]	; (8007b7c <plug_holes+0x138>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d306      	bcc.n	8007a7c <plug_holes+0x38>
 8007a6e:	4b40      	ldr	r3, [pc, #256]	; (8007b70 <plug_holes+0x12c>)
 8007a70:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007a74:	4942      	ldr	r1, [pc, #264]	; (8007b80 <plug_holes+0x13c>)
 8007a76:	4840      	ldr	r0, [pc, #256]	; (8007b78 <plug_holes+0x134>)
 8007a78:	f00a f952 	bl	8011d20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <plug_holes+0x4e>
 8007a84:	4b3a      	ldr	r3, [pc, #232]	; (8007b70 <plug_holes+0x12c>)
 8007a86:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007a8a:	493e      	ldr	r1, [pc, #248]	; (8007b84 <plug_holes+0x140>)
 8007a8c:	483a      	ldr	r0, [pc, #232]	; (8007b78 <plug_holes+0x134>)
 8007a8e:	f00a f947 	bl	8011d20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d906      	bls.n	8007aac <plug_holes+0x68>
 8007a9e:	4b34      	ldr	r3, [pc, #208]	; (8007b70 <plug_holes+0x12c>)
 8007aa0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007aa4:	4938      	ldr	r1, [pc, #224]	; (8007b88 <plug_holes+0x144>)
 8007aa6:	4834      	ldr	r0, [pc, #208]	; (8007b78 <plug_holes+0x134>)
 8007aa8:	f00a f93a 	bl	8011d20 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff ffa3 	bl	80079fc <ptr_to_mem>
 8007ab6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d025      	beq.n	8007b0c <plug_holes+0xc8>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	791b      	ldrb	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d121      	bne.n	8007b0c <plug_holes+0xc8>
 8007ac8:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <plug_holes+0x138>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d01c      	beq.n	8007b0c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007ad2:	4b2e      	ldr	r3, [pc, #184]	; (8007b8c <plug_holes+0x148>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d102      	bne.n	8007ae2 <plug_holes+0x9e>
      lfree = mem;
 8007adc:	4a2b      	ldr	r2, [pc, #172]	; (8007b8c <plug_holes+0x148>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	881a      	ldrh	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00a      	beq.n	8007b0c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ff7e 	bl	80079fc <ptr_to_mem>
 8007b00:	4604      	mov	r4, r0
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff ff8c 	bl	8007a20 <mem_to_ptr>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff ff73 	bl	80079fc <ptr_to_mem>
 8007b16:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d020      	beq.n	8007b62 <plug_holes+0x11e>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	791b      	ldrb	r3, [r3, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11c      	bne.n	8007b62 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007b28:	4b18      	ldr	r3, [pc, #96]	; (8007b8c <plug_holes+0x148>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d102      	bne.n	8007b38 <plug_holes+0xf4>
      lfree = pmem;
 8007b32:	4a16      	ldr	r2, [pc, #88]	; (8007b8c <plug_holes+0x148>)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	881a      	ldrh	r2, [r3, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00a      	beq.n	8007b62 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff ff53 	bl	80079fc <ptr_to_mem>
 8007b56:	4604      	mov	r4, r0
 8007b58:	68b8      	ldr	r0, [r7, #8]
 8007b5a:	f7ff ff61 	bl	8007a20 <mem_to_ptr>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd90      	pop	{r4, r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	240000bc 	.word	0x240000bc
 8007b70:	08012be4 	.word	0x08012be4
 8007b74:	08012c14 	.word	0x08012c14
 8007b78:	08012c2c 	.word	0x08012c2c
 8007b7c:	240000c0 	.word	0x240000c0
 8007b80:	08012c54 	.word	0x08012c54
 8007b84:	08012c70 	.word	0x08012c70
 8007b88:	08012c8c 	.word	0x08012c8c
 8007b8c:	240000c4 	.word	0x240000c4

08007b90 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <mem_init+0x60>)
 8007b98:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <mem_init+0x64>)
 8007b9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007b9c:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <mem_init+0x60>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007ba8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007bb6:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8007bba:	f7ff ff1f 	bl	80079fc <ptr_to_mem>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <mem_init+0x68>)
 8007bc2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <mem_init+0x68>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <mem_init+0x68>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007bd4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007bd6:	4b08      	ldr	r3, [pc, #32]	; (8007bf8 <mem_init+0x68>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007bde:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007be0:	4b03      	ldr	r3, [pc, #12]	; (8007bf0 <mem_init+0x60>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a05      	ldr	r2, [pc, #20]	; (8007bfc <mem_init+0x6c>)
 8007be6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	240000bc 	.word	0x240000bc
 8007bf4:	30044000 	.word	0x30044000
 8007bf8:	240000c0 	.word	0x240000c0
 8007bfc:	240000c4 	.word	0x240000c4

08007c00 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff ff09 	bl	8007a20 <mem_to_ptr>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fef0 	bl	80079fc <ptr_to_mem>
 8007c1c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	885b      	ldrh	r3, [r3, #2]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff feea 	bl	80079fc <ptr_to_mem>
 8007c28:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d819      	bhi.n	8007c6a <mem_link_valid+0x6a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d813      	bhi.n	8007c6a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007c46:	8afa      	ldrh	r2, [r7, #22]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d004      	beq.n	8007c56 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	8afa      	ldrh	r2, [r7, #22]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d109      	bne.n	8007c6a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007c56:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <mem_link_valid+0x78>)
 8007c58:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d006      	beq.n	8007c6e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	885b      	ldrh	r3, [r3, #2]
 8007c64:	8afa      	ldrh	r2, [r7, #22]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d001      	beq.n	8007c6e <mem_link_valid+0x6e>
    return 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e000      	b.n	8007c70 <mem_link_valid+0x70>
  }
  return 1;
 8007c6e:	2301      	movs	r3, #1
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	240000c0 	.word	0x240000c0

08007c7c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04c      	beq.n	8007d24 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d007      	beq.n	8007ca4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007c94:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <mem_free+0xb0>)
 8007c96:	f240 2273 	movw	r2, #627	; 0x273
 8007c9a:	4925      	ldr	r1, [pc, #148]	; (8007d30 <mem_free+0xb4>)
 8007c9c:	4825      	ldr	r0, [pc, #148]	; (8007d34 <mem_free+0xb8>)
 8007c9e:	f00a f83f 	bl	8011d20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007ca2:	e040      	b.n	8007d26 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3b08      	subs	r3, #8
 8007ca8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007caa:	4b23      	ldr	r3, [pc, #140]	; (8007d38 <mem_free+0xbc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d306      	bcc.n	8007cc2 <mem_free+0x46>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f103 020c 	add.w	r2, r3, #12
 8007cba:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <mem_free+0xc0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d907      	bls.n	8007cd2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <mem_free+0xb0>)
 8007cc4:	f240 227f 	movw	r2, #639	; 0x27f
 8007cc8:	491d      	ldr	r1, [pc, #116]	; (8007d40 <mem_free+0xc4>)
 8007cca:	481a      	ldr	r0, [pc, #104]	; (8007d34 <mem_free+0xb8>)
 8007ccc:	f00a f828 	bl	8011d20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007cd0:	e029      	b.n	8007d26 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	791b      	ldrb	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d107      	bne.n	8007cea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <mem_free+0xb0>)
 8007cdc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007ce0:	4918      	ldr	r1, [pc, #96]	; (8007d44 <mem_free+0xc8>)
 8007ce2:	4814      	ldr	r0, [pc, #80]	; (8007d34 <mem_free+0xb8>)
 8007ce4:	f00a f81c 	bl	8011d20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007ce8:	e01d      	b.n	8007d26 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff ff88 	bl	8007c00 <mem_link_valid>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d107      	bne.n	8007d06 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <mem_free+0xb0>)
 8007cf8:	f240 2295 	movw	r2, #661	; 0x295
 8007cfc:	4912      	ldr	r1, [pc, #72]	; (8007d48 <mem_free+0xcc>)
 8007cfe:	480d      	ldr	r0, [pc, #52]	; (8007d34 <mem_free+0xb8>)
 8007d00:	f00a f80e 	bl	8011d20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007d04:	e00f      	b.n	8007d26 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <mem_free+0xd0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d202      	bcs.n	8007d1c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007d16:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <mem_free+0xd0>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fe91 	bl	8007a44 <plug_holes>
 8007d22:	e000      	b.n	8007d26 <mem_free+0xaa>
    return;
 8007d24:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	08012be4 	.word	0x08012be4
 8007d30:	08012cb8 	.word	0x08012cb8
 8007d34:	08012c2c 	.word	0x08012c2c
 8007d38:	240000bc 	.word	0x240000bc
 8007d3c:	240000c0 	.word	0x240000c0
 8007d40:	08012cdc 	.word	0x08012cdc
 8007d44:	08012cf8 	.word	0x08012cf8
 8007d48:	08012d20 	.word	0x08012d20
 8007d4c:	240000c4 	.word	0x240000c4

08007d50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007d5c:	887b      	ldrh	r3, [r7, #2]
 8007d5e:	3303      	adds	r3, #3
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007d68:	8bfb      	ldrh	r3, [r7, #30]
 8007d6a:	2b0b      	cmp	r3, #11
 8007d6c:	d801      	bhi.n	8007d72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007d6e:	230c      	movs	r3, #12
 8007d70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007d72:	8bfb      	ldrh	r3, [r7, #30]
 8007d74:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d803      	bhi.n	8007d84 <mem_trim+0x34>
 8007d7c:	8bfa      	ldrh	r2, [r7, #30]
 8007d7e:	887b      	ldrh	r3, [r7, #2]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d201      	bcs.n	8007d88 <mem_trim+0x38>
    return NULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e0d0      	b.n	8007f2a <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007d88:	4b6a      	ldr	r3, [pc, #424]	; (8007f34 <mem_trim+0x1e4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d304      	bcc.n	8007d9c <mem_trim+0x4c>
 8007d92:	4b69      	ldr	r3, [pc, #420]	; (8007f38 <mem_trim+0x1e8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d306      	bcc.n	8007daa <mem_trim+0x5a>
 8007d9c:	4b67      	ldr	r3, [pc, #412]	; (8007f3c <mem_trim+0x1ec>)
 8007d9e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007da2:	4967      	ldr	r1, [pc, #412]	; (8007f40 <mem_trim+0x1f0>)
 8007da4:	4867      	ldr	r0, [pc, #412]	; (8007f44 <mem_trim+0x1f4>)
 8007da6:	f009 ffbb 	bl	8011d20 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007daa:	4b62      	ldr	r3, [pc, #392]	; (8007f34 <mem_trim+0x1e4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d304      	bcc.n	8007dbe <mem_trim+0x6e>
 8007db4:	4b60      	ldr	r3, [pc, #384]	; (8007f38 <mem_trim+0x1e8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d301      	bcc.n	8007dc2 <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	e0b3      	b.n	8007f2a <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3b08      	subs	r3, #8
 8007dc6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007dc8:	69b8      	ldr	r0, [r7, #24]
 8007dca:	f7ff fe29 	bl	8007a20 <mem_to_ptr>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	8afb      	ldrh	r3, [r7, #22]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b08      	subs	r3, #8
 8007dde:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007de0:	8bfa      	ldrh	r2, [r7, #30]
 8007de2:	8abb      	ldrh	r3, [r7, #20]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d906      	bls.n	8007df6 <mem_trim+0xa6>
 8007de8:	4b54      	ldr	r3, [pc, #336]	; (8007f3c <mem_trim+0x1ec>)
 8007dea:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007dee:	4956      	ldr	r1, [pc, #344]	; (8007f48 <mem_trim+0x1f8>)
 8007df0:	4854      	ldr	r0, [pc, #336]	; (8007f44 <mem_trim+0x1f4>)
 8007df2:	f009 ff95 	bl	8011d20 <iprintf>
  if (newsize > size) {
 8007df6:	8bfa      	ldrh	r2, [r7, #30]
 8007df8:	8abb      	ldrh	r3, [r7, #20]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d901      	bls.n	8007e02 <mem_trim+0xb2>
    /* not supported */
    return NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e093      	b.n	8007f2a <mem_trim+0x1da>
  }
  if (newsize == size) {
 8007e02:	8bfa      	ldrh	r2, [r7, #30]
 8007e04:	8abb      	ldrh	r3, [r7, #20]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d101      	bne.n	8007e0e <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	e08d      	b.n	8007f2a <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fdf2 	bl	80079fc <ptr_to_mem>
 8007e18:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	791b      	ldrb	r3, [r3, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d141      	bne.n	8007ea6 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d106      	bne.n	8007e3c <mem_trim+0xec>
 8007e2e:	4b43      	ldr	r3, [pc, #268]	; (8007f3c <mem_trim+0x1ec>)
 8007e30:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007e34:	4945      	ldr	r1, [pc, #276]	; (8007f4c <mem_trim+0x1fc>)
 8007e36:	4843      	ldr	r0, [pc, #268]	; (8007f44 <mem_trim+0x1f4>)
 8007e38:	f009 ff72 	bl	8011d20 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e42:	8afa      	ldrh	r2, [r7, #22]
 8007e44:	8bfb      	ldrh	r3, [r7, #30]
 8007e46:	4413      	add	r3, r2
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007e4e:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <mem_trim+0x200>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d106      	bne.n	8007e66 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 8007e58:	89fb      	ldrh	r3, [r7, #14]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fdce 	bl	80079fc <ptr_to_mem>
 8007e60:	4602      	mov	r2, r0
 8007e62:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <mem_trim+0x200>)
 8007e64:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007e66:	89fb      	ldrh	r3, [r7, #14]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff fdc7 	bl	80079fc <ptr_to_mem>
 8007e6e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2200      	movs	r2, #0
 8007e74:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	89ba      	ldrh	r2, [r7, #12]
 8007e7a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	8afa      	ldrh	r2, [r7, #22]
 8007e80:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	89fa      	ldrh	r2, [r7, #14]
 8007e86:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d049      	beq.n	8007f28 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff fdaf 	bl	80079fc <ptr_to_mem>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	89fb      	ldrh	r3, [r7, #14]
 8007ea2:	8053      	strh	r3, [r2, #2]
 8007ea4:	e040      	b.n	8007f28 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007ea6:	8bfb      	ldrh	r3, [r7, #30]
 8007ea8:	f103 0214 	add.w	r2, r3, #20
 8007eac:	8abb      	ldrh	r3, [r7, #20]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d83a      	bhi.n	8007f28 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007eb2:	8afa      	ldrh	r2, [r7, #22]
 8007eb4:	8bfb      	ldrh	r3, [r7, #30]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3308      	adds	r3, #8
 8007ebc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d106      	bne.n	8007ed8 <mem_trim+0x188>
 8007eca:	4b1c      	ldr	r3, [pc, #112]	; (8007f3c <mem_trim+0x1ec>)
 8007ecc:	f240 3216 	movw	r2, #790	; 0x316
 8007ed0:	491e      	ldr	r1, [pc, #120]	; (8007f4c <mem_trim+0x1fc>)
 8007ed2:	481c      	ldr	r0, [pc, #112]	; (8007f44 <mem_trim+0x1f4>)
 8007ed4:	f009 ff24 	bl	8011d20 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fd8e 	bl	80079fc <ptr_to_mem>
 8007ee0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	; (8007f50 <mem_trim+0x200>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d202      	bcs.n	8007ef2 <mem_trim+0x1a2>
      lfree = mem2;
 8007eec:	4a18      	ldr	r2, [pc, #96]	; (8007f50 <mem_trim+0x200>)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	881a      	ldrh	r2, [r3, #0]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	8afa      	ldrh	r2, [r7, #22]
 8007f04:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	89fa      	ldrh	r2, [r7, #14]
 8007f0a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fd6d 	bl	80079fc <ptr_to_mem>
 8007f22:	4602      	mov	r2, r0
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007f28:	687b      	ldr	r3, [r7, #4]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	240000bc 	.word	0x240000bc
 8007f38:	240000c0 	.word	0x240000c0
 8007f3c:	08012be4 	.word	0x08012be4
 8007f40:	08012d54 	.word	0x08012d54
 8007f44:	08012c2c 	.word	0x08012c2c
 8007f48:	08012d6c 	.word	0x08012d6c
 8007f4c:	08012d8c 	.word	0x08012d8c
 8007f50:	240000c4 	.word	0x240000c4

08007f54 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007f5e:	88fb      	ldrh	r3, [r7, #6]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <mem_malloc+0x14>
    return NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	e0dd      	b.n	8008124 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	3303      	adds	r3, #3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007f74:	8bbb      	ldrh	r3, [r7, #28]
 8007f76:	2b0b      	cmp	r3, #11
 8007f78:	d801      	bhi.n	8007f7e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007f7e:	8bbb      	ldrh	r3, [r7, #28]
 8007f80:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d803      	bhi.n	8007f90 <mem_malloc+0x3c>
 8007f88:	8bba      	ldrh	r2, [r7, #28]
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d201      	bcs.n	8007f94 <mem_malloc+0x40>
    return NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e0c7      	b.n	8008124 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007f94:	4b65      	ldr	r3, [pc, #404]	; (800812c <mem_malloc+0x1d8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fd41 	bl	8007a20 <mem_to_ptr>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	83fb      	strh	r3, [r7, #30]
 8007fa2:	e0b6      	b.n	8008112 <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007fa4:	8bfb      	ldrh	r3, [r7, #30]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fd28 	bl	80079fc <ptr_to_mem>
 8007fac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	791b      	ldrb	r3, [r3, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 80a6 	bne.w	8008104 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	8bfb      	ldrh	r3, [r7, #30]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f1a3 0208 	sub.w	r2, r3, #8
 8007fc6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	f0c0 809b 	bcc.w	8008104 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	8bfb      	ldrh	r3, [r7, #30]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f1a3 0208 	sub.w	r2, r3, #8
 8007fdc:	8bbb      	ldrh	r3, [r7, #28]
 8007fde:	3314      	adds	r3, #20
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d335      	bcc.n	8008050 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007fe4:	8bfa      	ldrh	r2, [r7, #30]
 8007fe6:	8bbb      	ldrh	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3308      	adds	r3, #8
 8007fee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007ff0:	8a7b      	ldrh	r3, [r7, #18]
 8007ff2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d106      	bne.n	8008008 <mem_malloc+0xb4>
 8007ffa:	4b4d      	ldr	r3, [pc, #308]	; (8008130 <mem_malloc+0x1dc>)
 8007ffc:	f240 3287 	movw	r2, #903	; 0x387
 8008000:	494c      	ldr	r1, [pc, #304]	; (8008134 <mem_malloc+0x1e0>)
 8008002:	484d      	ldr	r0, [pc, #308]	; (8008138 <mem_malloc+0x1e4>)
 8008004:	f009 fe8c 	bl	8011d20 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008008:	8a7b      	ldrh	r3, [r7, #18]
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff fcf6 	bl	80079fc <ptr_to_mem>
 8008010:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	881a      	ldrh	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8bfa      	ldrh	r2, [r7, #30]
 8008024:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	8a7a      	ldrh	r2, [r7, #18]
 800802a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2201      	movs	r2, #1
 8008030:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800803a:	4293      	cmp	r3, r2
 800803c:	d00b      	beq.n	8008056 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fcda 	bl	80079fc <ptr_to_mem>
 8008048:	4602      	mov	r2, r0
 800804a:	8a7b      	ldrh	r3, [r7, #18]
 800804c:	8053      	strh	r3, [r2, #2]
 800804e:	e002      	b.n	8008056 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2201      	movs	r2, #1
 8008054:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008056:	4b35      	ldr	r3, [pc, #212]	; (800812c <mem_malloc+0x1d8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	429a      	cmp	r2, r3
 800805e:	d127      	bne.n	80080b0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008060:	4b32      	ldr	r3, [pc, #200]	; (800812c <mem_malloc+0x1d8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008066:	e005      	b.n	8008074 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff fcc5 	bl	80079fc <ptr_to_mem>
 8008072:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <mem_malloc+0x132>
 800807c:	4b2f      	ldr	r3, [pc, #188]	; (800813c <mem_malloc+0x1e8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	429a      	cmp	r2, r3
 8008084:	d1f0      	bne.n	8008068 <mem_malloc+0x114>
          }
          lfree = cur;
 8008086:	4a29      	ldr	r2, [pc, #164]	; (800812c <mem_malloc+0x1d8>)
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800808c:	4b27      	ldr	r3, [pc, #156]	; (800812c <mem_malloc+0x1d8>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b2a      	ldr	r3, [pc, #168]	; (800813c <mem_malloc+0x1e8>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d00b      	beq.n	80080b0 <mem_malloc+0x15c>
 8008098:	4b24      	ldr	r3, [pc, #144]	; (800812c <mem_malloc+0x1d8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <mem_malloc+0x15c>
 80080a2:	4b23      	ldr	r3, [pc, #140]	; (8008130 <mem_malloc+0x1dc>)
 80080a4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80080a8:	4925      	ldr	r1, [pc, #148]	; (8008140 <mem_malloc+0x1ec>)
 80080aa:	4823      	ldr	r0, [pc, #140]	; (8008138 <mem_malloc+0x1e4>)
 80080ac:	f009 fe38 	bl	8011d20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80080b0:	8bba      	ldrh	r2, [r7, #28]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	4413      	add	r3, r2
 80080b6:	3308      	adds	r3, #8
 80080b8:	4a20      	ldr	r2, [pc, #128]	; (800813c <mem_malloc+0x1e8>)
 80080ba:	6812      	ldr	r2, [r2, #0]
 80080bc:	4293      	cmp	r3, r2
 80080be:	d906      	bls.n	80080ce <mem_malloc+0x17a>
 80080c0:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <mem_malloc+0x1dc>)
 80080c2:	f240 32ba 	movw	r2, #954	; 0x3ba
 80080c6:	491f      	ldr	r1, [pc, #124]	; (8008144 <mem_malloc+0x1f0>)
 80080c8:	481b      	ldr	r0, [pc, #108]	; (8008138 <mem_malloc+0x1e4>)
 80080ca:	f009 fe29 	bl	8011d20 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f003 0303 	and.w	r3, r3, #3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d006      	beq.n	80080e6 <mem_malloc+0x192>
 80080d8:	4b15      	ldr	r3, [pc, #84]	; (8008130 <mem_malloc+0x1dc>)
 80080da:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80080de:	491a      	ldr	r1, [pc, #104]	; (8008148 <mem_malloc+0x1f4>)
 80080e0:	4815      	ldr	r0, [pc, #84]	; (8008138 <mem_malloc+0x1e4>)
 80080e2:	f009 fe1d 	bl	8011d20 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <mem_malloc+0x1aa>
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <mem_malloc+0x1dc>)
 80080f2:	f240 32be 	movw	r2, #958	; 0x3be
 80080f6:	4915      	ldr	r1, [pc, #84]	; (800814c <mem_malloc+0x1f8>)
 80080f8:	480f      	ldr	r0, [pc, #60]	; (8008138 <mem_malloc+0x1e4>)
 80080fa:	f009 fe11 	bl	8011d20 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	3308      	adds	r3, #8
 8008102:	e00f      	b.n	8008124 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 8008104:	8bfb      	ldrh	r3, [r7, #30]
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fc78 	bl	80079fc <ptr_to_mem>
 800810c:	4603      	mov	r3, r0
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008112:	8bfa      	ldrh	r2, [r7, #30]
 8008114:	8bb9      	ldrh	r1, [r7, #28]
 8008116:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800811a:	1a5b      	subs	r3, r3, r1
 800811c:	429a      	cmp	r2, r3
 800811e:	f4ff af41 	bcc.w	8007fa4 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3720      	adds	r7, #32
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	240000c4 	.word	0x240000c4
 8008130:	08012be4 	.word	0x08012be4
 8008134:	08012d8c 	.word	0x08012d8c
 8008138:	08012c2c 	.word	0x08012c2c
 800813c:	240000c0 	.word	0x240000c0
 8008140:	08012da0 	.word	0x08012da0
 8008144:	08012dbc 	.word	0x08012dbc
 8008148:	08012dec 	.word	0x08012dec
 800814c:	08012e1c 	.word	0x08012e1c

08008150 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	3303      	adds	r3, #3
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e011      	b.n	8008196 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	885b      	ldrh	r3, [r3, #2]
 800819a:	461a      	mov	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4293      	cmp	r3, r2
 80081a0:	dbe7      	blt.n	8008172 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80081b6:	2300      	movs	r3, #0
 80081b8:	80fb      	strh	r3, [r7, #6]
 80081ba:	e009      	b.n	80081d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	4a08      	ldr	r2, [pc, #32]	; (80081e0 <memp_init+0x30>)
 80081c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff ffc3 	bl	8008150 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	3301      	adds	r3, #1
 80081ce:	80fb      	strh	r3, [r7, #6]
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	d9f2      	bls.n	80081bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	08015610 	.word	0x08015610

080081e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d012      	beq.n	8008220 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d006      	beq.n	800821c <do_memp_malloc_pool+0x38>
 800820e:	4b07      	ldr	r3, [pc, #28]	; (800822c <do_memp_malloc_pool+0x48>)
 8008210:	f240 1219 	movw	r2, #281	; 0x119
 8008214:	4906      	ldr	r1, [pc, #24]	; (8008230 <do_memp_malloc_pool+0x4c>)
 8008216:	4807      	ldr	r0, [pc, #28]	; (8008234 <do_memp_malloc_pool+0x50>)
 8008218:	f009 fd82 	bl	8011d20 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	e000      	b.n	8008222 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	08012e40 	.word	0x08012e40
 8008230:	08012e70 	.word	0x08012e70
 8008234:	08012e94 	.word	0x08012e94

08008238 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <memp_malloc_pool+0x1c>
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <memp_malloc_pool+0x38>)
 8008248:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800824c:	4909      	ldr	r1, [pc, #36]	; (8008274 <memp_malloc_pool+0x3c>)
 800824e:	480a      	ldr	r0, [pc, #40]	; (8008278 <memp_malloc_pool+0x40>)
 8008250:	f009 fd66 	bl	8011d20 <iprintf>
  if (desc == NULL) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <memp_malloc_pool+0x26>
    return NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	e003      	b.n	8008266 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff ffc0 	bl	80081e4 <do_memp_malloc_pool>
 8008264:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	08012e40 	.word	0x08012e40
 8008274:	08012ebc 	.word	0x08012ebc
 8008278:	08012e94 	.word	0x08012e94

0800827c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d908      	bls.n	800829e <memp_malloc+0x22>
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <memp_malloc+0x3c>)
 800828e:	f240 1257 	movw	r2, #343	; 0x157
 8008292:	490a      	ldr	r1, [pc, #40]	; (80082bc <memp_malloc+0x40>)
 8008294:	480a      	ldr	r0, [pc, #40]	; (80082c0 <memp_malloc+0x44>)
 8008296:	f009 fd43 	bl	8011d20 <iprintf>
 800829a:	2300      	movs	r3, #0
 800829c:	e008      	b.n	80082b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <memp_malloc+0x48>)
 80082a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff ff9c 	bl	80081e4 <do_memp_malloc_pool>
 80082ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80082ae:	68fb      	ldr	r3, [r7, #12]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	08012e40 	.word	0x08012e40
 80082bc:	08012ed0 	.word	0x08012ed0
 80082c0:	08012e94 	.word	0x08012e94
 80082c4:	08015610 	.word	0x08015610

080082c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d006      	beq.n	80082ea <do_memp_free_pool+0x22>
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <do_memp_free_pool+0x40>)
 80082de:	f240 126d 	movw	r2, #365	; 0x16d
 80082e2:	490a      	ldr	r1, [pc, #40]	; (800830c <do_memp_free_pool+0x44>)
 80082e4:	480a      	ldr	r0, [pc, #40]	; (8008310 <do_memp_free_pool+0x48>)
 80082e6:	f009 fd1b 	bl	8011d20 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	08012e40 	.word	0x08012e40
 800830c:	08012ef0 	.word	0x08012ef0
 8008310:	08012e94 	.word	0x08012e94

08008314 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <memp_free_pool+0x1e>
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <memp_free_pool+0x3c>)
 8008326:	f240 1295 	movw	r2, #405	; 0x195
 800832a:	490a      	ldr	r1, [pc, #40]	; (8008354 <memp_free_pool+0x40>)
 800832c:	480a      	ldr	r0, [pc, #40]	; (8008358 <memp_free_pool+0x44>)
 800832e:	f009 fcf7 	bl	8011d20 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <memp_free_pool+0x34>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ffc1 	bl	80082c8 <do_memp_free_pool>
 8008346:	e000      	b.n	800834a <memp_free_pool+0x36>
    return;
 8008348:	bf00      	nop
}
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	08012e40 	.word	0x08012e40
 8008354:	08012ebc 	.word	0x08012ebc
 8008358:	08012e94 	.word	0x08012e94

0800835c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b08      	cmp	r3, #8
 800836c:	d907      	bls.n	800837e <memp_free+0x22>
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <memp_free+0x44>)
 8008370:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008374:	490b      	ldr	r1, [pc, #44]	; (80083a4 <memp_free+0x48>)
 8008376:	480c      	ldr	r0, [pc, #48]	; (80083a8 <memp_free+0x4c>)
 8008378:	f009 fcd2 	bl	8011d20 <iprintf>
 800837c:	e00c      	b.n	8008398 <memp_free+0x3c>

  if (mem == NULL) {
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	4a09      	ldr	r2, [pc, #36]	; (80083ac <memp_free+0x50>)
 8008388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff ff9a 	bl	80082c8 <do_memp_free_pool>
 8008394:	e000      	b.n	8008398 <memp_free+0x3c>
    return;
 8008396:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	08012e40 	.word	0x08012e40
 80083a4:	08012f10 	.word	0x08012f10
 80083a8:	08012e94 	.word	0x08012e94
 80083ac:	08015610 	.word	0x08015610

080083b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d108      	bne.n	80083e6 <netif_add+0x26>
 80083d4:	4b57      	ldr	r3, [pc, #348]	; (8008534 <netif_add+0x174>)
 80083d6:	f240 1227 	movw	r2, #295	; 0x127
 80083da:	4957      	ldr	r1, [pc, #348]	; (8008538 <netif_add+0x178>)
 80083dc:	4857      	ldr	r0, [pc, #348]	; (800853c <netif_add+0x17c>)
 80083de:	f009 fc9f 	bl	8011d20 <iprintf>
 80083e2:	2300      	movs	r3, #0
 80083e4:	e0a2      	b.n	800852c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d108      	bne.n	80083fe <netif_add+0x3e>
 80083ec:	4b51      	ldr	r3, [pc, #324]	; (8008534 <netif_add+0x174>)
 80083ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 80083f2:	4953      	ldr	r1, [pc, #332]	; (8008540 <netif_add+0x180>)
 80083f4:	4851      	ldr	r0, [pc, #324]	; (800853c <netif_add+0x17c>)
 80083f6:	f009 fc93 	bl	8011d20 <iprintf>
 80083fa:	2300      	movs	r3, #0
 80083fc:	e096      	b.n	800852c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008404:	4b4f      	ldr	r3, [pc, #316]	; (8008544 <netif_add+0x184>)
 8008406:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800840e:	4b4d      	ldr	r3, [pc, #308]	; (8008544 <netif_add+0x184>)
 8008410:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008418:	4b4a      	ldr	r3, [pc, #296]	; (8008544 <netif_add+0x184>)
 800841a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a45      	ldr	r2, [pc, #276]	; (8008548 <netif_add+0x188>)
 8008432:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a3a      	ldr	r2, [r7, #32]
 800844c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800844e:	4b3f      	ldr	r3, [pc, #252]	; (800854c <netif_add+0x18c>)
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f913 	bl	8008690 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	4798      	blx	r3
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <netif_add+0xba>
    return NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	e058      	b.n	800852c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008480:	2bff      	cmp	r3, #255	; 0xff
 8008482:	d103      	bne.n	800848c <netif_add+0xcc>
        netif->num = 0;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008490:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <netif_add+0x190>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e02b      	b.n	80084f0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	429a      	cmp	r2, r3
 800849e:	d106      	bne.n	80084ae <netif_add+0xee>
 80084a0:	4b24      	ldr	r3, [pc, #144]	; (8008534 <netif_add+0x174>)
 80084a2:	f240 128b 	movw	r2, #395	; 0x18b
 80084a6:	492b      	ldr	r1, [pc, #172]	; (8008554 <netif_add+0x194>)
 80084a8:	4824      	ldr	r0, [pc, #144]	; (800853c <netif_add+0x17c>)
 80084aa:	f009 fc39 	bl	8011d20 <iprintf>
        num_netifs++;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3301      	adds	r3, #1
 80084b2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2bff      	cmp	r3, #255	; 0xff
 80084b8:	dd06      	ble.n	80084c8 <netif_add+0x108>
 80084ba:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <netif_add+0x174>)
 80084bc:	f240 128d 	movw	r2, #397	; 0x18d
 80084c0:	4925      	ldr	r1, [pc, #148]	; (8008558 <netif_add+0x198>)
 80084c2:	481e      	ldr	r0, [pc, #120]	; (800853c <netif_add+0x17c>)
 80084c4:	f009 fc2c 	bl	8011d20 <iprintf>
        if (netif2->num == netif->num) {
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d108      	bne.n	80084ea <netif_add+0x12a>
          netif->num++;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084de:	3301      	adds	r3, #1
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80084e8:	e005      	b.n	80084f6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1d0      	bne.n	8008498 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1be      	bne.n	800847a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008502:	2bfe      	cmp	r3, #254	; 0xfe
 8008504:	d103      	bne.n	800850e <netif_add+0x14e>
    netif_num = 0;
 8008506:	4b11      	ldr	r3, [pc, #68]	; (800854c <netif_add+0x18c>)
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	e006      	b.n	800851c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008514:	3301      	adds	r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	4b0c      	ldr	r3, [pc, #48]	; (800854c <netif_add+0x18c>)
 800851a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <netif_add+0x190>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008524:	4a0a      	ldr	r2, [pc, #40]	; (8008550 <netif_add+0x190>)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800852a:	68fb      	ldr	r3, [r7, #12]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08012f2c 	.word	0x08012f2c
 8008538:	08012fc0 	.word	0x08012fc0
 800853c:	08012f7c 	.word	0x08012f7c
 8008540:	08012fdc 	.word	0x08012fdc
 8008544:	08015674 	.word	0x08015674
 8008548:	0800896b 	.word	0x0800896b
 800854c:	240000ec 	.word	0x240000ec
 8008550:	24003400 	.word	0x24003400
 8008554:	08013000 	.word	0x08013000
 8008558:	08013014 	.word	0x08013014

0800855c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f002 fbd5 	bl	800ad18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f007 f87f 	bl	800f674 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <netif_do_set_ipaddr+0x20>
 8008592:	4b1d      	ldr	r3, [pc, #116]	; (8008608 <netif_do_set_ipaddr+0x88>)
 8008594:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008598:	491c      	ldr	r1, [pc, #112]	; (800860c <netif_do_set_ipaddr+0x8c>)
 800859a:	481d      	ldr	r0, [pc, #116]	; (8008610 <netif_do_set_ipaddr+0x90>)
 800859c:	f009 fbc0 	bl	8011d20 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <netif_do_set_ipaddr+0x34>
 80085a6:	4b18      	ldr	r3, [pc, #96]	; (8008608 <netif_do_set_ipaddr+0x88>)
 80085a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80085ac:	4917      	ldr	r1, [pc, #92]	; (800860c <netif_do_set_ipaddr+0x8c>)
 80085ae:	4818      	ldr	r0, [pc, #96]	; (8008610 <netif_do_set_ipaddr+0x90>)
 80085b0:	f009 fbb6 	bl	8011d20 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3304      	adds	r3, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d01c      	beq.n	80085fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3304      	adds	r3, #4
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80085d2:	f107 0314 	add.w	r3, r7, #20
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff ffbf 	bl	800855c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <netif_do_set_ipaddr+0x6a>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	e000      	b.n	80085ec <netif_do_set_ipaddr+0x6c>
 80085ea:	2300      	movs	r3, #0
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80085f0:	2101      	movs	r1, #1
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 f8d2 	bl	800879c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	08012f2c 	.word	0x08012f2c
 800860c:	08013044 	.word	0x08013044
 8008610:	08012f7c 	.word	0x08012f7c

08008614 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3308      	adds	r3, #8
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d00a      	beq.n	8008644 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <netif_do_set_netmask+0x26>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	e000      	b.n	800863c <netif_do_set_netmask+0x28>
 800863a:	2300      	movs	r3, #0
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	330c      	adds	r3, #12
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d00a      	beq.n	8008682 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <netif_do_set_gw+0x26>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	e000      	b.n	800867a <netif_do_set_gw+0x28>
 8008678:	2300      	movs	r3, #0
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80086ac:	4b1c      	ldr	r3, [pc, #112]	; (8008720 <netif_set_addr+0x90>)
 80086ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <netif_set_addr+0x90>)
 80086b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <netif_set_addr+0x90>)
 80086c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <netif_set_addr+0x42>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <netif_set_addr+0x46>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <netif_set_addr+0x48>
 80086d6:	2300      	movs	r3, #0
 80086d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d006      	beq.n	80086ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	461a      	mov	r2, r3
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff ff49 	bl	8008580 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff8e 	bl	8008614 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff ffa8 	bl	8008652 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008708:	f107 0310 	add.w	r3, r7, #16
 800870c:	461a      	mov	r2, r3
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff ff35 	bl	8008580 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008716:	bf00      	nop
 8008718:	3720      	adds	r7, #32
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	08015674 	.word	0x08015674

08008724 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800872c:	4a04      	ldr	r2, [pc, #16]	; (8008740 <netif_set_default+0x1c>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	24003404 	.word	0x24003404

08008744 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <netif_set_up+0x1e>
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <netif_set_up+0x4c>)
 8008754:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008758:	490e      	ldr	r1, [pc, #56]	; (8008794 <netif_set_up+0x50>)
 800875a:	480f      	ldr	r0, [pc, #60]	; (8008798 <netif_set_up+0x54>)
 800875c:	f009 fae0 	bl	8011d20 <iprintf>
 8008760:	e013      	b.n	800878a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10c      	bne.n	800878a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008782:	2103      	movs	r1, #3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f809 	bl	800879c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	08012f2c 	.word	0x08012f2c
 8008794:	080130b4 	.word	0x080130b4
 8008798:	08012f7c 	.word	0x08012f7c

0800879c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <netif_issue_reports+0x20>
 80087ae:	4b18      	ldr	r3, [pc, #96]	; (8008810 <netif_issue_reports+0x74>)
 80087b0:	f240 326d 	movw	r2, #877	; 0x36d
 80087b4:	4917      	ldr	r1, [pc, #92]	; (8008814 <netif_issue_reports+0x78>)
 80087b6:	4818      	ldr	r0, [pc, #96]	; (8008818 <netif_issue_reports+0x7c>)
 80087b8:	f009 fab2 	bl	8011d20 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01e      	beq.n	8008808 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d017      	beq.n	8008808 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d013      	beq.n	800880a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3304      	adds	r3, #4
 80087e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f007 fea1 	bl	8010548 <etharp_request>
 8008806:	e000      	b.n	800880a <netif_issue_reports+0x6e>
    return;
 8008808:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	08012f2c 	.word	0x08012f2c
 8008814:	080130d0 	.word	0x080130d0
 8008818:	08012f7c 	.word	0x08012f7c

0800881c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <netif_set_down+0x1e>
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <netif_set_down+0x58>)
 800882c:	f240 329b 	movw	r2, #923	; 0x39b
 8008830:	4911      	ldr	r1, [pc, #68]	; (8008878 <netif_set_down+0x5c>)
 8008832:	4812      	ldr	r0, [pc, #72]	; (800887c <netif_set_down+0x60>)
 8008834:	f009 fa74 	bl	8011d20 <iprintf>
 8008838:	e019      	b.n	800886e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d012      	beq.n	800886e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	b2da      	uxtb	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f007 fa2b 	bl	800fcc4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	08012f2c 	.word	0x08012f2c
 8008878:	080130f4 	.word	0x080130f4
 800887c:	08012f7c 	.word	0x08012f7c

08008880 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d107      	bne.n	800889e <netif_set_link_up+0x1e>
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <netif_set_link_up+0x5c>)
 8008890:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008894:	4912      	ldr	r1, [pc, #72]	; (80088e0 <netif_set_link_up+0x60>)
 8008896:	4813      	ldr	r0, [pc, #76]	; (80088e4 <netif_set_link_up+0x64>)
 8008898:	f009 fa42 	bl	8011d20 <iprintf>
 800889c:	e01b      	b.n	80088d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d114      	bne.n	80088d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088b2:	f043 0304 	orr.w	r3, r3, #4
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80088be:	2103      	movs	r1, #3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff ff6b 	bl	800879c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <netif_set_link_up+0x56>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	08012f2c 	.word	0x08012f2c
 80088e0:	08013114 	.word	0x08013114
 80088e4:	08012f7c 	.word	0x08012f7c

080088e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d107      	bne.n	8008906 <netif_set_link_down+0x1e>
 80088f6:	4b11      	ldr	r3, [pc, #68]	; (800893c <netif_set_link_down+0x54>)
 80088f8:	f240 4206 	movw	r2, #1030	; 0x406
 80088fc:	4910      	ldr	r1, [pc, #64]	; (8008940 <netif_set_link_down+0x58>)
 80088fe:	4811      	ldr	r0, [pc, #68]	; (8008944 <netif_set_link_down+0x5c>)
 8008900:	f009 fa0e 	bl	8011d20 <iprintf>
 8008904:	e017      	b.n	8008936 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d010      	beq.n	8008936 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800891a:	f023 0304 	bic.w	r3, r3, #4
 800891e:	b2da      	uxtb	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <netif_set_link_down+0x4e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	08012f2c 	.word	0x08012f2c
 8008940:	08013138 	.word	0x08013138
 8008944:	08012f7c 	.word	0x08012f7c

08008948 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	61da      	str	r2, [r3, #28]
  }
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008976:	f06f 030b 	mvn.w	r3, #11
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d013      	beq.n	80089c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008998:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <netif_get_by_index+0x48>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e00c      	b.n	80089ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	79fa      	ldrb	r2, [r7, #7]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d101      	bne.n	80089b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	e006      	b.n	80089c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1ef      	bne.n	80089a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	24003400 	.word	0x24003400

080089d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <pbuf_free_ooseq+0x38>)
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <pbuf_free_ooseq+0x3c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	607b      	str	r3, [r7, #4]
 80089e6:	e00a      	b.n	80089fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d003      	beq.n	80089f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 f9cf 	bl	800ad94 <tcp_free_ooseq>
      return;
 80089f6:	e005      	b.n	8008a04 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	607b      	str	r3, [r7, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f1      	bne.n	80089e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	24003408 	.word	0x24003408
 8008a10:	24003410 	.word	0x24003410

08008a14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <pbuf_pool_is_empty+0x14>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008a1e:	bf00      	nop
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	24003408 	.word	0x24003408

08008a2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	80fb      	strh	r3, [r7, #6]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	88fa      	ldrh	r2, [r7, #6]
 8008a52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	88ba      	ldrh	r2, [r7, #4]
 8008a58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008a5a:	8b3b      	ldrh	r3, [r7, #24]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	7f3a      	ldrb	r2, [r7, #28]
 8008a66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	73da      	strb	r2, [r3, #15]
}
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08c      	sub	sp, #48	; 0x30
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	4603      	mov	r3, r0
 8008a88:	80fb      	strh	r3, [r7, #6]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	80bb      	strh	r3, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008a96:	887b      	ldrh	r3, [r7, #2]
 8008a98:	2b41      	cmp	r3, #65	; 0x41
 8008a9a:	d00b      	beq.n	8008ab4 <pbuf_alloc+0x34>
 8008a9c:	2b41      	cmp	r3, #65	; 0x41
 8008a9e:	dc02      	bgt.n	8008aa6 <pbuf_alloc+0x26>
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d007      	beq.n	8008ab4 <pbuf_alloc+0x34>
 8008aa4:	e0c2      	b.n	8008c2c <pbuf_alloc+0x1ac>
 8008aa6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008aaa:	d00b      	beq.n	8008ac4 <pbuf_alloc+0x44>
 8008aac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008ab0:	d070      	beq.n	8008b94 <pbuf_alloc+0x114>
 8008ab2:	e0bb      	b.n	8008c2c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008ab4:	887a      	ldrh	r2, [r7, #2]
 8008ab6:	88bb      	ldrh	r3, [r7, #4]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	2000      	movs	r0, #0
 8008abc:	f000 f8d2 	bl	8008c64 <pbuf_alloc_reference>
 8008ac0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008ac2:	e0bd      	b.n	8008c40 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008acc:	88bb      	ldrh	r3, [r7, #4]
 8008ace:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008ad0:	2008      	movs	r0, #8
 8008ad2:	f7ff fbd3 	bl	800827c <memp_malloc>
 8008ad6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d109      	bne.n	8008af2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8008ade:	f7ff ff99 	bl	8008a14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <pbuf_alloc+0x6e>
            pbuf_free(p);
 8008ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aea:	f000 faa9 	bl	8009040 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	e0a7      	b.n	8008c42 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008af2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008af4:	3303      	adds	r3, #3
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	8b7a      	ldrh	r2, [r7, #26]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bf28      	it	cs
 8008b0a:	4613      	movcs	r3, r2
 8008b0c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b10:	3310      	adds	r3, #16
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4413      	add	r3, r2
 8008b16:	3303      	adds	r3, #3
 8008b18:	f023 0303 	bic.w	r3, r3, #3
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	89f9      	ldrh	r1, [r7, #14]
 8008b20:	8b7a      	ldrh	r2, [r7, #26]
 8008b22:	2300      	movs	r3, #0
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	887b      	ldrh	r3, [r7, #2]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4601      	mov	r1, r0
 8008b2e:	6938      	ldr	r0, [r7, #16]
 8008b30:	f7ff ff7c 	bl	8008a2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <pbuf_alloc+0xce>
 8008b40:	4b42      	ldr	r3, [pc, #264]	; (8008c4c <pbuf_alloc+0x1cc>)
 8008b42:	f240 1201 	movw	r2, #257	; 0x101
 8008b46:	4942      	ldr	r1, [pc, #264]	; (8008c50 <pbuf_alloc+0x1d0>)
 8008b48:	4842      	ldr	r0, [pc, #264]	; (8008c54 <pbuf_alloc+0x1d4>)
 8008b4a:	f009 f8e9 	bl	8011d20 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008b4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b50:	3303      	adds	r3, #3
 8008b52:	f023 0303 	bic.w	r3, r3, #3
 8008b56:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008b5a:	d106      	bne.n	8008b6a <pbuf_alloc+0xea>
 8008b5c:	4b3b      	ldr	r3, [pc, #236]	; (8008c4c <pbuf_alloc+0x1cc>)
 8008b5e:	f240 1203 	movw	r2, #259	; 0x103
 8008b62:	493d      	ldr	r1, [pc, #244]	; (8008c58 <pbuf_alloc+0x1d8>)
 8008b64:	483b      	ldr	r0, [pc, #236]	; (8008c54 <pbuf_alloc+0x1d4>)
 8008b66:	f009 f8db 	bl	8011d20 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
 8008b74:	e002      	b.n	8008b7c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008b80:	8b7a      	ldrh	r2, [r7, #26]
 8008b82:	89fb      	ldrh	r3, [r7, #14]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008b8c:	8b7b      	ldrh	r3, [r7, #26]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d19e      	bne.n	8008ad0 <pbuf_alloc+0x50>
      break;
 8008b92:	e055      	b.n	8008c40 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b96:	3303      	adds	r3, #3
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	88bb      	ldrh	r3, [r7, #4]
 8008ba2:	3303      	adds	r3, #3
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	f023 0303 	bic.w	r3, r3, #3
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4413      	add	r3, r2
 8008bae:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008bb0:	8b3b      	ldrh	r3, [r7, #24]
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008bb6:	8b3a      	ldrh	r2, [r7, #24]
 8008bb8:	88bb      	ldrh	r3, [r7, #4]
 8008bba:	3303      	adds	r3, #3
 8008bbc:	f023 0303 	bic.w	r3, r3, #3
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d306      	bcc.n	8008bd2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008bc4:	8afa      	ldrh	r2, [r7, #22]
 8008bc6:	88bb      	ldrh	r3, [r7, #4]
 8008bc8:	3303      	adds	r3, #3
 8008bca:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d201      	bcs.n	8008bd6 <pbuf_alloc+0x156>
        return NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e035      	b.n	8008c42 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008bd6:	8afb      	ldrh	r3, [r7, #22]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff f9bb 	bl	8007f54 <mem_malloc>
 8008bde:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <pbuf_alloc+0x16a>
        return NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e02b      	b.n	8008c42 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bec:	3310      	adds	r3, #16
 8008bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf0:	4413      	add	r3, r2
 8008bf2:	3303      	adds	r3, #3
 8008bf4:	f023 0303 	bic.w	r3, r3, #3
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	88b9      	ldrh	r1, [r7, #4]
 8008bfc:	88ba      	ldrh	r2, [r7, #4]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	887b      	ldrh	r3, [r7, #2]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	460b      	mov	r3, r1
 8008c08:	4601      	mov	r1, r0
 8008c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c0c:	f7ff ff0e 	bl	8008a2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f003 0303 	and.w	r3, r3, #3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d010      	beq.n	8008c3e <pbuf_alloc+0x1be>
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <pbuf_alloc+0x1cc>)
 8008c1e:	f240 1223 	movw	r2, #291	; 0x123
 8008c22:	490e      	ldr	r1, [pc, #56]	; (8008c5c <pbuf_alloc+0x1dc>)
 8008c24:	480b      	ldr	r0, [pc, #44]	; (8008c54 <pbuf_alloc+0x1d4>)
 8008c26:	f009 f87b 	bl	8011d20 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008c2a:	e008      	b.n	8008c3e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008c2c:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <pbuf_alloc+0x1cc>)
 8008c2e:	f240 1227 	movw	r2, #295	; 0x127
 8008c32:	490b      	ldr	r1, [pc, #44]	; (8008c60 <pbuf_alloc+0x1e0>)
 8008c34:	4807      	ldr	r0, [pc, #28]	; (8008c54 <pbuf_alloc+0x1d4>)
 8008c36:	f009 f873 	bl	8011d20 <iprintf>
      return NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e001      	b.n	8008c42 <pbuf_alloc+0x1c2>
      break;
 8008c3e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3728      	adds	r7, #40	; 0x28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	0801315c 	.word	0x0801315c
 8008c50:	0801318c 	.word	0x0801318c
 8008c54:	080131bc 	.word	0x080131bc
 8008c58:	080131e4 	.word	0x080131e4
 8008c5c:	08013218 	.word	0x08013218
 8008c60:	08013244 	.word	0x08013244

08008c64 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
 8008c70:	4613      	mov	r3, r2
 8008c72:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008c74:	883b      	ldrh	r3, [r7, #0]
 8008c76:	2b41      	cmp	r3, #65	; 0x41
 8008c78:	d009      	beq.n	8008c8e <pbuf_alloc_reference+0x2a>
 8008c7a:	883b      	ldrh	r3, [r7, #0]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d006      	beq.n	8008c8e <pbuf_alloc_reference+0x2a>
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <pbuf_alloc_reference+0x5c>)
 8008c82:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008c86:	490f      	ldr	r1, [pc, #60]	; (8008cc4 <pbuf_alloc_reference+0x60>)
 8008c88:	480f      	ldr	r0, [pc, #60]	; (8008cc8 <pbuf_alloc_reference+0x64>)
 8008c8a:	f009 f849 	bl	8011d20 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008c8e:	2007      	movs	r0, #7
 8008c90:	f7ff faf4 	bl	800827c <memp_malloc>
 8008c94:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e00b      	b.n	8008cb8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008ca0:	8879      	ldrh	r1, [r7, #2]
 8008ca2:	887a      	ldrh	r2, [r7, #2]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	883b      	ldrh	r3, [r7, #0]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	460b      	mov	r3, r1
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff febb 	bl	8008a2c <pbuf_init_alloced_pbuf>
  return p;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	0801315c 	.word	0x0801315c
 8008cc4:	08013260 	.word	0x08013260
 8008cc8:	080131bc 	.word	0x080131bc

08008ccc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	607b      	str	r3, [r7, #4]
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	81fb      	strh	r3, [r7, #14]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	81bb      	strh	r3, [r7, #12]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008ce0:	89fb      	ldrh	r3, [r7, #14]
 8008ce2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008ce4:	8a7b      	ldrh	r3, [r7, #18]
 8008ce6:	3303      	adds	r3, #3
 8008ce8:	f023 0203 	bic.w	r2, r3, #3
 8008cec:	89bb      	ldrh	r3, [r7, #12]
 8008cee:	441a      	add	r2, r3
 8008cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d901      	bls.n	8008cfa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e018      	b.n	8008d2c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008d00:	8a7b      	ldrh	r3, [r7, #18]
 8008d02:	3303      	adds	r3, #3
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	6a3a      	ldr	r2, [r7, #32]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]
 8008d0e:	e001      	b.n	8008d14 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	89b9      	ldrh	r1, [r7, #12]
 8008d18:	89ba      	ldrh	r2, [r7, #12]
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	897b      	ldrh	r3, [r7, #10]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	460b      	mov	r3, r1
 8008d24:	6979      	ldr	r1, [r7, #20]
 8008d26:	f7ff fe81 	bl	8008a2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008d2a:	687b      	ldr	r3, [r7, #4]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <pbuf_realloc+0x20>
 8008d46:	4b3a      	ldr	r3, [pc, #232]	; (8008e30 <pbuf_realloc+0xfc>)
 8008d48:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008d4c:	4939      	ldr	r1, [pc, #228]	; (8008e34 <pbuf_realloc+0x100>)
 8008d4e:	483a      	ldr	r0, [pc, #232]	; (8008e38 <pbuf_realloc+0x104>)
 8008d50:	f008 ffe6 	bl	8011d20 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	891b      	ldrh	r3, [r3, #8]
 8008d58:	887a      	ldrh	r2, [r7, #2]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d264      	bcs.n	8008e28 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	891a      	ldrh	r2, [r3, #8]
 8008d62:	887b      	ldrh	r3, [r7, #2]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008d68:	887b      	ldrh	r3, [r7, #2]
 8008d6a:	817b      	strh	r3, [r7, #10]
  q = p;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008d70:	e018      	b.n	8008da4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	895b      	ldrh	r3, [r3, #10]
 8008d76:	897a      	ldrh	r2, [r7, #10]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	891a      	ldrh	r2, [r3, #8]
 8008d80:	893b      	ldrh	r3, [r7, #8]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <pbuf_realloc+0x70>
 8008d96:	4b26      	ldr	r3, [pc, #152]	; (8008e30 <pbuf_realloc+0xfc>)
 8008d98:	f240 12af 	movw	r2, #431	; 0x1af
 8008d9c:	4927      	ldr	r1, [pc, #156]	; (8008e3c <pbuf_realloc+0x108>)
 8008d9e:	4826      	ldr	r0, [pc, #152]	; (8008e38 <pbuf_realloc+0x104>)
 8008da0:	f008 ffbe 	bl	8011d20 <iprintf>
  while (rem_len > q->len) {
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	895b      	ldrh	r3, [r3, #10]
 8008da8:	897a      	ldrh	r2, [r7, #10]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d8e1      	bhi.n	8008d72 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	7b1b      	ldrb	r3, [r3, #12]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d122      	bne.n	8008e00 <pbuf_realloc+0xcc>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	895b      	ldrh	r3, [r3, #10]
 8008dbe:	897a      	ldrh	r2, [r7, #10]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d01d      	beq.n	8008e00 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	7b5b      	ldrb	r3, [r3, #13]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d117      	bne.n	8008e00 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	897b      	ldrh	r3, [r7, #10]
 8008dde:	4413      	add	r3, r2
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4619      	mov	r1, r3
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7fe ffb3 	bl	8007d50 <mem_trim>
 8008dea:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <pbuf_realloc+0xcc>
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <pbuf_realloc+0xfc>)
 8008df4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008df8:	4911      	ldr	r1, [pc, #68]	; (8008e40 <pbuf_realloc+0x10c>)
 8008dfa:	480f      	ldr	r0, [pc, #60]	; (8008e38 <pbuf_realloc+0x104>)
 8008dfc:	f008 ff90 	bl	8011d20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	897a      	ldrh	r2, [r7, #10]
 8008e04:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	895a      	ldrh	r2, [r3, #10]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d004      	beq.n	8008e20 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f910 	bl	8009040 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	e000      	b.n	8008e2a <pbuf_realloc+0xf6>
    return;
 8008e28:	bf00      	nop

}
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	0801315c 	.word	0x0801315c
 8008e34:	08013274 	.word	0x08013274
 8008e38:	080131bc 	.word	0x080131bc
 8008e3c:	0801328c 	.word	0x0801328c
 8008e40:	080132a4 	.word	0x080132a4

08008e44 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <pbuf_add_header_impl+0x22>
 8008e58:	4b2b      	ldr	r3, [pc, #172]	; (8008f08 <pbuf_add_header_impl+0xc4>)
 8008e5a:	f240 12df 	movw	r2, #479	; 0x1df
 8008e5e:	492b      	ldr	r1, [pc, #172]	; (8008f0c <pbuf_add_header_impl+0xc8>)
 8008e60:	482b      	ldr	r0, [pc, #172]	; (8008f10 <pbuf_add_header_impl+0xcc>)
 8008e62:	f008 ff5d 	bl	8011d20 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <pbuf_add_header_impl+0x30>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e72:	d301      	bcc.n	8008e78 <pbuf_add_header_impl+0x34>
    return 1;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e043      	b.n	8008f00 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <pbuf_add_header_impl+0x3e>
    return 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e03e      	b.n	8008f00 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	891a      	ldrh	r2, [r3, #8]
 8008e8a:	8a7b      	ldrh	r3, [r7, #18]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	8a7a      	ldrh	r2, [r7, #18]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d901      	bls.n	8008e9a <pbuf_add_header_impl+0x56>
    return 1;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e032      	b.n	8008f00 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	7b1b      	ldrb	r3, [r3, #12]
 8008e9e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008ea0:	8a3b      	ldrh	r3, [r7, #16]
 8008ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00c      	beq.n	8008ec4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	425b      	negs	r3, r3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3310      	adds	r3, #16
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d20d      	bcs.n	8008edc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e01d      	b.n	8008f00 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d006      	beq.n	8008ed8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	425b      	negs	r3, r3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	e001      	b.n	8008edc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e011      	b.n	8008f00 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	895a      	ldrh	r2, [r3, #10]
 8008ee6:	8a7b      	ldrh	r3, [r7, #18]
 8008ee8:	4413      	add	r3, r2
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	891a      	ldrh	r2, [r3, #8]
 8008ef4:	8a7b      	ldrh	r3, [r7, #18]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	811a      	strh	r2, [r3, #8]


  return 0;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	0801315c 	.word	0x0801315c
 8008f0c:	080132c0 	.word	0x080132c0
 8008f10:	080131bc 	.word	0x080131bc

08008f14 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff ff8e 	bl	8008e44 <pbuf_add_header_impl>
 8008f28:	4603      	mov	r3, r0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <pbuf_remove_header+0x1e>
 8008f44:	4b20      	ldr	r3, [pc, #128]	; (8008fc8 <pbuf_remove_header+0x94>)
 8008f46:	f240 224b 	movw	r2, #587	; 0x24b
 8008f4a:	4920      	ldr	r1, [pc, #128]	; (8008fcc <pbuf_remove_header+0x98>)
 8008f4c:	4820      	ldr	r0, [pc, #128]	; (8008fd0 <pbuf_remove_header+0x9c>)
 8008f4e:	f008 fee7 	bl	8011d20 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <pbuf_remove_header+0x2c>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5e:	d301      	bcc.n	8008f64 <pbuf_remove_header+0x30>
    return 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e02c      	b.n	8008fbe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <pbuf_remove_header+0x3a>
    return 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e027      	b.n	8008fbe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	895b      	ldrh	r3, [r3, #10]
 8008f76:	89fa      	ldrh	r2, [r7, #14]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d908      	bls.n	8008f8e <pbuf_remove_header+0x5a>
 8008f7c:	4b12      	ldr	r3, [pc, #72]	; (8008fc8 <pbuf_remove_header+0x94>)
 8008f7e:	f240 2255 	movw	r2, #597	; 0x255
 8008f82:	4914      	ldr	r1, [pc, #80]	; (8008fd4 <pbuf_remove_header+0xa0>)
 8008f84:	4812      	ldr	r0, [pc, #72]	; (8008fd0 <pbuf_remove_header+0x9c>)
 8008f86:	f008 fecb 	bl	8011d20 <iprintf>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e017      	b.n	8008fbe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	441a      	add	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	895a      	ldrh	r2, [r3, #10]
 8008fa4:	89fb      	ldrh	r3, [r7, #14]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	891a      	ldrh	r2, [r3, #8]
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	0801315c 	.word	0x0801315c
 8008fcc:	080132c0 	.word	0x080132c0
 8008fd0:	080131bc 	.word	0x080131bc
 8008fd4:	080132cc 	.word	0x080132cc

08008fd8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da08      	bge.n	8009002 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ff4:	425b      	negs	r3, r3
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ff9b 	bl	8008f34 <pbuf_remove_header>
 8008ffe:	4603      	mov	r3, r0
 8009000:	e007      	b.n	8009012 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009006:	787a      	ldrb	r2, [r7, #1]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff ff1a 	bl	8008e44 <pbuf_add_header_impl>
 8009010:	4603      	mov	r3, r0
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009026:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800902a:	2201      	movs	r2, #1
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff ffd2 	bl	8008fd8 <pbuf_header_impl>
 8009034:	4603      	mov	r3, r0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <pbuf_free+0x22>
 8009054:	4b38      	ldr	r3, [pc, #224]	; (8009138 <pbuf_free+0xf8>)
 8009056:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800905a:	4938      	ldr	r1, [pc, #224]	; (800913c <pbuf_free+0xfc>)
 800905c:	4838      	ldr	r0, [pc, #224]	; (8009140 <pbuf_free+0x100>)
 800905e:	f008 fe5f 	bl	8011d20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009062:	2300      	movs	r3, #0
 8009064:	e063      	b.n	800912e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800906a:	e05c      	b.n	8009126 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7b9b      	ldrb	r3, [r3, #14]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <pbuf_free+0x42>
 8009074:	4b30      	ldr	r3, [pc, #192]	; (8009138 <pbuf_free+0xf8>)
 8009076:	f240 22f1 	movw	r2, #753	; 0x2f1
 800907a:	4932      	ldr	r1, [pc, #200]	; (8009144 <pbuf_free+0x104>)
 800907c:	4830      	ldr	r0, [pc, #192]	; (8009140 <pbuf_free+0x100>)
 800907e:	f008 fe4f 	bl	8011d20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	7b9b      	ldrb	r3, [r3, #14]
 8009086:	3b01      	subs	r3, #1
 8009088:	b2da      	uxtb	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	739a      	strb	r2, [r3, #14]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7b9b      	ldrb	r3, [r3, #14]
 8009092:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009094:	7dbb      	ldrb	r3, [r7, #22]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d143      	bne.n	8009122 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7b1b      	ldrb	r3, [r3, #12]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7b5b      	ldrb	r3, [r3, #13]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d011      	beq.n	80090da <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <pbuf_free+0x90>
 80090c2:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <pbuf_free+0xf8>)
 80090c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80090c8:	491f      	ldr	r1, [pc, #124]	; (8009148 <pbuf_free+0x108>)
 80090ca:	481d      	ldr	r0, [pc, #116]	; (8009140 <pbuf_free+0x100>)
 80090cc:	f008 fe28 	bl	8011d20 <iprintf>
        pc->custom_free_function(p);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
 80090d8:	e01d      	b.n	8009116 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d104      	bne.n	80090ea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	2008      	movs	r0, #8
 80090e4:	f7ff f93a 	bl	800835c <memp_free>
 80090e8:	e015      	b.n	8009116 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d104      	bne.n	80090fa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	2007      	movs	r0, #7
 80090f4:	f7ff f932 	bl	800835c <memp_free>
 80090f8:	e00d      	b.n	8009116 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d103      	bne.n	8009108 <pbuf_free+0xc8>
          mem_free(p);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7fe fdbb 	bl	8007c7c <mem_free>
 8009106:	e006      	b.n	8009116 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009108:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <pbuf_free+0xf8>)
 800910a:	f240 320f 	movw	r2, #783	; 0x30f
 800910e:	490f      	ldr	r1, [pc, #60]	; (800914c <pbuf_free+0x10c>)
 8009110:	480b      	ldr	r0, [pc, #44]	; (8009140 <pbuf_free+0x100>)
 8009112:	f008 fe05 	bl	8011d20 <iprintf>
        }
      }
      count++;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	3301      	adds	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e001      	b.n	8009126 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d19f      	bne.n	800906c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	0801315c 	.word	0x0801315c
 800913c:	080132c0 	.word	0x080132c0
 8009140:	080131bc 	.word	0x080131bc
 8009144:	080132ec 	.word	0x080132ec
 8009148:	08013304 	.word	0x08013304
 800914c:	08013328 	.word	0x08013328

08009150 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800915c:	e005      	b.n	800916a <pbuf_clen+0x1a>
    ++len;
 800915e:	89fb      	ldrh	r3, [r7, #14]
 8009160:	3301      	adds	r3, #1
 8009162:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f6      	bne.n	800915e <pbuf_clen+0xe>
  }
  return len;
 8009170:	89fb      	ldrh	r3, [r7, #14]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
	...

08009180 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d010      	beq.n	80091b0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	7b9b      	ldrb	r3, [r3, #14]
 8009192:	3301      	adds	r3, #1
 8009194:	b2da      	uxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7b9b      	ldrb	r3, [r3, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <pbuf_ref+0x30>
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <pbuf_ref+0x38>)
 80091a4:	f240 3242 	movw	r2, #834	; 0x342
 80091a8:	4904      	ldr	r1, [pc, #16]	; (80091bc <pbuf_ref+0x3c>)
 80091aa:	4805      	ldr	r0, [pc, #20]	; (80091c0 <pbuf_ref+0x40>)
 80091ac:	f008 fdb8 	bl	8011d20 <iprintf>
  }
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	0801315c 	.word	0x0801315c
 80091bc:	0801333c 	.word	0x0801333c
 80091c0:	080131bc 	.word	0x080131bc

080091c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <pbuf_cat+0x16>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d107      	bne.n	80091ea <pbuf_cat+0x26>
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <pbuf_cat+0x98>)
 80091dc:	f240 325a 	movw	r2, #858	; 0x35a
 80091e0:	491f      	ldr	r1, [pc, #124]	; (8009260 <pbuf_cat+0x9c>)
 80091e2:	4820      	ldr	r0, [pc, #128]	; (8009264 <pbuf_cat+0xa0>)
 80091e4:	f008 fd9c 	bl	8011d20 <iprintf>
 80091e8:	e034      	b.n	8009254 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	e00a      	b.n	8009206 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	891a      	ldrh	r2, [r3, #8]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	891b      	ldrh	r3, [r3, #8]
 80091f8:	4413      	add	r3, r2
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1f0      	bne.n	80091f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	891a      	ldrh	r2, [r3, #8]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	895b      	ldrh	r3, [r3, #10]
 8009216:	429a      	cmp	r2, r3
 8009218:	d006      	beq.n	8009228 <pbuf_cat+0x64>
 800921a:	4b10      	ldr	r3, [pc, #64]	; (800925c <pbuf_cat+0x98>)
 800921c:	f240 3262 	movw	r2, #866	; 0x362
 8009220:	4911      	ldr	r1, [pc, #68]	; (8009268 <pbuf_cat+0xa4>)
 8009222:	4810      	ldr	r0, [pc, #64]	; (8009264 <pbuf_cat+0xa0>)
 8009224:	f008 fd7c 	bl	8011d20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d006      	beq.n	800923e <pbuf_cat+0x7a>
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <pbuf_cat+0x98>)
 8009232:	f240 3263 	movw	r2, #867	; 0x363
 8009236:	490d      	ldr	r1, [pc, #52]	; (800926c <pbuf_cat+0xa8>)
 8009238:	480a      	ldr	r0, [pc, #40]	; (8009264 <pbuf_cat+0xa0>)
 800923a:	f008 fd71 	bl	8011d20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	891a      	ldrh	r2, [r3, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	891b      	ldrh	r3, [r3, #8]
 8009246:	4413      	add	r3, r2
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	0801315c 	.word	0x0801315c
 8009260:	08013350 	.word	0x08013350
 8009264:	080131bc 	.word	0x080131bc
 8009268:	08013388 	.word	0x08013388
 800926c:	080133b8 	.word	0x080133b8

08009270 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff ffa1 	bl	80091c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009282:	6838      	ldr	r0, [r7, #0]
 8009284:	f7ff ff7c 	bl	8009180 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <pbuf_copy+0x2a>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <pbuf_copy+0x2a>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	891a      	ldrh	r2, [r3, #8]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	891b      	ldrh	r3, [r3, #8]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d209      	bcs.n	80092ce <pbuf_copy+0x3e>
 80092ba:	4b57      	ldr	r3, [pc, #348]	; (8009418 <pbuf_copy+0x188>)
 80092bc:	f240 32ca 	movw	r2, #970	; 0x3ca
 80092c0:	4956      	ldr	r1, [pc, #344]	; (800941c <pbuf_copy+0x18c>)
 80092c2:	4857      	ldr	r0, [pc, #348]	; (8009420 <pbuf_copy+0x190>)
 80092c4:	f008 fd2c 	bl	8011d20 <iprintf>
 80092c8:	f06f 030f 	mvn.w	r3, #15
 80092cc:	e09f      	b.n	800940e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	895b      	ldrh	r3, [r3, #10]
 80092d2:	461a      	mov	r2, r3
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	895b      	ldrh	r3, [r3, #10]
 80092dc:	4619      	mov	r1, r3
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1acb      	subs	r3, r1, r3
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d306      	bcc.n	80092f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	895b      	ldrh	r3, [r3, #10]
 80092ea:	461a      	mov	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e005      	b.n	8009300 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	895b      	ldrh	r3, [r3, #10]
 80092f8:	461a      	mov	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	18d0      	adds	r0, r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4619      	mov	r1, r3
 8009314:	f008 fcf1 	bl	8011cfa <memcpy>
    offset_to += len;
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4413      	add	r3, r2
 800931e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	895b      	ldrh	r3, [r3, #10]
 800932c:	461a      	mov	r2, r3
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	4293      	cmp	r3, r2
 8009332:	d906      	bls.n	8009342 <pbuf_copy+0xb2>
 8009334:	4b38      	ldr	r3, [pc, #224]	; (8009418 <pbuf_copy+0x188>)
 8009336:	f240 32d9 	movw	r2, #985	; 0x3d9
 800933a:	493a      	ldr	r1, [pc, #232]	; (8009424 <pbuf_copy+0x194>)
 800933c:	4838      	ldr	r0, [pc, #224]	; (8009420 <pbuf_copy+0x190>)
 800933e:	f008 fcef 	bl	8011d20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	895b      	ldrh	r3, [r3, #10]
 8009346:	461a      	mov	r2, r3
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	4293      	cmp	r3, r2
 800934c:	d906      	bls.n	800935c <pbuf_copy+0xcc>
 800934e:	4b32      	ldr	r3, [pc, #200]	; (8009418 <pbuf_copy+0x188>)
 8009350:	f240 32da 	movw	r2, #986	; 0x3da
 8009354:	4934      	ldr	r1, [pc, #208]	; (8009428 <pbuf_copy+0x198>)
 8009356:	4832      	ldr	r0, [pc, #200]	; (8009420 <pbuf_copy+0x190>)
 8009358:	f008 fce2 	bl	8011d20 <iprintf>
    if (offset_from >= p_from->len) {
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	895b      	ldrh	r3, [r3, #10]
 8009360:	461a      	mov	r2, r3
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	4293      	cmp	r3, r2
 8009366:	d304      	bcc.n	8009372 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	895b      	ldrh	r3, [r3, #10]
 8009376:	461a      	mov	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	4293      	cmp	r3, r2
 800937c:	d114      	bne.n	80093a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10c      	bne.n	80093a8 <pbuf_copy+0x118>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d009      	beq.n	80093a8 <pbuf_copy+0x118>
 8009394:	4b20      	ldr	r3, [pc, #128]	; (8009418 <pbuf_copy+0x188>)
 8009396:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800939a:	4924      	ldr	r1, [pc, #144]	; (800942c <pbuf_copy+0x19c>)
 800939c:	4820      	ldr	r0, [pc, #128]	; (8009420 <pbuf_copy+0x190>)
 800939e:	f008 fcbf 	bl	8011d20 <iprintf>
 80093a2:	f06f 030f 	mvn.w	r3, #15
 80093a6:	e032      	b.n	800940e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d013      	beq.n	80093d6 <pbuf_copy+0x146>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	895a      	ldrh	r2, [r3, #10]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	891b      	ldrh	r3, [r3, #8]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d10d      	bne.n	80093d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <pbuf_copy+0x146>
 80093c2:	4b15      	ldr	r3, [pc, #84]	; (8009418 <pbuf_copy+0x188>)
 80093c4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80093c8:	4919      	ldr	r1, [pc, #100]	; (8009430 <pbuf_copy+0x1a0>)
 80093ca:	4815      	ldr	r0, [pc, #84]	; (8009420 <pbuf_copy+0x190>)
 80093cc:	f008 fca8 	bl	8011d20 <iprintf>
 80093d0:	f06f 0305 	mvn.w	r3, #5
 80093d4:	e01b      	b.n	800940e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d013      	beq.n	8009404 <pbuf_copy+0x174>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	895a      	ldrh	r2, [r3, #10]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	891b      	ldrh	r3, [r3, #8]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d10d      	bne.n	8009404 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <pbuf_copy+0x174>
 80093f0:	4b09      	ldr	r3, [pc, #36]	; (8009418 <pbuf_copy+0x188>)
 80093f2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80093f6:	490e      	ldr	r1, [pc, #56]	; (8009430 <pbuf_copy+0x1a0>)
 80093f8:	4809      	ldr	r0, [pc, #36]	; (8009420 <pbuf_copy+0x190>)
 80093fa:	f008 fc91 	bl	8011d20 <iprintf>
 80093fe:	f06f 0305 	mvn.w	r3, #5
 8009402:	e004      	b.n	800940e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f47f af61 	bne.w	80092ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	0801315c 	.word	0x0801315c
 800941c:	08013404 	.word	0x08013404
 8009420:	080131bc 	.word	0x080131bc
 8009424:	08013434 	.word	0x08013434
 8009428:	0801344c 	.word	0x0801344c
 800942c:	08013468 	.word	0x08013468
 8009430:	08013478 	.word	0x08013478

08009434 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4611      	mov	r1, r2
 8009440:	461a      	mov	r2, r3
 8009442:	460b      	mov	r3, r1
 8009444:	80fb      	strh	r3, [r7, #6]
 8009446:	4613      	mov	r3, r2
 8009448:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d108      	bne.n	800946a <pbuf_copy_partial+0x36>
 8009458:	4b2b      	ldr	r3, [pc, #172]	; (8009508 <pbuf_copy_partial+0xd4>)
 800945a:	f240 420a 	movw	r2, #1034	; 0x40a
 800945e:	492b      	ldr	r1, [pc, #172]	; (800950c <pbuf_copy_partial+0xd8>)
 8009460:	482b      	ldr	r0, [pc, #172]	; (8009510 <pbuf_copy_partial+0xdc>)
 8009462:	f008 fc5d 	bl	8011d20 <iprintf>
 8009466:	2300      	movs	r3, #0
 8009468:	e04a      	b.n	8009500 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d108      	bne.n	8009482 <pbuf_copy_partial+0x4e>
 8009470:	4b25      	ldr	r3, [pc, #148]	; (8009508 <pbuf_copy_partial+0xd4>)
 8009472:	f240 420b 	movw	r2, #1035	; 0x40b
 8009476:	4927      	ldr	r1, [pc, #156]	; (8009514 <pbuf_copy_partial+0xe0>)
 8009478:	4825      	ldr	r0, [pc, #148]	; (8009510 <pbuf_copy_partial+0xdc>)
 800947a:	f008 fc51 	bl	8011d20 <iprintf>
 800947e:	2300      	movs	r3, #0
 8009480:	e03e      	b.n	8009500 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	e034      	b.n	80094f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009488:	88bb      	ldrh	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <pbuf_copy_partial+0x70>
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	895b      	ldrh	r3, [r3, #10]
 8009492:	88ba      	ldrh	r2, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d305      	bcc.n	80094a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	895b      	ldrh	r3, [r3, #10]
 800949c:	88ba      	ldrh	r2, [r7, #4]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	80bb      	strh	r3, [r7, #4]
 80094a2:	e023      	b.n	80094ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	895a      	ldrh	r2, [r3, #10]
 80094a8:	88bb      	ldrh	r3, [r7, #4]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80094ae:	8b3a      	ldrh	r2, [r7, #24]
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d901      	bls.n	80094ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80094b6:	88fb      	ldrh	r3, [r7, #6]
 80094b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80094ba:	8b7b      	ldrh	r3, [r7, #26]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	18d0      	adds	r0, r2, r3
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	88bb      	ldrh	r3, [r7, #4]
 80094c6:	4413      	add	r3, r2
 80094c8:	8b3a      	ldrh	r2, [r7, #24]
 80094ca:	4619      	mov	r1, r3
 80094cc:	f008 fc15 	bl	8011cfa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80094d0:	8afa      	ldrh	r2, [r7, #22]
 80094d2:	8b3b      	ldrh	r3, [r7, #24]
 80094d4:	4413      	add	r3, r2
 80094d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80094d8:	8b7a      	ldrh	r2, [r7, #26]
 80094da:	8b3b      	ldrh	r3, [r7, #24]
 80094dc:	4413      	add	r3, r2
 80094de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80094e0:	88fa      	ldrh	r2, [r7, #6]
 80094e2:	8b3b      	ldrh	r3, [r7, #24]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	61fb      	str	r3, [r7, #28]
 80094f2:	88fb      	ldrh	r3, [r7, #6]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <pbuf_copy_partial+0xca>
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1c4      	bne.n	8009488 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80094fe:	8afb      	ldrh	r3, [r7, #22]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	0801315c 	.word	0x0801315c
 800950c:	080134a4 	.word	0x080134a4
 8009510:	080131bc 	.word	0x080131bc
 8009514:	080134c4 	.word	0x080134c4

08009518 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d109      	bne.n	8009548 <pbuf_take+0x30>
 8009534:	4b3a      	ldr	r3, [pc, #232]	; (8009620 <pbuf_take+0x108>)
 8009536:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800953a:	493a      	ldr	r1, [pc, #232]	; (8009624 <pbuf_take+0x10c>)
 800953c:	483a      	ldr	r0, [pc, #232]	; (8009628 <pbuf_take+0x110>)
 800953e:	f008 fbef 	bl	8011d20 <iprintf>
 8009542:	f06f 030f 	mvn.w	r3, #15
 8009546:	e067      	b.n	8009618 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <pbuf_take+0x4a>
 800954e:	4b34      	ldr	r3, [pc, #208]	; (8009620 <pbuf_take+0x108>)
 8009550:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8009554:	4935      	ldr	r1, [pc, #212]	; (800962c <pbuf_take+0x114>)
 8009556:	4834      	ldr	r0, [pc, #208]	; (8009628 <pbuf_take+0x110>)
 8009558:	f008 fbe2 	bl	8011d20 <iprintf>
 800955c:	f06f 030f 	mvn.w	r3, #15
 8009560:	e05a      	b.n	8009618 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	429a      	cmp	r2, r3
 800956a:	d909      	bls.n	8009580 <pbuf_take+0x68>
 800956c:	4b2c      	ldr	r3, [pc, #176]	; (8009620 <pbuf_take+0x108>)
 800956e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8009572:	492f      	ldr	r1, [pc, #188]	; (8009630 <pbuf_take+0x118>)
 8009574:	482c      	ldr	r0, [pc, #176]	; (8009628 <pbuf_take+0x110>)
 8009576:	f008 fbd3 	bl	8011d20 <iprintf>
 800957a:	f04f 33ff 	mov.w	r3, #4294967295
 800957e:	e04b      	b.n	8009618 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <pbuf_take+0x7e>
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <pbuf_take+0x7e>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	891b      	ldrh	r3, [r3, #8]
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	429a      	cmp	r2, r3
 8009594:	d902      	bls.n	800959c <pbuf_take+0x84>
    return ERR_ARG;
 8009596:	f06f 030f 	mvn.w	r3, #15
 800959a:	e03d      	b.n	8009618 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	61fb      	str	r3, [r7, #28]
 80095a0:	e028      	b.n	80095f4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <pbuf_take+0x9e>
 80095a8:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <pbuf_take+0x108>)
 80095aa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80095ae:	4921      	ldr	r1, [pc, #132]	; (8009634 <pbuf_take+0x11c>)
 80095b0:	481d      	ldr	r0, [pc, #116]	; (8009628 <pbuf_take+0x110>)
 80095b2:	f008 fbb5 	bl	8011d20 <iprintf>
    buf_copy_len = total_copy_len;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	895b      	ldrh	r3, [r3, #10]
 80095be:	461a      	mov	r2, r3
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d902      	bls.n	80095cc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	895b      	ldrh	r3, [r3, #10]
 80095ca:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	6858      	ldr	r0, [r3, #4]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	4413      	add	r3, r2
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	4619      	mov	r1, r3
 80095da:	f008 fb8e 	bl	8011cfa <memcpy>
    total_copy_len -= buf_copy_len;
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	4413      	add	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	61fb      	str	r3, [r7, #28]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1d3      	bne.n	80095a2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <pbuf_take+0xf0>
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d006      	beq.n	8009616 <pbuf_take+0xfe>
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <pbuf_take+0x108>)
 800960a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800960e:	490a      	ldr	r1, [pc, #40]	; (8009638 <pbuf_take+0x120>)
 8009610:	4805      	ldr	r0, [pc, #20]	; (8009628 <pbuf_take+0x110>)
 8009612:	f008 fb85 	bl	8011d20 <iprintf>
  return ERR_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	0801315c 	.word	0x0801315c
 8009624:	08013534 	.word	0x08013534
 8009628:	080131bc 	.word	0x080131bc
 800962c:	0801354c 	.word	0x0801354c
 8009630:	08013568 	.word	0x08013568
 8009634:	08013588 	.word	0x08013588
 8009638:	080135a0 	.word	0x080135a0

0800963c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	603a      	str	r2, [r7, #0]
 8009646:	80fb      	strh	r3, [r7, #6]
 8009648:	460b      	mov	r3, r1
 800964a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	8919      	ldrh	r1, [r3, #8]
 8009650:	88ba      	ldrh	r2, [r7, #4]
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fa13 	bl	8008a80 <pbuf_alloc>
 800965a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <pbuf_clone+0x2a>
    return NULL;
 8009662:	2300      	movs	r3, #0
 8009664:	e011      	b.n	800968a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fe11 	bl	8009290 <pbuf_copy>
 800966e:	4603      	mov	r3, r0
 8009670:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009672:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <pbuf_clone+0x4c>
 800967a:	4b06      	ldr	r3, [pc, #24]	; (8009694 <pbuf_clone+0x58>)
 800967c:	f240 5224 	movw	r2, #1316	; 0x524
 8009680:	4905      	ldr	r1, [pc, #20]	; (8009698 <pbuf_clone+0x5c>)
 8009682:	4806      	ldr	r0, [pc, #24]	; (800969c <pbuf_clone+0x60>)
 8009684:	f008 fb4c 	bl	8011d20 <iprintf>
  return q;
 8009688:	68fb      	ldr	r3, [r7, #12]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	0801315c 	.word	0x0801315c
 8009698:	080135d0 	.word	0x080135d0
 800969c:	080131bc 	.word	0x080131bc

080096a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80096a4:	f008 fb54 	bl	8011d50 <rand>
 80096a8:	4603      	mov	r3, r0
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	4b01      	ldr	r3, [pc, #4]	; (80096c0 <tcp_init+0x20>)
 80096ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	24000024 	.word	0x24000024

080096c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7d1b      	ldrb	r3, [r3, #20]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d105      	bne.n	80096e0 <tcp_free+0x1c>
 80096d4:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <tcp_free+0x2c>)
 80096d6:	22d4      	movs	r2, #212	; 0xd4
 80096d8:	4906      	ldr	r1, [pc, #24]	; (80096f4 <tcp_free+0x30>)
 80096da:	4807      	ldr	r0, [pc, #28]	; (80096f8 <tcp_free+0x34>)
 80096dc:	f008 fb20 	bl	8011d20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	2001      	movs	r0, #1
 80096e4:	f7fe fe3a 	bl	800835c <memp_free>
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	0801365c 	.word	0x0801365c
 80096f4:	0801368c 	.word	0x0801368c
 80096f8:	080136a0 	.word	0x080136a0

080096fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7d1b      	ldrb	r3, [r3, #20]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d105      	bne.n	8009718 <tcp_free_listen+0x1c>
 800970c:	4b06      	ldr	r3, [pc, #24]	; (8009728 <tcp_free_listen+0x2c>)
 800970e:	22df      	movs	r2, #223	; 0xdf
 8009710:	4906      	ldr	r1, [pc, #24]	; (800972c <tcp_free_listen+0x30>)
 8009712:	4807      	ldr	r0, [pc, #28]	; (8009730 <tcp_free_listen+0x34>)
 8009714:	f008 fb04 	bl	8011d20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	2002      	movs	r0, #2
 800971c:	f7fe fe1e 	bl	800835c <memp_free>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	0801365c 	.word	0x0801365c
 800972c:	080136c8 	.word	0x080136c8
 8009730:	080136a0 	.word	0x080136a0

08009734 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009738:	f000 fe98 	bl	800a46c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800973c:	4b07      	ldr	r3, [pc, #28]	; (800975c <tcp_tmr+0x28>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	b2da      	uxtb	r2, r3
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <tcp_tmr+0x28>)
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <tcp_tmr+0x28>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009754:	f000 fb4c 	bl	8009df0 <tcp_slowtmr>
  }
}
 8009758:	bf00      	nop
 800975a:	bd80      	pop	{r7, pc}
 800975c:	240000ed 	.word	0x240000ed

08009760 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d105      	bne.n	800977c <tcp_remove_listener+0x1c>
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <tcp_remove_listener+0x48>)
 8009772:	22ff      	movs	r2, #255	; 0xff
 8009774:	490d      	ldr	r1, [pc, #52]	; (80097ac <tcp_remove_listener+0x4c>)
 8009776:	480e      	ldr	r0, [pc, #56]	; (80097b0 <tcp_remove_listener+0x50>)
 8009778:	f008 fad2 	bl	8011d20 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e00a      	b.n	8009798 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d102      	bne.n	8009792 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f1      	bne.n	8009782 <tcp_remove_listener+0x22>
    }
  }
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	0801365c 	.word	0x0801365c
 80097ac:	080136e4 	.word	0x080136e4
 80097b0:	080136a0 	.word	0x080136a0

080097b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <tcp_listen_closed+0x1c>
 80097c2:	4b14      	ldr	r3, [pc, #80]	; (8009814 <tcp_listen_closed+0x60>)
 80097c4:	f240 1211 	movw	r2, #273	; 0x111
 80097c8:	4913      	ldr	r1, [pc, #76]	; (8009818 <tcp_listen_closed+0x64>)
 80097ca:	4814      	ldr	r0, [pc, #80]	; (800981c <tcp_listen_closed+0x68>)
 80097cc:	f008 faa8 	bl	8011d20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	7d1b      	ldrb	r3, [r3, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d006      	beq.n	80097e6 <tcp_listen_closed+0x32>
 80097d8:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <tcp_listen_closed+0x60>)
 80097da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80097de:	4910      	ldr	r1, [pc, #64]	; (8009820 <tcp_listen_closed+0x6c>)
 80097e0:	480e      	ldr	r0, [pc, #56]	; (800981c <tcp_listen_closed+0x68>)
 80097e2:	f008 fa9d 	bl	8011d20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80097e6:	2301      	movs	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e00b      	b.n	8009804 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80097ec:	4a0d      	ldr	r2, [pc, #52]	; (8009824 <tcp_listen_closed+0x70>)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff ffb1 	bl	8009760 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b03      	cmp	r3, #3
 8009808:	d9f0      	bls.n	80097ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	0801365c 	.word	0x0801365c
 8009818:	0801370c 	.word	0x0801370c
 800981c:	080136a0 	.word	0x080136a0
 8009820:	08013718 	.word	0x08013718
 8009824:	0801564c 	.word	0x0801564c

08009828 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009828:	b5b0      	push	{r4, r5, r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af04      	add	r7, sp, #16
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <tcp_close_shutdown+0x20>
 800983a:	4b61      	ldr	r3, [pc, #388]	; (80099c0 <tcp_close_shutdown+0x198>)
 800983c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009840:	4960      	ldr	r1, [pc, #384]	; (80099c4 <tcp_close_shutdown+0x19c>)
 8009842:	4861      	ldr	r0, [pc, #388]	; (80099c8 <tcp_close_shutdown+0x1a0>)
 8009844:	f008 fa6c 	bl	8011d20 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d066      	beq.n	800991c <tcp_close_shutdown+0xf4>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7d1b      	ldrb	r3, [r3, #20]
 8009852:	2b04      	cmp	r3, #4
 8009854:	d003      	beq.n	800985e <tcp_close_shutdown+0x36>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7d1b      	ldrb	r3, [r3, #20]
 800985a:	2b07      	cmp	r3, #7
 800985c:	d15e      	bne.n	800991c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <tcp_close_shutdown+0x48>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800986e:	d055      	beq.n	800991c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	8b5b      	ldrh	r3, [r3, #26]
 8009874:	f003 0310 	and.w	r3, r3, #16
 8009878:	2b00      	cmp	r3, #0
 800987a:	d106      	bne.n	800988a <tcp_close_shutdown+0x62>
 800987c:	4b50      	ldr	r3, [pc, #320]	; (80099c0 <tcp_close_shutdown+0x198>)
 800987e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009882:	4952      	ldr	r1, [pc, #328]	; (80099cc <tcp_close_shutdown+0x1a4>)
 8009884:	4850      	ldr	r0, [pc, #320]	; (80099c8 <tcp_close_shutdown+0x1a0>)
 8009886:	f008 fa4b 	bl	8011d20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009892:	687d      	ldr	r5, [r7, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	8ad2      	ldrh	r2, [r2, #22]
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	8b09      	ldrh	r1, [r1, #24]
 80098a0:	9102      	str	r1, [sp, #8]
 80098a2:	9201      	str	r2, [sp, #4]
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	462b      	mov	r3, r5
 80098a8:	4622      	mov	r2, r4
 80098aa:	4601      	mov	r1, r0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f004 fe93 	bl	800e5d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 f8ba 	bl	800aa2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80098b8:	4b45      	ldr	r3, [pc, #276]	; (80099d0 <tcp_close_shutdown+0x1a8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d105      	bne.n	80098ce <tcp_close_shutdown+0xa6>
 80098c2:	4b43      	ldr	r3, [pc, #268]	; (80099d0 <tcp_close_shutdown+0x1a8>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	4a41      	ldr	r2, [pc, #260]	; (80099d0 <tcp_close_shutdown+0x1a8>)
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	e013      	b.n	80098f6 <tcp_close_shutdown+0xce>
 80098ce:	4b40      	ldr	r3, [pc, #256]	; (80099d0 <tcp_close_shutdown+0x1a8>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	e00c      	b.n	80098f0 <tcp_close_shutdown+0xc8>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d104      	bne.n	80098ea <tcp_close_shutdown+0xc2>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	60da      	str	r2, [r3, #12]
 80098e8:	e005      	b.n	80098f6 <tcp_close_shutdown+0xce>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1ef      	bne.n	80098d6 <tcp_close_shutdown+0xae>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	60da      	str	r2, [r3, #12]
 80098fc:	4b35      	ldr	r3, [pc, #212]	; (80099d4 <tcp_close_shutdown+0x1ac>)
 80098fe:	2201      	movs	r2, #1
 8009900:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009902:	4b35      	ldr	r3, [pc, #212]	; (80099d8 <tcp_close_shutdown+0x1b0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d102      	bne.n	8009912 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800990c:	f003 fd4c 	bl	800d3a8 <tcp_trigger_input_pcb_close>
 8009910:	e002      	b.n	8009918 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff fed6 	bl	80096c4 <tcp_free>
      }
      return ERR_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	e04d      	b.n	80099b8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7d1b      	ldrb	r3, [r3, #20]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d02d      	beq.n	8009980 <tcp_close_shutdown+0x158>
 8009924:	2b02      	cmp	r3, #2
 8009926:	d036      	beq.n	8009996 <tcp_close_shutdown+0x16e>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d13f      	bne.n	80099ac <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	8adb      	ldrh	r3, [r3, #22]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d021      	beq.n	8009978 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009934:	4b29      	ldr	r3, [pc, #164]	; (80099dc <tcp_close_shutdown+0x1b4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	429a      	cmp	r2, r3
 800993c:	d105      	bne.n	800994a <tcp_close_shutdown+0x122>
 800993e:	4b27      	ldr	r3, [pc, #156]	; (80099dc <tcp_close_shutdown+0x1b4>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	4a25      	ldr	r2, [pc, #148]	; (80099dc <tcp_close_shutdown+0x1b4>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	e013      	b.n	8009972 <tcp_close_shutdown+0x14a>
 800994a:	4b24      	ldr	r3, [pc, #144]	; (80099dc <tcp_close_shutdown+0x1b4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60bb      	str	r3, [r7, #8]
 8009950:	e00c      	b.n	800996c <tcp_close_shutdown+0x144>
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	429a      	cmp	r2, r3
 800995a:	d104      	bne.n	8009966 <tcp_close_shutdown+0x13e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	60da      	str	r2, [r3, #12]
 8009964:	e005      	b.n	8009972 <tcp_close_shutdown+0x14a>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	60bb      	str	r3, [r7, #8]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1ef      	bne.n	8009952 <tcp_close_shutdown+0x12a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fea3 	bl	80096c4 <tcp_free>
      break;
 800997e:	e01a      	b.n	80099b6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff ff17 	bl	80097b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4815      	ldr	r0, [pc, #84]	; (80099e0 <tcp_close_shutdown+0x1b8>)
 800998a:	f001 f89f 	bl	800aacc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff feb4 	bl	80096fc <tcp_free_listen>
      break;
 8009994:	e00f      	b.n	80099b6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	480d      	ldr	r0, [pc, #52]	; (80099d0 <tcp_close_shutdown+0x1a8>)
 800999a:	f001 f897 	bl	800aacc <tcp_pcb_remove>
 800999e:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <tcp_close_shutdown+0x1ac>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff fe8d 	bl	80096c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80099aa:	e004      	b.n	80099b6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f819 	bl	80099e4 <tcp_close_shutdown_fin>
 80099b2:	4603      	mov	r3, r0
 80099b4:	e000      	b.n	80099b8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bdb0      	pop	{r4, r5, r7, pc}
 80099c0:	0801365c 	.word	0x0801365c
 80099c4:	08013730 	.word	0x08013730
 80099c8:	080136a0 	.word	0x080136a0
 80099cc:	08013750 	.word	0x08013750
 80099d0:	24003410 	.word	0x24003410
 80099d4:	2400340c 	.word	0x2400340c
 80099d8:	24003424 	.word	0x24003424
 80099dc:	2400341c 	.word	0x2400341c
 80099e0:	24003418 	.word	0x24003418

080099e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <tcp_close_shutdown_fin+0x1c>
 80099f2:	4b2c      	ldr	r3, [pc, #176]	; (8009aa4 <tcp_close_shutdown_fin+0xc0>)
 80099f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80099f8:	492b      	ldr	r1, [pc, #172]	; (8009aa8 <tcp_close_shutdown_fin+0xc4>)
 80099fa:	482c      	ldr	r0, [pc, #176]	; (8009aac <tcp_close_shutdown_fin+0xc8>)
 80099fc:	f008 f990 	bl	8011d20 <iprintf>

  switch (pcb->state) {
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7d1b      	ldrb	r3, [r3, #20]
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d010      	beq.n	8009a2a <tcp_close_shutdown_fin+0x46>
 8009a08:	2b07      	cmp	r3, #7
 8009a0a:	d01b      	beq.n	8009a44 <tcp_close_shutdown_fin+0x60>
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d126      	bne.n	8009a5e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f003 fedd 	bl	800d7d0 <tcp_send_fin>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d11f      	bne.n	8009a62 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2205      	movs	r2, #5
 8009a26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a28:	e01b      	b.n	8009a62 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f003 fed0 	bl	800d7d0 <tcp_send_fin>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d114      	bne.n	8009a66 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2205      	movs	r2, #5
 8009a40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a42:	e010      	b.n	8009a66 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f003 fec3 	bl	800d7d0 <tcp_send_fin>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2209      	movs	r2, #9
 8009a5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a5c:	e005      	b.n	8009a6a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e01c      	b.n	8009a9c <tcp_close_shutdown_fin+0xb8>
      break;
 8009a62:	bf00      	nop
 8009a64:	e002      	b.n	8009a6c <tcp_close_shutdown_fin+0x88>
      break;
 8009a66:	bf00      	nop
 8009a68:	e000      	b.n	8009a6c <tcp_close_shutdown_fin+0x88>
      break;
 8009a6a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d103      	bne.n	8009a7c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f003 ffe9 	bl	800da4c <tcp_output>
 8009a7a:	e00d      	b.n	8009a98 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a84:	d108      	bne.n	8009a98 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	8b5b      	ldrh	r3, [r3, #26]
 8009a8a:	f043 0308 	orr.w	r3, r3, #8
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e001      	b.n	8009a9c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	0801365c 	.word	0x0801365c
 8009aa8:	0801370c 	.word	0x0801370c
 8009aac:	080136a0 	.word	0x080136a0

08009ab0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d109      	bne.n	8009ad2 <tcp_close+0x22>
 8009abe:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <tcp_close+0x4c>)
 8009ac0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ac4:	490e      	ldr	r1, [pc, #56]	; (8009b00 <tcp_close+0x50>)
 8009ac6:	480f      	ldr	r0, [pc, #60]	; (8009b04 <tcp_close+0x54>)
 8009ac8:	f008 f92a 	bl	8011d20 <iprintf>
 8009acc:	f06f 030f 	mvn.w	r3, #15
 8009ad0:	e00f      	b.n	8009af2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7d1b      	ldrb	r3, [r3, #20]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d006      	beq.n	8009ae8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8b5b      	ldrh	r3, [r3, #26]
 8009ade:	f043 0310 	orr.w	r3, r3, #16
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fe9c 	bl	8009828 <tcp_close_shutdown>
 8009af0:	4603      	mov	r3, r0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	0801365c 	.word	0x0801365c
 8009b00:	0801376c 	.word	0x0801376c
 8009b04:	080136a0 	.word	0x080136a0

08009b08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	; 0x38
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d107      	bne.n	8009b28 <tcp_abandon+0x20>
 8009b18:	4b52      	ldr	r3, [pc, #328]	; (8009c64 <tcp_abandon+0x15c>)
 8009b1a:	f240 223d 	movw	r2, #573	; 0x23d
 8009b1e:	4952      	ldr	r1, [pc, #328]	; (8009c68 <tcp_abandon+0x160>)
 8009b20:	4852      	ldr	r0, [pc, #328]	; (8009c6c <tcp_abandon+0x164>)
 8009b22:	f008 f8fd 	bl	8011d20 <iprintf>
 8009b26:	e099      	b.n	8009c5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7d1b      	ldrb	r3, [r3, #20]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d106      	bne.n	8009b3e <tcp_abandon+0x36>
 8009b30:	4b4c      	ldr	r3, [pc, #304]	; (8009c64 <tcp_abandon+0x15c>)
 8009b32:	f240 2241 	movw	r2, #577	; 0x241
 8009b36:	494e      	ldr	r1, [pc, #312]	; (8009c70 <tcp_abandon+0x168>)
 8009b38:	484c      	ldr	r0, [pc, #304]	; (8009c6c <tcp_abandon+0x164>)
 8009b3a:	f008 f8f1 	bl	8011d20 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	7d1b      	ldrb	r3, [r3, #20]
 8009b42:	2b0a      	cmp	r3, #10
 8009b44:	d107      	bne.n	8009b56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	484a      	ldr	r0, [pc, #296]	; (8009c74 <tcp_abandon+0x16c>)
 8009b4a:	f000 ffbf 	bl	800aacc <tcp_pcb_remove>
    tcp_free(pcb);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff fdb8 	bl	80096c4 <tcp_free>
 8009b54:	e082      	b.n	8009c5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7d1b      	ldrb	r3, [r3, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d126      	bne.n	8009bce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8adb      	ldrh	r3, [r3, #22]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d02e      	beq.n	8009be6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b88:	4b3b      	ldr	r3, [pc, #236]	; (8009c78 <tcp_abandon+0x170>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d105      	bne.n	8009b9e <tcp_abandon+0x96>
 8009b92:	4b39      	ldr	r3, [pc, #228]	; (8009c78 <tcp_abandon+0x170>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	4a37      	ldr	r2, [pc, #220]	; (8009c78 <tcp_abandon+0x170>)
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	e013      	b.n	8009bc6 <tcp_abandon+0xbe>
 8009b9e:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <tcp_abandon+0x170>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	e00c      	b.n	8009bc0 <tcp_abandon+0xb8>
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d104      	bne.n	8009bba <tcp_abandon+0xb2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	60da      	str	r2, [r3, #12]
 8009bb8:	e005      	b.n	8009bc6 <tcp_abandon+0xbe>
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1ef      	bne.n	8009ba6 <tcp_abandon+0x9e>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	60da      	str	r2, [r3, #12]
 8009bcc:	e00b      	b.n	8009be6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	8adb      	ldrh	r3, [r3, #22]
 8009bd6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	4828      	ldr	r0, [pc, #160]	; (8009c7c <tcp_abandon+0x174>)
 8009bdc:	f000 ff76 	bl	800aacc <tcp_pcb_remove>
 8009be0:	4b27      	ldr	r3, [pc, #156]	; (8009c80 <tcp_abandon+0x178>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d004      	beq.n	8009bf8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fd1a 	bl	800a62c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fd11 	bl	800a62c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d004      	beq.n	8009c1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fd08 	bl	800a62c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00e      	beq.n	8009c40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	8b12      	ldrh	r2, [r2, #24]
 8009c2c:	9202      	str	r2, [sp, #8]
 8009c2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c30:	9201      	str	r2, [sp, #4]
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	460b      	mov	r3, r1
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	69b9      	ldr	r1, [r7, #24]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f004 fccc 	bl	800e5d8 <tcp_rst>
    }
    last_state = pcb->state;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	7d1b      	ldrb	r3, [r3, #20]
 8009c44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fd3c 	bl	80096c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <tcp_abandon+0x154>
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f06f 010c 	mvn.w	r1, #12
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	4798      	blx	r3
  }
}
 8009c5c:	3728      	adds	r7, #40	; 0x28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	0801365c 	.word	0x0801365c
 8009c68:	080137a0 	.word	0x080137a0
 8009c6c:	080136a0 	.word	0x080136a0
 8009c70:	080137bc 	.word	0x080137bc
 8009c74:	24003420 	.word	0x24003420
 8009c78:	2400341c 	.word	0x2400341c
 8009c7c:	24003410 	.word	0x24003410
 8009c80:	2400340c 	.word	0x2400340c

08009c84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ff3a 	bl	8009b08 <tcp_abandon>
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <tcp_update_rcv_ann_wnd+0x1c>
 8009caa:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <tcp_update_rcv_ann_wnd+0xa4>)
 8009cac:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009cb0:	4924      	ldr	r1, [pc, #144]	; (8009d44 <tcp_update_rcv_ann_wnd+0xa8>)
 8009cb2:	4825      	ldr	r0, [pc, #148]	; (8009d48 <tcp_update_rcv_ann_wnd+0xac>)
 8009cb4:	f008 f834 	bl	8011d20 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009ccc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009cd0:	bf28      	it	cs
 8009cd2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009cd6:	b292      	uxth	r2, r2
 8009cd8:	4413      	add	r3, r2
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	db08      	blt.n	8009cf4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	e020      	b.n	8009d36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd03      	ble.n	8009d0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d08:	e014      	b.n	8009d34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d1c:	d306      	bcc.n	8009d2c <tcp_update_rcv_ann_wnd+0x90>
 8009d1e:	4b08      	ldr	r3, [pc, #32]	; (8009d40 <tcp_update_rcv_ann_wnd+0xa4>)
 8009d20:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009d24:	4909      	ldr	r1, [pc, #36]	; (8009d4c <tcp_update_rcv_ann_wnd+0xb0>)
 8009d26:	4808      	ldr	r0, [pc, #32]	; (8009d48 <tcp_update_rcv_ann_wnd+0xac>)
 8009d28:	f007 fffa 	bl	8011d20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009d34:	2300      	movs	r3, #0
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	0801365c 	.word	0x0801365c
 8009d44:	080138b8 	.word	0x080138b8
 8009d48:	080136a0 	.word	0x080136a0
 8009d4c:	080138dc 	.word	0x080138dc

08009d50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d107      	bne.n	8009d72 <tcp_recved+0x22>
 8009d62:	4b1f      	ldr	r3, [pc, #124]	; (8009de0 <tcp_recved+0x90>)
 8009d64:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009d68:	491e      	ldr	r1, [pc, #120]	; (8009de4 <tcp_recved+0x94>)
 8009d6a:	481f      	ldr	r0, [pc, #124]	; (8009de8 <tcp_recved+0x98>)
 8009d6c:	f007 ffd8 	bl	8011d20 <iprintf>
 8009d70:	e032      	b.n	8009dd8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7d1b      	ldrb	r3, [r3, #20]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d106      	bne.n	8009d88 <tcp_recved+0x38>
 8009d7a:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <tcp_recved+0x90>)
 8009d7c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8009d80:	491a      	ldr	r1, [pc, #104]	; (8009dec <tcp_recved+0x9c>)
 8009d82:	4819      	ldr	r0, [pc, #100]	; (8009de8 <tcp_recved+0x98>)
 8009d84:	f007 ffcc 	bl	8011d20 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d8c:	887b      	ldrh	r3, [r7, #2]
 8009d8e:	4413      	add	r3, r2
 8009d90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009d92:	89fb      	ldrh	r3, [r7, #14]
 8009d94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d98:	d804      	bhi.n	8009da4 <tcp_recved+0x54>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d9e:	89fa      	ldrh	r2, [r7, #14]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d204      	bcs.n	8009dae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009daa:	851a      	strh	r2, [r3, #40]	; 0x28
 8009dac:	e002      	b.n	8009db4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	89fa      	ldrh	r2, [r7, #14]
 8009db2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff71 	bl	8009c9c <tcp_update_rcv_ann_wnd>
 8009dba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009dc2:	d309      	bcc.n	8009dd8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8b5b      	ldrh	r3, [r3, #26]
 8009dc8:	f043 0302 	orr.w	r3, r3, #2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f003 fe3a 	bl	800da4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	0801365c 	.word	0x0801365c
 8009de4:	080138f8 	.word	0x080138f8
 8009de8:	080136a0 	.word	0x080136a0
 8009dec:	08013910 	.word	0x08013910

08009df0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009df0:	b5b0      	push	{r4, r5, r7, lr}
 8009df2:	b090      	sub	sp, #64	; 0x40
 8009df4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009dfc:	4b94      	ldr	r3, [pc, #592]	; (800a050 <tcp_slowtmr+0x260>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	4a93      	ldr	r2, [pc, #588]	; (800a050 <tcp_slowtmr+0x260>)
 8009e04:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009e06:	4b93      	ldr	r3, [pc, #588]	; (800a054 <tcp_slowtmr+0x264>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	4b91      	ldr	r3, [pc, #580]	; (800a054 <tcp_slowtmr+0x264>)
 8009e10:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009e16:	4b90      	ldr	r3, [pc, #576]	; (800a058 <tcp_slowtmr+0x268>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009e1c:	e29d      	b.n	800a35a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	7d1b      	ldrb	r3, [r3, #20]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d106      	bne.n	8009e34 <tcp_slowtmr+0x44>
 8009e26:	4b8d      	ldr	r3, [pc, #564]	; (800a05c <tcp_slowtmr+0x26c>)
 8009e28:	f240 42be 	movw	r2, #1214	; 0x4be
 8009e2c:	498c      	ldr	r1, [pc, #560]	; (800a060 <tcp_slowtmr+0x270>)
 8009e2e:	488d      	ldr	r0, [pc, #564]	; (800a064 <tcp_slowtmr+0x274>)
 8009e30:	f007 ff76 	bl	8011d20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	7d1b      	ldrb	r3, [r3, #20]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d106      	bne.n	8009e4a <tcp_slowtmr+0x5a>
 8009e3c:	4b87      	ldr	r3, [pc, #540]	; (800a05c <tcp_slowtmr+0x26c>)
 8009e3e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009e42:	4989      	ldr	r1, [pc, #548]	; (800a068 <tcp_slowtmr+0x278>)
 8009e44:	4887      	ldr	r0, [pc, #540]	; (800a064 <tcp_slowtmr+0x274>)
 8009e46:	f007 ff6b 	bl	8011d20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	7d1b      	ldrb	r3, [r3, #20]
 8009e4e:	2b0a      	cmp	r3, #10
 8009e50:	d106      	bne.n	8009e60 <tcp_slowtmr+0x70>
 8009e52:	4b82      	ldr	r3, [pc, #520]	; (800a05c <tcp_slowtmr+0x26c>)
 8009e54:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009e58:	4984      	ldr	r1, [pc, #528]	; (800a06c <tcp_slowtmr+0x27c>)
 8009e5a:	4882      	ldr	r0, [pc, #520]	; (800a064 <tcp_slowtmr+0x274>)
 8009e5c:	f007 ff60 	bl	8011d20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	7f9a      	ldrb	r2, [r3, #30]
 8009e64:	4b7b      	ldr	r3, [pc, #492]	; (800a054 <tcp_slowtmr+0x264>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d105      	bne.n	8009e78 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009e76:	e270      	b.n	800a35a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009e78:	4b76      	ldr	r3, [pc, #472]	; (800a054 <tcp_slowtmr+0x264>)
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d10a      	bne.n	8009eaa <tcp_slowtmr+0xba>
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d905      	bls.n	8009eaa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ea8:	e11e      	b.n	800a0e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eb0:	2b0b      	cmp	r3, #11
 8009eb2:	d905      	bls.n	8009ec0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ebe:	e113      	b.n	800a0e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d075      	beq.n	8009fb6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d006      	beq.n	8009ee0 <tcp_slowtmr+0xf0>
 8009ed2:	4b62      	ldr	r3, [pc, #392]	; (800a05c <tcp_slowtmr+0x26c>)
 8009ed4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009ed8:	4965      	ldr	r1, [pc, #404]	; (800a070 <tcp_slowtmr+0x280>)
 8009eda:	4862      	ldr	r0, [pc, #392]	; (800a064 <tcp_slowtmr+0x274>)
 8009edc:	f007 ff20 	bl	8011d20 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d106      	bne.n	8009ef6 <tcp_slowtmr+0x106>
 8009ee8:	4b5c      	ldr	r3, [pc, #368]	; (800a05c <tcp_slowtmr+0x26c>)
 8009eea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009eee:	4961      	ldr	r1, [pc, #388]	; (800a074 <tcp_slowtmr+0x284>)
 8009ef0:	485c      	ldr	r0, [pc, #368]	; (800a064 <tcp_slowtmr+0x274>)
 8009ef2:	f007 ff15 	bl	8011d20 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009efc:	2b0b      	cmp	r3, #11
 8009efe:	d905      	bls.n	8009f0c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f04:	3301      	adds	r3, #1
 8009f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f0a:	e0ed      	b.n	800a0e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009f12:	3b01      	subs	r3, #1
 8009f14:	4a58      	ldr	r2, [pc, #352]	; (800a078 <tcp_slowtmr+0x288>)
 8009f16:	5cd3      	ldrb	r3, [r2, r3]
 8009f18:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009f20:	7c7a      	ldrb	r2, [r7, #17]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d907      	bls.n	8009f36 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009f3c:	7c7a      	ldrb	r2, [r7, #17]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	f200 80d2 	bhi.w	800a0e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009f44:	2301      	movs	r3, #1
 8009f46:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d108      	bne.n	8009f64 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f54:	f004 fc34 	bl	800e7c0 <tcp_zero_window_probe>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d014      	beq.n	8009f88 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009f5e:	2300      	movs	r3, #0
 8009f60:	623b      	str	r3, [r7, #32]
 8009f62:	e011      	b.n	8009f88 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f6e:	f003 fae5 	bl	800d53c <tcp_split_unsent_seg>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d107      	bne.n	8009f88 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f7a:	f003 fd67 	bl	800da4c <tcp_output>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 80ac 	beq.w	800a0e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009f9e:	2b06      	cmp	r3, #6
 8009fa0:	f200 80a2 	bhi.w	800a0e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009faa:	3301      	adds	r3, #1
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009fb4:	e098      	b.n	800a0e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	db0f      	blt.n	8009fe0 <tcp_slowtmr+0x1f0>
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fc6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d008      	beq.n	8009fe0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	b21a      	sxth	r2, r3
 8009fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fde:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009fec:	429a      	cmp	r2, r3
 8009fee:	db7b      	blt.n	800a0e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ff2:	f004 f823 	bl	800e03c <tcp_rexmit_rto_prepare>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <tcp_slowtmr+0x21c>
 8009ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a000:	2b00      	cmp	r3, #0
 800a002:	d171      	bne.n	800a0e8 <tcp_slowtmr+0x2f8>
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d06d      	beq.n	800a0e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	7d1b      	ldrb	r3, [r3, #20]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d03a      	beq.n	800a08a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a01a:	2b0c      	cmp	r3, #12
 800a01c:	bf28      	it	cs
 800a01e:	230c      	movcs	r3, #12
 800a020:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a028:	10db      	asrs	r3, r3, #3
 800a02a:	b21b      	sxth	r3, r3
 800a02c:	461a      	mov	r2, r3
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a034:	4413      	add	r3, r2
 800a036:	7efa      	ldrb	r2, [r7, #27]
 800a038:	4910      	ldr	r1, [pc, #64]	; (800a07c <tcp_slowtmr+0x28c>)
 800a03a:	5c8a      	ldrb	r2, [r1, r2]
 800a03c:	4093      	lsls	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a046:	4293      	cmp	r3, r2
 800a048:	dc1a      	bgt.n	800a080 <tcp_slowtmr+0x290>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	b21a      	sxth	r2, r3
 800a04e:	e019      	b.n	800a084 <tcp_slowtmr+0x294>
 800a050:	24003414 	.word	0x24003414
 800a054:	240000ee 	.word	0x240000ee
 800a058:	24003410 	.word	0x24003410
 800a05c:	0801365c 	.word	0x0801365c
 800a060:	080139a0 	.word	0x080139a0
 800a064:	080136a0 	.word	0x080136a0
 800a068:	080139cc 	.word	0x080139cc
 800a06c:	080139f8 	.word	0x080139f8
 800a070:	08013a28 	.word	0x08013a28
 800a074:	08013a5c 	.word	0x08013a5c
 800a078:	08015644 	.word	0x08015644
 800a07c:	08015634 	.word	0x08015634
 800a080:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2200      	movs	r2, #0
 800a08e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a09c:	4293      	cmp	r3, r2
 800a09e:	bf28      	it	cs
 800a0a0:	4613      	movcs	r3, r2
 800a0a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a0a4:	8a7b      	ldrh	r3, [r7, #18]
 800a0a6:	085b      	lsrs	r3, r3, #1
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d206      	bcs.n	800a0d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0e4:	f004 f81a 	bl	800e11c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	7d1b      	ldrb	r3, [r3, #20]
 800a0ec:	2b06      	cmp	r3, #6
 800a0ee:	d111      	bne.n	800a114 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	8b5b      	ldrh	r3, [r3, #26]
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00b      	beq.n	800a114 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a0fc:	4b9c      	ldr	r3, [pc, #624]	; (800a370 <tcp_slowtmr+0x580>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b28      	cmp	r3, #40	; 0x28
 800a108:	d904      	bls.n	800a114 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a10a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a10e:	3301      	adds	r3, #1
 800a110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	7a5b      	ldrb	r3, [r3, #9]
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d04a      	beq.n	800a1b6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a124:	2b04      	cmp	r3, #4
 800a126:	d003      	beq.n	800a130 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a12c:	2b07      	cmp	r3, #7
 800a12e:	d142      	bne.n	800a1b6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a130:	4b8f      	ldr	r3, [pc, #572]	; (800a370 <tcp_slowtmr+0x580>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a140:	4b8c      	ldr	r3, [pc, #560]	; (800a374 <tcp_slowtmr+0x584>)
 800a142:	440b      	add	r3, r1
 800a144:	498c      	ldr	r1, [pc, #560]	; (800a378 <tcp_slowtmr+0x588>)
 800a146:	fba1 1303 	umull	r1, r3, r1, r3
 800a14a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d90a      	bls.n	800a166 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a154:	3301      	adds	r3, #1
 800a156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a15a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a15e:	3301      	adds	r3, #1
 800a160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a164:	e027      	b.n	800a1b6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a166:	4b82      	ldr	r3, [pc, #520]	; (800a370 <tcp_slowtmr+0x580>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a172:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a17c:	4618      	mov	r0, r3
 800a17e:	4b7f      	ldr	r3, [pc, #508]	; (800a37c <tcp_slowtmr+0x58c>)
 800a180:	fb03 f300 	mul.w	r3, r3, r0
 800a184:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a186:	497c      	ldr	r1, [pc, #496]	; (800a378 <tcp_slowtmr+0x588>)
 800a188:	fba1 1303 	umull	r1, r3, r1, r3
 800a18c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a18e:	429a      	cmp	r2, r3
 800a190:	d911      	bls.n	800a1b6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a194:	f004 fad4 	bl	800e740 <tcp_keepalive>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a19e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d107      	bne.n	800a1b6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d011      	beq.n	800a1e2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a1be:	4b6c      	ldr	r3, [pc, #432]	; (800a370 <tcp_slowtmr+0x580>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	440b      	add	r3, r1
 800a1d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d302      	bcc.n	800a1e2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a1dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1de:	f000 fdd9 	bl	800ad94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e4:	7d1b      	ldrb	r3, [r3, #20]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d10b      	bne.n	800a202 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1ea:	4b61      	ldr	r3, [pc, #388]	; (800a370 <tcp_slowtmr+0x580>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b28      	cmp	r3, #40	; 0x28
 800a1f6:	d904      	bls.n	800a202 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	7d1b      	ldrb	r3, [r3, #20]
 800a206:	2b09      	cmp	r3, #9
 800a208:	d10b      	bne.n	800a222 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a20a:	4b59      	ldr	r3, [pc, #356]	; (800a370 <tcp_slowtmr+0x580>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2bf0      	cmp	r3, #240	; 0xf0
 800a216:	d904      	bls.n	800a222 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a21c:	3301      	adds	r3, #1
 800a21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a226:	2b00      	cmp	r3, #0
 800a228:	d060      	beq.n	800a2ec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a230:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a234:	f000 fbfa 	bl	800aa2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d010      	beq.n	800a260 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a23e:	4b50      	ldr	r3, [pc, #320]	; (800a380 <tcp_slowtmr+0x590>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a244:	429a      	cmp	r2, r3
 800a246:	d106      	bne.n	800a256 <tcp_slowtmr+0x466>
 800a248:	4b4e      	ldr	r3, [pc, #312]	; (800a384 <tcp_slowtmr+0x594>)
 800a24a:	f240 526d 	movw	r2, #1389	; 0x56d
 800a24e:	494e      	ldr	r1, [pc, #312]	; (800a388 <tcp_slowtmr+0x598>)
 800a250:	484e      	ldr	r0, [pc, #312]	; (800a38c <tcp_slowtmr+0x59c>)
 800a252:	f007 fd65 	bl	8011d20 <iprintf>
        prev->next = pcb->next;
 800a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	60da      	str	r2, [r3, #12]
 800a25e:	e00f      	b.n	800a280 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a260:	4b47      	ldr	r3, [pc, #284]	; (800a380 <tcp_slowtmr+0x590>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a266:	429a      	cmp	r2, r3
 800a268:	d006      	beq.n	800a278 <tcp_slowtmr+0x488>
 800a26a:	4b46      	ldr	r3, [pc, #280]	; (800a384 <tcp_slowtmr+0x594>)
 800a26c:	f240 5271 	movw	r2, #1393	; 0x571
 800a270:	4947      	ldr	r1, [pc, #284]	; (800a390 <tcp_slowtmr+0x5a0>)
 800a272:	4846      	ldr	r0, [pc, #280]	; (800a38c <tcp_slowtmr+0x59c>)
 800a274:	f007 fd54 	bl	8011d20 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	4a40      	ldr	r2, [pc, #256]	; (800a380 <tcp_slowtmr+0x590>)
 800a27e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a284:	2b00      	cmp	r3, #0
 800a286:	d013      	beq.n	800a2b0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a290:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	3304      	adds	r3, #4
 800a296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a298:	8ad2      	ldrh	r2, [r2, #22]
 800a29a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a29c:	8b09      	ldrh	r1, [r1, #24]
 800a29e:	9102      	str	r1, [sp, #8]
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2ac:	f004 f994 	bl	800e5d8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b8:	7d1b      	ldrb	r3, [r3, #20]
 800a2ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a2c6:	6838      	ldr	r0, [r7, #0]
 800a2c8:	f7ff f9fc 	bl	80096c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a2cc:	4b31      	ldr	r3, [pc, #196]	; (800a394 <tcp_slowtmr+0x5a4>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <tcp_slowtmr+0x4f2>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f06f 010c 	mvn.w	r1, #12
 800a2de:	68b8      	ldr	r0, [r7, #8]
 800a2e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	; (800a394 <tcp_slowtmr+0x5a4>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d037      	beq.n	800a35a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a2ea:	e592      	b.n	8009e12 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	7f1b      	ldrb	r3, [r3, #28]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a304:	7f1a      	ldrb	r2, [r3, #28]
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	7f5b      	ldrb	r3, [r3, #29]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d325      	bcc.n	800a35a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	2200      	movs	r2, #0
 800a312:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a314:	4b1f      	ldr	r3, [pc, #124]	; (800a394 <tcp_slowtmr+0x5a4>)
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <tcp_slowtmr+0x54c>
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a32c:	6912      	ldr	r2, [r2, #16]
 800a32e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a330:	4610      	mov	r0, r2
 800a332:	4798      	blx	r3
 800a334:	4603      	mov	r3, r0
 800a336:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a33a:	e002      	b.n	800a342 <tcp_slowtmr+0x552>
 800a33c:	2300      	movs	r3, #0
 800a33e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a342:	4b14      	ldr	r3, [pc, #80]	; (800a394 <tcp_slowtmr+0x5a4>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d000      	beq.n	800a34c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a34a:	e562      	b.n	8009e12 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a34c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a350:	2b00      	cmp	r3, #0
 800a352:	d102      	bne.n	800a35a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a356:	f003 fb79 	bl	800da4c <tcp_output>
  while (pcb != NULL) {
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f47f ad5e 	bne.w	8009e1e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a366:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <tcp_slowtmr+0x5a8>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a36c:	e069      	b.n	800a442 <tcp_slowtmr+0x652>
 800a36e:	bf00      	nop
 800a370:	24003414 	.word	0x24003414
 800a374:	000a4cb8 	.word	0x000a4cb8
 800a378:	10624dd3 	.word	0x10624dd3
 800a37c:	000124f8 	.word	0x000124f8
 800a380:	24003410 	.word	0x24003410
 800a384:	0801365c 	.word	0x0801365c
 800a388:	08013a94 	.word	0x08013a94
 800a38c:	080136a0 	.word	0x080136a0
 800a390:	08013ac0 	.word	0x08013ac0
 800a394:	2400340c 	.word	0x2400340c
 800a398:	24003420 	.word	0x24003420
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	2b0a      	cmp	r3, #10
 800a3a2:	d006      	beq.n	800a3b2 <tcp_slowtmr+0x5c2>
 800a3a4:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <tcp_slowtmr+0x660>)
 800a3a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a3aa:	492a      	ldr	r1, [pc, #168]	; (800a454 <tcp_slowtmr+0x664>)
 800a3ac:	482a      	ldr	r0, [pc, #168]	; (800a458 <tcp_slowtmr+0x668>)
 800a3ae:	f007 fcb7 	bl	8011d20 <iprintf>
    pcb_remove = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a3b8:	4b28      	ldr	r3, [pc, #160]	; (800a45c <tcp_slowtmr+0x66c>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2bf0      	cmp	r3, #240	; 0xf0
 800a3c4:	d904      	bls.n	800a3d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d02f      	beq.n	800a438 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3da:	f000 fb27 	bl	800aa2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d010      	beq.n	800a406 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a3e4:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <tcp_slowtmr+0x670>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d106      	bne.n	800a3fc <tcp_slowtmr+0x60c>
 800a3ee:	4b18      	ldr	r3, [pc, #96]	; (800a450 <tcp_slowtmr+0x660>)
 800a3f0:	f240 52af 	movw	r2, #1455	; 0x5af
 800a3f4:	491b      	ldr	r1, [pc, #108]	; (800a464 <tcp_slowtmr+0x674>)
 800a3f6:	4818      	ldr	r0, [pc, #96]	; (800a458 <tcp_slowtmr+0x668>)
 800a3f8:	f007 fc92 	bl	8011d20 <iprintf>
        prev->next = pcb->next;
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	68da      	ldr	r2, [r3, #12]
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	60da      	str	r2, [r3, #12]
 800a404:	e00f      	b.n	800a426 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <tcp_slowtmr+0x670>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d006      	beq.n	800a41e <tcp_slowtmr+0x62e>
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <tcp_slowtmr+0x660>)
 800a412:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a416:	4914      	ldr	r1, [pc, #80]	; (800a468 <tcp_slowtmr+0x678>)
 800a418:	480f      	ldr	r0, [pc, #60]	; (800a458 <tcp_slowtmr+0x668>)
 800a41a:	f007 fc81 	bl	8011d20 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	4a0f      	ldr	r2, [pc, #60]	; (800a460 <tcp_slowtmr+0x670>)
 800a424:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a430:	69f8      	ldr	r0, [r7, #28]
 800a432:	f7ff f947 	bl	80096c4 <tcp_free>
 800a436:	e004      	b.n	800a442 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1a9      	bne.n	800a39c <tcp_slowtmr+0x5ac>
    }
  }
}
 800a448:	bf00      	nop
 800a44a:	3730      	adds	r7, #48	; 0x30
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bdb0      	pop	{r4, r5, r7, pc}
 800a450:	0801365c 	.word	0x0801365c
 800a454:	08013aec 	.word	0x08013aec
 800a458:	080136a0 	.word	0x080136a0
 800a45c:	24003414 	.word	0x24003414
 800a460:	24003420 	.word	0x24003420
 800a464:	08013b1c 	.word	0x08013b1c
 800a468:	08013b44 	.word	0x08013b44

0800a46c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a472:	4b2d      	ldr	r3, [pc, #180]	; (800a528 <tcp_fasttmr+0xbc>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	4b2b      	ldr	r3, [pc, #172]	; (800a528 <tcp_fasttmr+0xbc>)
 800a47c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a47e:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <tcp_fasttmr+0xc0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a484:	e048      	b.n	800a518 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7f9a      	ldrb	r2, [r3, #30]
 800a48a:	4b27      	ldr	r3, [pc, #156]	; (800a528 <tcp_fasttmr+0xbc>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d03f      	beq.n	800a512 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a492:	4b25      	ldr	r3, [pc, #148]	; (800a528 <tcp_fasttmr+0xbc>)
 800a494:	781a      	ldrb	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	8b5b      	ldrh	r3, [r3, #26]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d010      	beq.n	800a4c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	8b5b      	ldrh	r3, [r3, #26]
 800a4aa:	f043 0302 	orr.w	r3, r3, #2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f003 fac9 	bl	800da4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	8b5b      	ldrh	r3, [r3, #26]
 800a4be:	f023 0303 	bic.w	r3, r3, #3
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	8b5b      	ldrh	r3, [r3, #26]
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d009      	beq.n	800a4e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8b5b      	ldrh	r3, [r3, #26]
 800a4d8:	f023 0308 	bic.w	r3, r3, #8
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fa7e 	bl	80099e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <tcp_fasttmr+0xc4>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f819 	bl	800a534 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a502:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <tcp_fasttmr+0xc4>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d000      	beq.n	800a50c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a50a:	e7b8      	b.n	800a47e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	607b      	str	r3, [r7, #4]
 800a510:	e002      	b.n	800a518 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1b3      	bne.n	800a486 <tcp_fasttmr+0x1a>
    }
  }
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	240000ee 	.word	0x240000ee
 800a52c:	24003410 	.word	0x24003410
 800a530:	2400340c 	.word	0x2400340c

0800a534 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <tcp_process_refused_data+0x22>
 800a542:	4b37      	ldr	r3, [pc, #220]	; (800a620 <tcp_process_refused_data+0xec>)
 800a544:	f240 6209 	movw	r2, #1545	; 0x609
 800a548:	4936      	ldr	r1, [pc, #216]	; (800a624 <tcp_process_refused_data+0xf0>)
 800a54a:	4837      	ldr	r0, [pc, #220]	; (800a628 <tcp_process_refused_data+0xf4>)
 800a54c:	f007 fbe8 	bl	8011d20 <iprintf>
 800a550:	f06f 030f 	mvn.w	r3, #15
 800a554:	e060      	b.n	800a618 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55a:	7b5b      	ldrb	r3, [r3, #13]
 800a55c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a562:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <tcp_process_refused_data+0x58>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6918      	ldr	r0, [r3, #16]
 800a57e:	2300      	movs	r3, #0
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	6879      	ldr	r1, [r7, #4]
 800a584:	47a0      	blx	r4
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]
 800a58a:	e007      	b.n	800a59c <tcp_process_refused_data+0x68>
 800a58c:	2300      	movs	r3, #0
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	2000      	movs	r0, #0
 800a594:	f000 f8a2 	bl	800a6dc <tcp_recv_null>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d12a      	bne.n	800a5fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	f003 0320 	and.w	r3, r3, #32
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d033      	beq.n	800a616 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a5b6:	d005      	beq.n	800a5c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5bc:	3301      	adds	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00b      	beq.n	800a5e6 <tcp_process_refused_data+0xb2>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6918      	ldr	r0, [r3, #16]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	47a0      	blx	r4
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]
 800a5e4:	e001      	b.n	800a5ea <tcp_process_refused_data+0xb6>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ee:	f113 0f0d 	cmn.w	r3, #13
 800a5f2:	d110      	bne.n	800a616 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a5f4:	f06f 030c 	mvn.w	r3, #12
 800a5f8:	e00e      	b.n	800a618 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5fe:	f113 0f0d 	cmn.w	r3, #13
 800a602:	d102      	bne.n	800a60a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a604:	f06f 030c 	mvn.w	r3, #12
 800a608:	e006      	b.n	800a618 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a610:	f06f 0304 	mvn.w	r3, #4
 800a614:	e000      	b.n	800a618 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd90      	pop	{r4, r7, pc}
 800a620:	0801365c 	.word	0x0801365c
 800a624:	08013b6c 	.word	0x08013b6c
 800a628:	080136a0 	.word	0x080136a0

0800a62c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a634:	e007      	b.n	800a646 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f809 	bl	800a654 <tcp_seg_free>
    seg = next;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f4      	bne.n	800a636 <tcp_segs_free+0xa>
  }
}
 800a64c:	bf00      	nop
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00c      	beq.n	800a67c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fce6 	bl	8009040 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	2003      	movs	r0, #3
 800a678:	f7fd fe70 	bl	800835c <memp_free>
  }
}
 800a67c:	bf00      	nop
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d106      	bne.n	800a6a0 <tcp_seg_copy+0x1c>
 800a692:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <tcp_seg_copy+0x4c>)
 800a694:	f240 6282 	movw	r2, #1666	; 0x682
 800a698:	490e      	ldr	r1, [pc, #56]	; (800a6d4 <tcp_seg_copy+0x50>)
 800a69a:	480f      	ldr	r0, [pc, #60]	; (800a6d8 <tcp_seg_copy+0x54>)
 800a69c:	f007 fb40 	bl	8011d20 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a6a0:	2003      	movs	r0, #3
 800a6a2:	f7fd fdeb 	bl	800827c <memp_malloc>
 800a6a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <tcp_seg_copy+0x2e>
    return NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e00a      	b.n	800a6c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a6b2:	2210      	movs	r2, #16
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f007 fb1f 	bl	8011cfa <memcpy>
  pbuf_ref(cseg->p);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe fd5d 	bl	8009180 <pbuf_ref>
  return cseg;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	0801365c 	.word	0x0801365c
 800a6d4:	08013bb0 	.word	0x08013bb0
 800a6d8:	080136a0 	.word	0x080136a0

0800a6dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d109      	bne.n	800a704 <tcp_recv_null+0x28>
 800a6f0:	4b12      	ldr	r3, [pc, #72]	; (800a73c <tcp_recv_null+0x60>)
 800a6f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a6f6:	4912      	ldr	r1, [pc, #72]	; (800a740 <tcp_recv_null+0x64>)
 800a6f8:	4812      	ldr	r0, [pc, #72]	; (800a744 <tcp_recv_null+0x68>)
 800a6fa:	f007 fb11 	bl	8011d20 <iprintf>
 800a6fe:	f06f 030f 	mvn.w	r3, #15
 800a702:	e016      	b.n	800a732 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d009      	beq.n	800a71e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	891b      	ldrh	r3, [r3, #8]
 800a70e:	4619      	mov	r1, r3
 800a710:	68b8      	ldr	r0, [r7, #8]
 800a712:	f7ff fb1d 	bl	8009d50 <tcp_recved>
    pbuf_free(p);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7fe fc92 	bl	8009040 <pbuf_free>
 800a71c:	e008      	b.n	800a730 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a71e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d104      	bne.n	800a730 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a726:	68b8      	ldr	r0, [r7, #8]
 800a728:	f7ff f9c2 	bl	8009ab0 <tcp_close>
 800a72c:	4603      	mov	r3, r0
 800a72e:	e000      	b.n	800a732 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	0801365c 	.word	0x0801365c
 800a740:	08013bcc 	.word	0x08013bcc
 800a744:	080136a0 	.word	0x080136a0

0800a748 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a756:	2b00      	cmp	r3, #0
 800a758:	db01      	blt.n	800a75e <tcp_kill_prio+0x16>
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	e000      	b.n	800a760 <tcp_kill_prio+0x18>
 800a75e:	237f      	movs	r3, #127	; 0x7f
 800a760:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d034      	beq.n	800a7d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a776:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <tcp_kill_prio+0x94>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	e01f      	b.n	800a7be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	7d5b      	ldrb	r3, [r3, #21]
 800a782:	7afa      	ldrb	r2, [r7, #11]
 800a784:	429a      	cmp	r2, r3
 800a786:	d80c      	bhi.n	800a7a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a78c:	7afa      	ldrb	r2, [r7, #11]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d112      	bne.n	800a7b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a792:	4b13      	ldr	r3, [pc, #76]	; (800a7e0 <tcp_kill_prio+0x98>)
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d80a      	bhi.n	800a7b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a7a2:	4b0f      	ldr	r3, [pc, #60]	; (800a7e0 <tcp_kill_prio+0x98>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	7d5b      	ldrb	r3, [r3, #21]
 800a7b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	617b      	str	r3, [r7, #20]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1dc      	bne.n	800a77e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d004      	beq.n	800a7d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7ff fa5a 	bl	8009c84 <tcp_abort>
 800a7d0:	e000      	b.n	800a7d4 <tcp_kill_prio+0x8c>
    return;
 800a7d2:	bf00      	nop
  }
}
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	24003410 	.word	0x24003410
 800a7e0:	24003414 	.word	0x24003414

0800a7e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d009      	beq.n	800a808 <tcp_kill_state+0x24>
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b09      	cmp	r3, #9
 800a7f8:	d006      	beq.n	800a808 <tcp_kill_state+0x24>
 800a7fa:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <tcp_kill_state+0x80>)
 800a7fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a800:	4919      	ldr	r1, [pc, #100]	; (800a868 <tcp_kill_state+0x84>)
 800a802:	481a      	ldr	r0, [pc, #104]	; (800a86c <tcp_kill_state+0x88>)
 800a804:	f007 fa8c 	bl	8011d20 <iprintf>

  inactivity = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a810:	4b17      	ldr	r3, [pc, #92]	; (800a870 <tcp_kill_state+0x8c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	617b      	str	r3, [r7, #20]
 800a816:	e017      	b.n	800a848 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	7d1b      	ldrb	r3, [r3, #20]
 800a81c:	79fa      	ldrb	r2, [r7, #7]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d10f      	bne.n	800a842 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a822:	4b14      	ldr	r3, [pc, #80]	; (800a874 <tcp_kill_state+0x90>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d807      	bhi.n	800a842 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a832:	4b10      	ldr	r3, [pc, #64]	; (800a874 <tcp_kill_state+0x90>)
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e4      	bne.n	800a818 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a854:	2100      	movs	r1, #0
 800a856:	6938      	ldr	r0, [r7, #16]
 800a858:	f7ff f956 	bl	8009b08 <tcp_abandon>
  }
}
 800a85c:	bf00      	nop
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	0801365c 	.word	0x0801365c
 800a868:	08013be8 	.word	0x08013be8
 800a86c:	080136a0 	.word	0x080136a0
 800a870:	24003410 	.word	0x24003410
 800a874:	24003414 	.word	0x24003414

0800a878 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a886:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <tcp_kill_timewait+0x58>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e012      	b.n	800a8b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a88e:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <tcp_kill_timewait+0x5c>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d807      	bhi.n	800a8ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a89e:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <tcp_kill_timewait+0x5c>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e9      	bne.n	800a88e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a8c0:	68b8      	ldr	r0, [r7, #8]
 800a8c2:	f7ff f9df 	bl	8009c84 <tcp_abort>
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	24003420 	.word	0x24003420
 800a8d4:	24003414 	.word	0x24003414

0800a8d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <tcp_handle_closepend+0x48>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a8e4:	e014      	b.n	800a910 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8b5b      	ldrh	r3, [r3, #26]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d009      	beq.n	800a90c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	8b5b      	ldrh	r3, [r3, #26]
 800a8fc:	f023 0308 	bic.w	r3, r3, #8
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff f86c 	bl	80099e4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e7      	bne.n	800a8e6 <tcp_handle_closepend+0xe>
  }
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	24003410 	.word	0x24003410

0800a924 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a92e:	2001      	movs	r0, #1
 800a930:	f7fd fca4 	bl	800827c <memp_malloc>
 800a934:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d126      	bne.n	800a98a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a93c:	f7ff ffcc 	bl	800a8d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a940:	f7ff ff9a 	bl	800a878 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a944:	2001      	movs	r0, #1
 800a946:	f7fd fc99 	bl	800827c <memp_malloc>
 800a94a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d11b      	bne.n	800a98a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a952:	2009      	movs	r0, #9
 800a954:	f7ff ff46 	bl	800a7e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a958:	2001      	movs	r0, #1
 800a95a:	f7fd fc8f 	bl	800827c <memp_malloc>
 800a95e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d111      	bne.n	800a98a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a966:	2008      	movs	r0, #8
 800a968:	f7ff ff3c 	bl	800a7e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a96c:	2001      	movs	r0, #1
 800a96e:	f7fd fc85 	bl	800827c <memp_malloc>
 800a972:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d107      	bne.n	800a98a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fee3 	bl	800a748 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a982:	2001      	movs	r0, #1
 800a984:	f7fd fc7a 	bl	800827c <memp_malloc>
 800a988:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d03f      	beq.n	800aa10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a990:	229c      	movs	r2, #156	; 0x9c
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f007 f9bb 	bl	8011d10 <memset>
    pcb->prio = prio;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	79fa      	ldrb	r2, [r7, #7]
 800a99e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a9a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a9b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	22ff      	movs	r2, #255	; 0xff
 800a9be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a9c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2206      	movs	r2, #6
 800a9cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2206      	movs	r2, #6
 800a9d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <tcp_alloc+0xf8>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <tcp_alloc+0xfc>)
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a9fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4a08      	ldr	r2, [pc, #32]	; (800aa24 <tcp_alloc+0x100>)
 800aa04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4a07      	ldr	r2, [pc, #28]	; (800aa28 <tcp_alloc+0x104>)
 800aa0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800aa10:	68fb      	ldr	r3, [r7, #12]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	24003414 	.word	0x24003414
 800aa20:	240000ee 	.word	0x240000ee
 800aa24:	0800a6dd 	.word	0x0800a6dd
 800aa28:	006ddd00 	.word	0x006ddd00

0800aa2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d107      	bne.n	800aa4a <tcp_pcb_purge+0x1e>
 800aa3a:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <tcp_pcb_purge+0x94>)
 800aa3c:	f640 0251 	movw	r2, #2129	; 0x851
 800aa40:	4920      	ldr	r1, [pc, #128]	; (800aac4 <tcp_pcb_purge+0x98>)
 800aa42:	4821      	ldr	r0, [pc, #132]	; (800aac8 <tcp_pcb_purge+0x9c>)
 800aa44:	f007 f96c 	bl	8011d20 <iprintf>
 800aa48:	e037      	b.n	800aaba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	7d1b      	ldrb	r3, [r3, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d033      	beq.n	800aaba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800aa56:	2b0a      	cmp	r3, #10
 800aa58:	d02f      	beq.n	800aaba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d02b      	beq.n	800aaba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fae6 	bl	8009040 <pbuf_free>
      pcb->refused_data = NULL;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f986 	bl	800ad94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff fdc9 	bl	800a62c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff fdc4 	bl	800a62c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	66da      	str	r2, [r3, #108]	; 0x6c
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	0801365c 	.word	0x0801365c
 800aac4:	08013ca8 	.word	0x08013ca8
 800aac8:	080136a0 	.word	0x080136a0

0800aacc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d106      	bne.n	800aaea <tcp_pcb_remove+0x1e>
 800aadc:	4b3e      	ldr	r3, [pc, #248]	; (800abd8 <tcp_pcb_remove+0x10c>)
 800aade:	f640 0283 	movw	r2, #2179	; 0x883
 800aae2:	493e      	ldr	r1, [pc, #248]	; (800abdc <tcp_pcb_remove+0x110>)
 800aae4:	483e      	ldr	r0, [pc, #248]	; (800abe0 <tcp_pcb_remove+0x114>)
 800aae6:	f007 f91b 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d106      	bne.n	800aafe <tcp_pcb_remove+0x32>
 800aaf0:	4b39      	ldr	r3, [pc, #228]	; (800abd8 <tcp_pcb_remove+0x10c>)
 800aaf2:	f640 0284 	movw	r2, #2180	; 0x884
 800aaf6:	493b      	ldr	r1, [pc, #236]	; (800abe4 <tcp_pcb_remove+0x118>)
 800aaf8:	4839      	ldr	r0, [pc, #228]	; (800abe0 <tcp_pcb_remove+0x114>)
 800aafa:	f007 f911 	bl	8011d20 <iprintf>

  TCP_RMV(pcblist, pcb);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d105      	bne.n	800ab14 <tcp_pcb_remove+0x48>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	601a      	str	r2, [r3, #0]
 800ab12:	e013      	b.n	800ab3c <tcp_pcb_remove+0x70>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	e00c      	b.n	800ab36 <tcp_pcb_remove+0x6a>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d104      	bne.n	800ab30 <tcp_pcb_remove+0x64>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	60da      	str	r2, [r3, #12]
 800ab2e:	e005      	b.n	800ab3c <tcp_pcb_remove+0x70>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1ef      	bne.n	800ab1c <tcp_pcb_remove+0x50>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ab42:	6838      	ldr	r0, [r7, #0]
 800ab44:	f7ff ff72 	bl	800aa2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	7d1b      	ldrb	r3, [r3, #20]
 800ab4c:	2b0a      	cmp	r3, #10
 800ab4e:	d013      	beq.n	800ab78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d00f      	beq.n	800ab78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	8b5b      	ldrh	r3, [r3, #26]
 800ab5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	8b5b      	ldrh	r3, [r3, #26]
 800ab68:	f043 0302 	orr.w	r3, r3, #2
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ab72:	6838      	ldr	r0, [r7, #0]
 800ab74:	f002 ff6a 	bl	800da4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	7d1b      	ldrb	r3, [r3, #20]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d020      	beq.n	800abc2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d006      	beq.n	800ab96 <tcp_pcb_remove+0xca>
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <tcp_pcb_remove+0x10c>)
 800ab8a:	f640 0293 	movw	r2, #2195	; 0x893
 800ab8e:	4916      	ldr	r1, [pc, #88]	; (800abe8 <tcp_pcb_remove+0x11c>)
 800ab90:	4813      	ldr	r0, [pc, #76]	; (800abe0 <tcp_pcb_remove+0x114>)
 800ab92:	f007 f8c5 	bl	8011d20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d006      	beq.n	800abac <tcp_pcb_remove+0xe0>
 800ab9e:	4b0e      	ldr	r3, [pc, #56]	; (800abd8 <tcp_pcb_remove+0x10c>)
 800aba0:	f640 0294 	movw	r2, #2196	; 0x894
 800aba4:	4911      	ldr	r1, [pc, #68]	; (800abec <tcp_pcb_remove+0x120>)
 800aba6:	480e      	ldr	r0, [pc, #56]	; (800abe0 <tcp_pcb_remove+0x114>)
 800aba8:	f007 f8ba 	bl	8011d20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <tcp_pcb_remove+0xf6>
 800abb4:	4b08      	ldr	r3, [pc, #32]	; (800abd8 <tcp_pcb_remove+0x10c>)
 800abb6:	f640 0296 	movw	r2, #2198	; 0x896
 800abba:	490d      	ldr	r1, [pc, #52]	; (800abf0 <tcp_pcb_remove+0x124>)
 800abbc:	4808      	ldr	r0, [pc, #32]	; (800abe0 <tcp_pcb_remove+0x114>)
 800abbe:	f007 f8af 	bl	8011d20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2200      	movs	r2, #0
 800abc6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800abce:	bf00      	nop
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	0801365c 	.word	0x0801365c
 800abdc:	08013cc4 	.word	0x08013cc4
 800abe0:	080136a0 	.word	0x080136a0
 800abe4:	08013ce0 	.word	0x08013ce0
 800abe8:	08013d00 	.word	0x08013d00
 800abec:	08013d18 	.word	0x08013d18
 800abf0:	08013d34 	.word	0x08013d34

0800abf4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <tcp_next_iss+0x1c>
 800ac02:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <tcp_next_iss+0x38>)
 800ac04:	f640 02af 	movw	r2, #2223	; 0x8af
 800ac08:	4909      	ldr	r1, [pc, #36]	; (800ac30 <tcp_next_iss+0x3c>)
 800ac0a:	480a      	ldr	r0, [pc, #40]	; (800ac34 <tcp_next_iss+0x40>)
 800ac0c:	f007 f888 	bl	8011d20 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ac10:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <tcp_next_iss+0x44>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <tcp_next_iss+0x48>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4413      	add	r3, r2
 800ac1a:	4a07      	ldr	r2, [pc, #28]	; (800ac38 <tcp_next_iss+0x44>)
 800ac1c:	6013      	str	r3, [r2, #0]
  return iss;
 800ac1e:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <tcp_next_iss+0x44>)
 800ac20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	0801365c 	.word	0x0801365c
 800ac30:	08013d4c 	.word	0x08013d4c
 800ac34:	080136a0 	.word	0x080136a0
 800ac38:	24000028 	.word	0x24000028
 800ac3c:	24003414 	.word	0x24003414

0800ac40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <tcp_eff_send_mss_netif+0x22>
 800ac54:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <tcp_eff_send_mss_netif+0x68>)
 800ac56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ac5a:	4914      	ldr	r1, [pc, #80]	; (800acac <tcp_eff_send_mss_netif+0x6c>)
 800ac5c:	4814      	ldr	r0, [pc, #80]	; (800acb0 <tcp_eff_send_mss_netif+0x70>)
 800ac5e:	f007 f85f 	bl	8011d20 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ac68:	89fb      	ldrh	r3, [r7, #14]
 800ac6a:	e019      	b.n	800aca0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ac72:	8afb      	ldrh	r3, [r7, #22]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d012      	beq.n	800ac9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ac78:	2328      	movs	r3, #40	; 0x28
 800ac7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ac7c:	8afa      	ldrh	r2, [r7, #22]
 800ac7e:	8abb      	ldrh	r3, [r7, #20]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d904      	bls.n	800ac8e <tcp_eff_send_mss_netif+0x4e>
 800ac84:	8afa      	ldrh	r2, [r7, #22]
 800ac86:	8abb      	ldrh	r3, [r7, #20]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	e000      	b.n	800ac90 <tcp_eff_send_mss_netif+0x50>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ac92:	8a7a      	ldrh	r2, [r7, #18]
 800ac94:	89fb      	ldrh	r3, [r7, #14]
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bf28      	it	cs
 800ac9a:	4613      	movcs	r3, r2
 800ac9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ac9e:	89fb      	ldrh	r3, [r7, #14]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	0801365c 	.word	0x0801365c
 800acac:	08013d68 	.word	0x08013d68
 800acb0:	080136a0 	.word	0x080136a0

0800acb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d119      	bne.n	800acfc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800acc8:	4b10      	ldr	r3, [pc, #64]	; (800ad0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800acca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800acce:	4910      	ldr	r1, [pc, #64]	; (800ad10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800acd0:	4810      	ldr	r0, [pc, #64]	; (800ad14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800acd2:	f007 f825 	bl	8011d20 <iprintf>

  while (pcb != NULL) {
 800acd6:	e011      	b.n	800acfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d108      	bne.n	800acf6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7fe ffca 	bl	8009c84 <tcp_abort>
      pcb = next;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e002      	b.n	800acfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1ea      	bne.n	800acd8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0801365c 	.word	0x0801365c
 800ad10:	08013d90 	.word	0x08013d90
 800ad14:	080136a0 	.word	0x080136a0

0800ad18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d02a      	beq.n	800ad7e <tcp_netif_ip_addr_changed+0x66>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d026      	beq.n	800ad7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ad30:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <tcp_netif_ip_addr_changed+0x70>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff ffbc 	bl	800acb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ad3c:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <tcp_netif_ip_addr_changed+0x74>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ffb6 	bl	800acb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d017      	beq.n	800ad7e <tcp_netif_ip_addr_changed+0x66>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d013      	beq.n	800ad7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad56:	4b0e      	ldr	r3, [pc, #56]	; (800ad90 <tcp_netif_ip_addr_changed+0x78>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	e00c      	b.n	800ad78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d103      	bne.n	800ad72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1ef      	bne.n	800ad5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	24003410 	.word	0x24003410
 800ad8c:	2400341c 	.word	0x2400341c
 800ad90:	24003418 	.word	0x24003418

0800ad94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d007      	beq.n	800adb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fc3f 	bl	800a62c <tcp_segs_free>
    pcb->ooseq = NULL;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b08d      	sub	sp, #52	; 0x34
 800adc0:	af04      	add	r7, sp, #16
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d105      	bne.n	800add8 <tcp_input+0x1c>
 800adcc:	4b9b      	ldr	r3, [pc, #620]	; (800b03c <tcp_input+0x280>)
 800adce:	2283      	movs	r2, #131	; 0x83
 800add0:	499b      	ldr	r1, [pc, #620]	; (800b040 <tcp_input+0x284>)
 800add2:	489c      	ldr	r0, [pc, #624]	; (800b044 <tcp_input+0x288>)
 800add4:	f006 ffa4 	bl	8011d20 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	4a9a      	ldr	r2, [pc, #616]	; (800b048 <tcp_input+0x28c>)
 800adde:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	895b      	ldrh	r3, [r3, #10]
 800ade4:	2b13      	cmp	r3, #19
 800ade6:	f240 83c4 	bls.w	800b572 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800adea:	4b98      	ldr	r3, [pc, #608]	; (800b04c <tcp_input+0x290>)
 800adec:	695a      	ldr	r2, [r3, #20]
 800adee:	4b97      	ldr	r3, [pc, #604]	; (800b04c <tcp_input+0x290>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f006 f801 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f040 83ba 	bne.w	800b576 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ae02:	4b92      	ldr	r3, [pc, #584]	; (800b04c <tcp_input+0x290>)
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ae0a:	2be0      	cmp	r3, #224	; 0xe0
 800ae0c:	f000 83b3 	beq.w	800b576 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ae10:	4b8d      	ldr	r3, [pc, #564]	; (800b048 <tcp_input+0x28c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	899b      	ldrh	r3, [r3, #12]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fc fcef 	bl	80077fc <lwip_htons>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	0b1b      	lsrs	r3, r3, #12
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ae2a:	7cbb      	ldrb	r3, [r7, #18]
 800ae2c:	2b13      	cmp	r3, #19
 800ae2e:	f240 83a2 	bls.w	800b576 <tcp_input+0x7ba>
 800ae32:	7cbb      	ldrb	r3, [r7, #18]
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	891b      	ldrh	r3, [r3, #8]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	f200 839b 	bhi.w	800b576 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ae40:	7cbb      	ldrb	r3, [r7, #18]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	3b14      	subs	r3, #20
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	4b81      	ldr	r3, [pc, #516]	; (800b050 <tcp_input+0x294>)
 800ae4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ae4c:	4b81      	ldr	r3, [pc, #516]	; (800b054 <tcp_input+0x298>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	895a      	ldrh	r2, [r3, #10]
 800ae56:	7cbb      	ldrb	r3, [r7, #18]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d309      	bcc.n	800ae72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ae5e:	4b7c      	ldr	r3, [pc, #496]	; (800b050 <tcp_input+0x294>)
 800ae60:	881a      	ldrh	r2, [r3, #0]
 800ae62:	4b7d      	ldr	r3, [pc, #500]	; (800b058 <tcp_input+0x29c>)
 800ae64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ae66:	7cbb      	ldrb	r3, [r7, #18]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7fe f862 	bl	8008f34 <pbuf_remove_header>
 800ae70:	e04e      	b.n	800af10 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d105      	bne.n	800ae86 <tcp_input+0xca>
 800ae7a:	4b70      	ldr	r3, [pc, #448]	; (800b03c <tcp_input+0x280>)
 800ae7c:	22c2      	movs	r2, #194	; 0xc2
 800ae7e:	4977      	ldr	r1, [pc, #476]	; (800b05c <tcp_input+0x2a0>)
 800ae80:	4870      	ldr	r0, [pc, #448]	; (800b044 <tcp_input+0x288>)
 800ae82:	f006 ff4d 	bl	8011d20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ae86:	2114      	movs	r1, #20
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fe f853 	bl	8008f34 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	895a      	ldrh	r2, [r3, #10]
 800ae92:	4b71      	ldr	r3, [pc, #452]	; (800b058 <tcp_input+0x29c>)
 800ae94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ae96:	4b6e      	ldr	r3, [pc, #440]	; (800b050 <tcp_input+0x294>)
 800ae98:	881a      	ldrh	r2, [r3, #0]
 800ae9a:	4b6f      	ldr	r3, [pc, #444]	; (800b058 <tcp_input+0x29c>)
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800aea2:	4b6d      	ldr	r3, [pc, #436]	; (800b058 <tcp_input+0x29c>)
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7fe f843 	bl	8008f34 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	895b      	ldrh	r3, [r3, #10]
 800aeb4:	8a3a      	ldrh	r2, [r7, #16]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	f200 835f 	bhi.w	800b57a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	4a64      	ldr	r2, [pc, #400]	; (800b054 <tcp_input+0x298>)
 800aec4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	8a3a      	ldrh	r2, [r7, #16]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe f830 	bl	8008f34 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	891a      	ldrh	r2, [r3, #8]
 800aed8:	8a3b      	ldrh	r3, [r7, #16]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	b29a      	uxth	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	895b      	ldrh	r3, [r3, #10]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <tcp_input+0x13a>
 800aeea:	4b54      	ldr	r3, [pc, #336]	; (800b03c <tcp_input+0x280>)
 800aeec:	22df      	movs	r2, #223	; 0xdf
 800aeee:	495c      	ldr	r1, [pc, #368]	; (800b060 <tcp_input+0x2a4>)
 800aef0:	4854      	ldr	r0, [pc, #336]	; (800b044 <tcp_input+0x288>)
 800aef2:	f006 ff15 	bl	8011d20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	891a      	ldrh	r2, [r3, #8]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	891b      	ldrh	r3, [r3, #8]
 800af00:	429a      	cmp	r2, r3
 800af02:	d005      	beq.n	800af10 <tcp_input+0x154>
 800af04:	4b4d      	ldr	r3, [pc, #308]	; (800b03c <tcp_input+0x280>)
 800af06:	22e0      	movs	r2, #224	; 0xe0
 800af08:	4956      	ldr	r1, [pc, #344]	; (800b064 <tcp_input+0x2a8>)
 800af0a:	484e      	ldr	r0, [pc, #312]	; (800b044 <tcp_input+0x288>)
 800af0c:	f006 ff08 	bl	8011d20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800af10:	4b4d      	ldr	r3, [pc, #308]	; (800b048 <tcp_input+0x28c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	b29a      	uxth	r2, r3
 800af18:	4b4b      	ldr	r3, [pc, #300]	; (800b048 <tcp_input+0x28c>)
 800af1a:	681c      	ldr	r4, [r3, #0]
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7fc fc6d 	bl	80077fc <lwip_htons>
 800af22:	4603      	mov	r3, r0
 800af24:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800af26:	4b48      	ldr	r3, [pc, #288]	; (800b048 <tcp_input+0x28c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	885b      	ldrh	r3, [r3, #2]
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	4b46      	ldr	r3, [pc, #280]	; (800b048 <tcp_input+0x28c>)
 800af30:	681c      	ldr	r4, [r3, #0]
 800af32:	4610      	mov	r0, r2
 800af34:	f7fc fc62 	bl	80077fc <lwip_htons>
 800af38:	4603      	mov	r3, r0
 800af3a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800af3c:	4b42      	ldr	r3, [pc, #264]	; (800b048 <tcp_input+0x28c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	4b41      	ldr	r3, [pc, #260]	; (800b048 <tcp_input+0x28c>)
 800af44:	681c      	ldr	r4, [r3, #0]
 800af46:	4610      	mov	r0, r2
 800af48:	f7fc fc6d 	bl	8007826 <lwip_htonl>
 800af4c:	4603      	mov	r3, r0
 800af4e:	6063      	str	r3, [r4, #4]
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	4a45      	ldr	r2, [pc, #276]	; (800b068 <tcp_input+0x2ac>)
 800af54:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800af56:	4b3c      	ldr	r3, [pc, #240]	; (800b048 <tcp_input+0x28c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	4b3a      	ldr	r3, [pc, #232]	; (800b048 <tcp_input+0x28c>)
 800af5e:	681c      	ldr	r4, [r3, #0]
 800af60:	4610      	mov	r0, r2
 800af62:	f7fc fc60 	bl	8007826 <lwip_htonl>
 800af66:	4603      	mov	r3, r0
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	4a3f      	ldr	r2, [pc, #252]	; (800b06c <tcp_input+0x2b0>)
 800af6e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800af70:	4b35      	ldr	r3, [pc, #212]	; (800b048 <tcp_input+0x28c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	89db      	ldrh	r3, [r3, #14]
 800af76:	b29a      	uxth	r2, r3
 800af78:	4b33      	ldr	r3, [pc, #204]	; (800b048 <tcp_input+0x28c>)
 800af7a:	681c      	ldr	r4, [r3, #0]
 800af7c:	4610      	mov	r0, r2
 800af7e:	f7fc fc3d 	bl	80077fc <lwip_htons>
 800af82:	4603      	mov	r3, r0
 800af84:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800af86:	4b30      	ldr	r3, [pc, #192]	; (800b048 <tcp_input+0x28c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	899b      	ldrh	r3, [r3, #12]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fc fc34 	bl	80077fc <lwip_htons>
 800af94:	4603      	mov	r3, r0
 800af96:	b2db      	uxtb	r3, r3
 800af98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	4b34      	ldr	r3, [pc, #208]	; (800b070 <tcp_input+0x2b4>)
 800afa0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	891a      	ldrh	r2, [r3, #8]
 800afa6:	4b33      	ldr	r3, [pc, #204]	; (800b074 <tcp_input+0x2b8>)
 800afa8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800afaa:	4b31      	ldr	r3, [pc, #196]	; (800b070 <tcp_input+0x2b4>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00c      	beq.n	800afd0 <tcp_input+0x214>
    tcplen++;
 800afb6:	4b2f      	ldr	r3, [pc, #188]	; (800b074 <tcp_input+0x2b8>)
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	3301      	adds	r3, #1
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	4b2d      	ldr	r3, [pc, #180]	; (800b074 <tcp_input+0x2b8>)
 800afc0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	891a      	ldrh	r2, [r3, #8]
 800afc6:	4b2b      	ldr	r3, [pc, #172]	; (800b074 <tcp_input+0x2b8>)
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	f200 82d7 	bhi.w	800b57e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800afd4:	4b28      	ldr	r3, [pc, #160]	; (800b078 <tcp_input+0x2bc>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	e09d      	b.n	800b118 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	7d1b      	ldrb	r3, [r3, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d105      	bne.n	800aff0 <tcp_input+0x234>
 800afe4:	4b15      	ldr	r3, [pc, #84]	; (800b03c <tcp_input+0x280>)
 800afe6:	22fb      	movs	r2, #251	; 0xfb
 800afe8:	4924      	ldr	r1, [pc, #144]	; (800b07c <tcp_input+0x2c0>)
 800afea:	4816      	ldr	r0, [pc, #88]	; (800b044 <tcp_input+0x288>)
 800afec:	f006 fe98 	bl	8011d20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	7d1b      	ldrb	r3, [r3, #20]
 800aff4:	2b0a      	cmp	r3, #10
 800aff6:	d105      	bne.n	800b004 <tcp_input+0x248>
 800aff8:	4b10      	ldr	r3, [pc, #64]	; (800b03c <tcp_input+0x280>)
 800affa:	22fc      	movs	r2, #252	; 0xfc
 800affc:	4920      	ldr	r1, [pc, #128]	; (800b080 <tcp_input+0x2c4>)
 800affe:	4811      	ldr	r0, [pc, #68]	; (800b044 <tcp_input+0x288>)
 800b000:	f006 fe8e 	bl	8011d20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	7d1b      	ldrb	r3, [r3, #20]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d105      	bne.n	800b018 <tcp_input+0x25c>
 800b00c:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <tcp_input+0x280>)
 800b00e:	22fd      	movs	r2, #253	; 0xfd
 800b010:	491c      	ldr	r1, [pc, #112]	; (800b084 <tcp_input+0x2c8>)
 800b012:	480c      	ldr	r0, [pc, #48]	; (800b044 <tcp_input+0x288>)
 800b014:	f006 fe84 	bl	8011d20 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	7a1b      	ldrb	r3, [r3, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d033      	beq.n	800b088 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	7a1a      	ldrb	r2, [r3, #8]
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <tcp_input+0x290>)
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b02c:	3301      	adds	r3, #1
 800b02e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b030:	429a      	cmp	r2, r3
 800b032:	d029      	beq.n	800b088 <tcp_input+0x2cc>
      prev = pcb;
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	61bb      	str	r3, [r7, #24]
      continue;
 800b038:	e06b      	b.n	800b112 <tcp_input+0x356>
 800b03a:	bf00      	nop
 800b03c:	08013dc4 	.word	0x08013dc4
 800b040:	08013df8 	.word	0x08013df8
 800b044:	08013e10 	.word	0x08013e10
 800b048:	24000100 	.word	0x24000100
 800b04c:	24000520 	.word	0x24000520
 800b050:	24000104 	.word	0x24000104
 800b054:	24000108 	.word	0x24000108
 800b058:	24000106 	.word	0x24000106
 800b05c:	08013e38 	.word	0x08013e38
 800b060:	08013e48 	.word	0x08013e48
 800b064:	08013e54 	.word	0x08013e54
 800b068:	24000110 	.word	0x24000110
 800b06c:	24000114 	.word	0x24000114
 800b070:	2400011c 	.word	0x2400011c
 800b074:	2400011a 	.word	0x2400011a
 800b078:	24003410 	.word	0x24003410
 800b07c:	08013e74 	.word	0x08013e74
 800b080:	08013e9c 	.word	0x08013e9c
 800b084:	08013ec8 	.word	0x08013ec8
    }

    if (pcb->remote_port == tcphdr->src &&
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	8b1a      	ldrh	r2, [r3, #24]
 800b08c:	4b94      	ldr	r3, [pc, #592]	; (800b2e0 <tcp_input+0x524>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	b29b      	uxth	r3, r3
 800b094:	429a      	cmp	r2, r3
 800b096:	d13a      	bne.n	800b10e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	8ada      	ldrh	r2, [r3, #22]
 800b09c:	4b90      	ldr	r3, [pc, #576]	; (800b2e0 <tcp_input+0x524>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	885b      	ldrh	r3, [r3, #2]
 800b0a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d132      	bne.n	800b10e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	4b8d      	ldr	r3, [pc, #564]	; (800b2e4 <tcp_input+0x528>)
 800b0ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d12c      	bne.n	800b10e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	4b8a      	ldr	r3, [pc, #552]	; (800b2e4 <tcp_input+0x528>)
 800b0ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d126      	bne.n	800b10e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d106      	bne.n	800b0d8 <tcp_input+0x31c>
 800b0ca:	4b87      	ldr	r3, [pc, #540]	; (800b2e8 <tcp_input+0x52c>)
 800b0cc:	f240 120d 	movw	r2, #269	; 0x10d
 800b0d0:	4986      	ldr	r1, [pc, #536]	; (800b2ec <tcp_input+0x530>)
 800b0d2:	4887      	ldr	r0, [pc, #540]	; (800b2f0 <tcp_input+0x534>)
 800b0d4:	f006 fe24 	bl	8011d20 <iprintf>
      if (prev != NULL) {
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <tcp_input+0x338>
        prev->next = pcb->next;
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b0e6:	4b83      	ldr	r3, [pc, #524]	; (800b2f4 <tcp_input+0x538>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b0ee:	4a81      	ldr	r2, [pc, #516]	; (800b2f4 <tcp_input+0x538>)
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d111      	bne.n	800b122 <tcp_input+0x366>
 800b0fe:	4b7a      	ldr	r3, [pc, #488]	; (800b2e8 <tcp_input+0x52c>)
 800b100:	f240 1215 	movw	r2, #277	; 0x115
 800b104:	497c      	ldr	r1, [pc, #496]	; (800b2f8 <tcp_input+0x53c>)
 800b106:	487a      	ldr	r0, [pc, #488]	; (800b2f0 <tcp_input+0x534>)
 800b108:	f006 fe0a 	bl	8011d20 <iprintf>
      break;
 800b10c:	e009      	b.n	800b122 <tcp_input+0x366>
    }
    prev = pcb;
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	61fb      	str	r3, [r7, #28]
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f47f af5e 	bne.w	800afdc <tcp_input+0x220>
 800b120:	e000      	b.n	800b124 <tcp_input+0x368>
      break;
 800b122:	bf00      	nop
  }

  if (pcb == NULL) {
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	2b00      	cmp	r3, #0
 800b128:	f040 8095 	bne.w	800b256 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b12c:	4b73      	ldr	r3, [pc, #460]	; (800b2fc <tcp_input+0x540>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	61fb      	str	r3, [r7, #28]
 800b132:	e03f      	b.n	800b1b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	7d1b      	ldrb	r3, [r3, #20]
 800b138:	2b0a      	cmp	r3, #10
 800b13a:	d006      	beq.n	800b14a <tcp_input+0x38e>
 800b13c:	4b6a      	ldr	r3, [pc, #424]	; (800b2e8 <tcp_input+0x52c>)
 800b13e:	f240 121f 	movw	r2, #287	; 0x11f
 800b142:	496f      	ldr	r1, [pc, #444]	; (800b300 <tcp_input+0x544>)
 800b144:	486a      	ldr	r0, [pc, #424]	; (800b2f0 <tcp_input+0x534>)
 800b146:	f006 fdeb 	bl	8011d20 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	7a1b      	ldrb	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d009      	beq.n	800b166 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	7a1a      	ldrb	r2, [r3, #8]
 800b156:	4b63      	ldr	r3, [pc, #396]	; (800b2e4 <tcp_input+0x528>)
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b15e:	3301      	adds	r3, #1
 800b160:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b162:	429a      	cmp	r2, r3
 800b164:	d122      	bne.n	800b1ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	8b1a      	ldrh	r2, [r3, #24]
 800b16a:	4b5d      	ldr	r3, [pc, #372]	; (800b2e0 <tcp_input+0x524>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	b29b      	uxth	r3, r3
 800b172:	429a      	cmp	r2, r3
 800b174:	d11b      	bne.n	800b1ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	8ada      	ldrh	r2, [r3, #22]
 800b17a:	4b59      	ldr	r3, [pc, #356]	; (800b2e0 <tcp_input+0x524>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	885b      	ldrh	r3, [r3, #2]
 800b180:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b182:	429a      	cmp	r2, r3
 800b184:	d113      	bne.n	800b1ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	4b56      	ldr	r3, [pc, #344]	; (800b2e4 <tcp_input+0x528>)
 800b18c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b18e:	429a      	cmp	r2, r3
 800b190:	d10d      	bne.n	800b1ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	4b53      	ldr	r3, [pc, #332]	; (800b2e4 <tcp_input+0x528>)
 800b198:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d107      	bne.n	800b1ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b19e:	69f8      	ldr	r0, [r7, #28]
 800b1a0:	f000 fb52 	bl	800b848 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7fd ff4b 	bl	8009040 <pbuf_free>
        return;
 800b1aa:	e1ee      	b.n	800b58a <tcp_input+0x7ce>
        continue;
 800b1ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1bc      	bne.n	800b134 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b1be:	4b51      	ldr	r3, [pc, #324]	; (800b304 <tcp_input+0x548>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	e02a      	b.n	800b21c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	7a1b      	ldrb	r3, [r3, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00c      	beq.n	800b1e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	7a1a      	ldrb	r2, [r3, #8]
 800b1d2:	4b44      	ldr	r3, [pc, #272]	; (800b2e4 <tcp_input+0x528>)
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d002      	beq.n	800b1e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	61bb      	str	r3, [r7, #24]
        continue;
 800b1e6:	e016      	b.n	800b216 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	8ada      	ldrh	r2, [r3, #22]
 800b1ec:	4b3c      	ldr	r3, [pc, #240]	; (800b2e0 <tcp_input+0x524>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	885b      	ldrh	r3, [r3, #2]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d10c      	bne.n	800b212 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	4b39      	ldr	r3, [pc, #228]	; (800b2e4 <tcp_input+0x528>)
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	429a      	cmp	r2, r3
 800b202:	d00f      	beq.n	800b224 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00d      	beq.n	800b226 <tcp_input+0x46a>
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d009      	beq.n	800b226 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1d1      	bne.n	800b1c6 <tcp_input+0x40a>
 800b222:	e000      	b.n	800b226 <tcp_input+0x46a>
            break;
 800b224:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d014      	beq.n	800b256 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00a      	beq.n	800b248 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b23a:	4b32      	ldr	r3, [pc, #200]	; (800b304 <tcp_input+0x548>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b242:	4a30      	ldr	r2, [pc, #192]	; (800b304 <tcp_input+0x548>)
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b248:	6978      	ldr	r0, [r7, #20]
 800b24a:	f000 f9ff 	bl	800b64c <tcp_listen_input>
      }
      pbuf_free(p);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7fd fef6 	bl	8009040 <pbuf_free>
      return;
 800b254:	e199      	b.n	800b58a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8160 	beq.w	800b51e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b25e:	4b2a      	ldr	r3, [pc, #168]	; (800b308 <tcp_input+0x54c>)
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	891a      	ldrh	r2, [r3, #8]
 800b268:	4b27      	ldr	r3, [pc, #156]	; (800b308 <tcp_input+0x54c>)
 800b26a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b26c:	4a26      	ldr	r2, [pc, #152]	; (800b308 <tcp_input+0x54c>)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b272:	4b1b      	ldr	r3, [pc, #108]	; (800b2e0 <tcp_input+0x524>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a24      	ldr	r2, [pc, #144]	; (800b308 <tcp_input+0x54c>)
 800b278:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b27a:	4b24      	ldr	r3, [pc, #144]	; (800b30c <tcp_input+0x550>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b280:	4b23      	ldr	r3, [pc, #140]	; (800b310 <tcp_input+0x554>)
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b286:	4b23      	ldr	r3, [pc, #140]	; (800b314 <tcp_input+0x558>)
 800b288:	2200      	movs	r2, #0
 800b28a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b28c:	4b22      	ldr	r3, [pc, #136]	; (800b318 <tcp_input+0x55c>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	f003 0308 	and.w	r3, r3, #8
 800b294:	2b00      	cmp	r3, #0
 800b296:	d006      	beq.n	800b2a6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7b5b      	ldrb	r3, [r3, #13]
 800b29c:	f043 0301 	orr.w	r3, r3, #1
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d038      	beq.n	800b320 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b2ae:	69f8      	ldr	r0, [r7, #28]
 800b2b0:	f7ff f940 	bl	800a534 <tcp_process_refused_data>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	f113 0f0d 	cmn.w	r3, #13
 800b2ba:	d007      	beq.n	800b2cc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d02d      	beq.n	800b320 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b2c4:	4b15      	ldr	r3, [pc, #84]	; (800b31c <tcp_input+0x560>)
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d029      	beq.n	800b320 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f040 8104 	bne.w	800b4de <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b2d6:	69f8      	ldr	r0, [r7, #28]
 800b2d8:	f003 f9d0 	bl	800e67c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b2dc:	e0ff      	b.n	800b4de <tcp_input+0x722>
 800b2de:	bf00      	nop
 800b2e0:	24000100 	.word	0x24000100
 800b2e4:	24000520 	.word	0x24000520
 800b2e8:	08013dc4 	.word	0x08013dc4
 800b2ec:	08013ef0 	.word	0x08013ef0
 800b2f0:	08013e10 	.word	0x08013e10
 800b2f4:	24003410 	.word	0x24003410
 800b2f8:	08013f1c 	.word	0x08013f1c
 800b2fc:	24003420 	.word	0x24003420
 800b300:	08013f48 	.word	0x08013f48
 800b304:	24003418 	.word	0x24003418
 800b308:	240000f0 	.word	0x240000f0
 800b30c:	24000120 	.word	0x24000120
 800b310:	2400011d 	.word	0x2400011d
 800b314:	24000118 	.word	0x24000118
 800b318:	2400011c 	.word	0x2400011c
 800b31c:	2400011a 	.word	0x2400011a
      }
    }
    tcp_input_pcb = pcb;
 800b320:	4a9b      	ldr	r2, [pc, #620]	; (800b590 <tcp_input+0x7d4>)
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b326:	69f8      	ldr	r0, [r7, #28]
 800b328:	f000 fb0a 	bl	800b940 <tcp_process>
 800b32c:	4603      	mov	r3, r0
 800b32e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b334:	f113 0f0d 	cmn.w	r3, #13
 800b338:	f000 80d3 	beq.w	800b4e2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800b33c:	4b95      	ldr	r3, [pc, #596]	; (800b594 <tcp_input+0x7d8>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	f003 0308 	and.w	r3, r3, #8
 800b344:	2b00      	cmp	r3, #0
 800b346:	d015      	beq.n	800b374 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d008      	beq.n	800b364 <tcp_input+0x5a8>
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b358:	69fa      	ldr	r2, [r7, #28]
 800b35a:	6912      	ldr	r2, [r2, #16]
 800b35c:	f06f 010d 	mvn.w	r1, #13
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b364:	69f9      	ldr	r1, [r7, #28]
 800b366:	488c      	ldr	r0, [pc, #560]	; (800b598 <tcp_input+0x7dc>)
 800b368:	f7ff fbb0 	bl	800aacc <tcp_pcb_remove>
        tcp_free(pcb);
 800b36c:	69f8      	ldr	r0, [r7, #28]
 800b36e:	f7fe f9a9 	bl	80096c4 <tcp_free>
 800b372:	e0c1      	b.n	800b4f8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b378:	4b88      	ldr	r3, [pc, #544]	; (800b59c <tcp_input+0x7e0>)
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01d      	beq.n	800b3bc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b380:	4b86      	ldr	r3, [pc, #536]	; (800b59c <tcp_input+0x7e0>)
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <tcp_input+0x5ea>
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	6910      	ldr	r0, [r2, #16]
 800b39a:	89fa      	ldrh	r2, [r7, #14]
 800b39c:	69f9      	ldr	r1, [r7, #28]
 800b39e:	4798      	blx	r3
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	74fb      	strb	r3, [r7, #19]
 800b3a4:	e001      	b.n	800b3aa <tcp_input+0x5ee>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b3aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3ae:	f113 0f0d 	cmn.w	r3, #13
 800b3b2:	f000 8098 	beq.w	800b4e6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b3b6:	4b79      	ldr	r3, [pc, #484]	; (800b59c <tcp_input+0x7e0>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b3bc:	69f8      	ldr	r0, [r7, #28]
 800b3be:	f000 f905 	bl	800b5cc <tcp_input_delayed_close>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f040 8090 	bne.w	800b4ea <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b3ca:	4b75      	ldr	r3, [pc, #468]	; (800b5a0 <tcp_input+0x7e4>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d041      	beq.n	800b456 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d006      	beq.n	800b3e8 <tcp_input+0x62c>
 800b3da:	4b72      	ldr	r3, [pc, #456]	; (800b5a4 <tcp_input+0x7e8>)
 800b3dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b3e0:	4971      	ldr	r1, [pc, #452]	; (800b5a8 <tcp_input+0x7ec>)
 800b3e2:	4872      	ldr	r0, [pc, #456]	; (800b5ac <tcp_input+0x7f0>)
 800b3e4:	f006 fc9c 	bl	8011d20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	8b5b      	ldrh	r3, [r3, #26]
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d008      	beq.n	800b406 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b3f4:	4b6a      	ldr	r3, [pc, #424]	; (800b5a0 <tcp_input+0x7e4>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd fe21 	bl	8009040 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b3fe:	69f8      	ldr	r0, [r7, #28]
 800b400:	f7fe fc40 	bl	8009c84 <tcp_abort>
            goto aborted;
 800b404:	e078      	b.n	800b4f8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00c      	beq.n	800b42a <tcp_input+0x66e>
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	6918      	ldr	r0, [r3, #16]
 800b41a:	4b61      	ldr	r3, [pc, #388]	; (800b5a0 <tcp_input+0x7e4>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	2300      	movs	r3, #0
 800b420:	69f9      	ldr	r1, [r7, #28]
 800b422:	47a0      	blx	r4
 800b424:	4603      	mov	r3, r0
 800b426:	74fb      	strb	r3, [r7, #19]
 800b428:	e008      	b.n	800b43c <tcp_input+0x680>
 800b42a:	4b5d      	ldr	r3, [pc, #372]	; (800b5a0 <tcp_input+0x7e4>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	2300      	movs	r3, #0
 800b430:	69f9      	ldr	r1, [r7, #28]
 800b432:	2000      	movs	r0, #0
 800b434:	f7ff f952 	bl	800a6dc <tcp_recv_null>
 800b438:	4603      	mov	r3, r0
 800b43a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b43c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b440:	f113 0f0d 	cmn.w	r3, #13
 800b444:	d053      	beq.n	800b4ee <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b44e:	4b54      	ldr	r3, [pc, #336]	; (800b5a0 <tcp_input+0x7e4>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b456:	4b4f      	ldr	r3, [pc, #316]	; (800b594 <tcp_input+0x7d8>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	f003 0320 	and.w	r3, r3, #32
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d030      	beq.n	800b4c4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b466:	2b00      	cmp	r3, #0
 800b468:	d009      	beq.n	800b47e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b46e:	7b5a      	ldrb	r2, [r3, #13]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b474:	f042 0220 	orr.w	r2, r2, #32
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	735a      	strb	r2, [r3, #13]
 800b47c:	e022      	b.n	800b4c4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b482:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b486:	d005      	beq.n	800b494 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48c:	3301      	adds	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <tcp_input+0x6fa>
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	6918      	ldr	r0, [r3, #16]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	69f9      	ldr	r1, [r7, #28]
 800b4ae:	47a0      	blx	r4
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	74fb      	strb	r3, [r7, #19]
 800b4b4:	e001      	b.n	800b4ba <tcp_input+0x6fe>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b4ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4be:	f113 0f0d 	cmn.w	r3, #13
 800b4c2:	d016      	beq.n	800b4f2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b4c4:	4b32      	ldr	r3, [pc, #200]	; (800b590 <tcp_input+0x7d4>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b4ca:	69f8      	ldr	r0, [r7, #28]
 800b4cc:	f000 f87e 	bl	800b5cc <tcp_input_delayed_close>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10f      	bne.n	800b4f6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b4d6:	69f8      	ldr	r0, [r7, #28]
 800b4d8:	f002 fab8 	bl	800da4c <tcp_output>
 800b4dc:	e00c      	b.n	800b4f8 <tcp_input+0x73c>
        goto aborted;
 800b4de:	bf00      	nop
 800b4e0:	e00a      	b.n	800b4f8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b4e2:	bf00      	nop
 800b4e4:	e008      	b.n	800b4f8 <tcp_input+0x73c>
              goto aborted;
 800b4e6:	bf00      	nop
 800b4e8:	e006      	b.n	800b4f8 <tcp_input+0x73c>
          goto aborted;
 800b4ea:	bf00      	nop
 800b4ec:	e004      	b.n	800b4f8 <tcp_input+0x73c>
            goto aborted;
 800b4ee:	bf00      	nop
 800b4f0:	e002      	b.n	800b4f8 <tcp_input+0x73c>
              goto aborted;
 800b4f2:	bf00      	nop
 800b4f4:	e000      	b.n	800b4f8 <tcp_input+0x73c>
          goto aborted;
 800b4f6:	bf00      	nop
    tcp_input_pcb = NULL;
 800b4f8:	4b25      	ldr	r3, [pc, #148]	; (800b590 <tcp_input+0x7d4>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b4fe:	4b28      	ldr	r3, [pc, #160]	; (800b5a0 <tcp_input+0x7e4>)
 800b500:	2200      	movs	r2, #0
 800b502:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b504:	4b2a      	ldr	r3, [pc, #168]	; (800b5b0 <tcp_input+0x7f4>)
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d03d      	beq.n	800b588 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800b50c:	4b28      	ldr	r3, [pc, #160]	; (800b5b0 <tcp_input+0x7f4>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	f7fd fd95 	bl	8009040 <pbuf_free>
      inseg.p = NULL;
 800b516:	4b26      	ldr	r3, [pc, #152]	; (800b5b0 <tcp_input+0x7f4>)
 800b518:	2200      	movs	r2, #0
 800b51a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b51c:	e034      	b.n	800b588 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b51e:	4b25      	ldr	r3, [pc, #148]	; (800b5b4 <tcp_input+0x7f8>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	899b      	ldrh	r3, [r3, #12]
 800b524:	b29b      	uxth	r3, r3
 800b526:	4618      	mov	r0, r3
 800b528:	f7fc f968 	bl	80077fc <lwip_htons>
 800b52c:	4603      	mov	r3, r0
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d118      	bne.n	800b56a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b538:	4b1f      	ldr	r3, [pc, #124]	; (800b5b8 <tcp_input+0x7fc>)
 800b53a:	6819      	ldr	r1, [r3, #0]
 800b53c:	4b1f      	ldr	r3, [pc, #124]	; (800b5bc <tcp_input+0x800>)
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	4b1f      	ldr	r3, [pc, #124]	; (800b5c0 <tcp_input+0x804>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b548:	4b1a      	ldr	r3, [pc, #104]	; (800b5b4 <tcp_input+0x7f8>)
 800b54a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b54c:	885b      	ldrh	r3, [r3, #2]
 800b54e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b550:	4a18      	ldr	r2, [pc, #96]	; (800b5b4 <tcp_input+0x7f8>)
 800b552:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b554:	8812      	ldrh	r2, [r2, #0]
 800b556:	b292      	uxth	r2, r2
 800b558:	9202      	str	r2, [sp, #8]
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	4b19      	ldr	r3, [pc, #100]	; (800b5c4 <tcp_input+0x808>)
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	4b19      	ldr	r3, [pc, #100]	; (800b5c8 <tcp_input+0x80c>)
 800b562:	4602      	mov	r2, r0
 800b564:	2000      	movs	r0, #0
 800b566:	f003 f837 	bl	800e5d8 <tcp_rst>
    pbuf_free(p);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7fd fd68 	bl	8009040 <pbuf_free>
  return;
 800b570:	e00a      	b.n	800b588 <tcp_input+0x7cc>
    goto dropped;
 800b572:	bf00      	nop
 800b574:	e004      	b.n	800b580 <tcp_input+0x7c4>
dropped:
 800b576:	bf00      	nop
 800b578:	e002      	b.n	800b580 <tcp_input+0x7c4>
      goto dropped;
 800b57a:	bf00      	nop
 800b57c:	e000      	b.n	800b580 <tcp_input+0x7c4>
      goto dropped;
 800b57e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7fd fd5d 	bl	8009040 <pbuf_free>
 800b586:	e000      	b.n	800b58a <tcp_input+0x7ce>
  return;
 800b588:	bf00      	nop
}
 800b58a:	3724      	adds	r7, #36	; 0x24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd90      	pop	{r4, r7, pc}
 800b590:	24003424 	.word	0x24003424
 800b594:	2400011d 	.word	0x2400011d
 800b598:	24003410 	.word	0x24003410
 800b59c:	24000118 	.word	0x24000118
 800b5a0:	24000120 	.word	0x24000120
 800b5a4:	08013dc4 	.word	0x08013dc4
 800b5a8:	08013f78 	.word	0x08013f78
 800b5ac:	08013e10 	.word	0x08013e10
 800b5b0:	240000f0 	.word	0x240000f0
 800b5b4:	24000100 	.word	0x24000100
 800b5b8:	24000114 	.word	0x24000114
 800b5bc:	2400011a 	.word	0x2400011a
 800b5c0:	24000110 	.word	0x24000110
 800b5c4:	24000530 	.word	0x24000530
 800b5c8:	24000534 	.word	0x24000534

0800b5cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <tcp_input_delayed_close+0x1c>
 800b5da:	4b17      	ldr	r3, [pc, #92]	; (800b638 <tcp_input_delayed_close+0x6c>)
 800b5dc:	f240 225a 	movw	r2, #602	; 0x25a
 800b5e0:	4916      	ldr	r1, [pc, #88]	; (800b63c <tcp_input_delayed_close+0x70>)
 800b5e2:	4817      	ldr	r0, [pc, #92]	; (800b640 <tcp_input_delayed_close+0x74>)
 800b5e4:	f006 fb9c 	bl	8011d20 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b5e8:	4b16      	ldr	r3, [pc, #88]	; (800b644 <tcp_input_delayed_close+0x78>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	f003 0310 	and.w	r3, r3, #16
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d01c      	beq.n	800b62e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8b5b      	ldrh	r3, [r3, #26]
 800b5f8:	f003 0310 	and.w	r3, r3, #16
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10d      	bne.n	800b61c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b606:	2b00      	cmp	r3, #0
 800b608:	d008      	beq.n	800b61c <tcp_input_delayed_close+0x50>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	6912      	ldr	r2, [r2, #16]
 800b614:	f06f 010e 	mvn.w	r1, #14
 800b618:	4610      	mov	r0, r2
 800b61a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	480a      	ldr	r0, [pc, #40]	; (800b648 <tcp_input_delayed_close+0x7c>)
 800b620:	f7ff fa54 	bl	800aacc <tcp_pcb_remove>
    tcp_free(pcb);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe f84d 	bl	80096c4 <tcp_free>
    return 1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e000      	b.n	800b630 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	08013dc4 	.word	0x08013dc4
 800b63c:	08013f94 	.word	0x08013f94
 800b640:	08013e10 	.word	0x08013e10
 800b644:	2400011d 	.word	0x2400011d
 800b648:	24003410 	.word	0x24003410

0800b64c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b64c:	b590      	push	{r4, r7, lr}
 800b64e:	b08b      	sub	sp, #44	; 0x2c
 800b650:	af04      	add	r7, sp, #16
 800b652:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b654:	4b6f      	ldr	r3, [pc, #444]	; (800b814 <tcp_listen_input+0x1c8>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	f003 0304 	and.w	r3, r3, #4
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 80d3 	bne.w	800b808 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <tcp_listen_input+0x2a>
 800b668:	4b6b      	ldr	r3, [pc, #428]	; (800b818 <tcp_listen_input+0x1cc>)
 800b66a:	f240 2281 	movw	r2, #641	; 0x281
 800b66e:	496b      	ldr	r1, [pc, #428]	; (800b81c <tcp_listen_input+0x1d0>)
 800b670:	486b      	ldr	r0, [pc, #428]	; (800b820 <tcp_listen_input+0x1d4>)
 800b672:	f006 fb55 	bl	8011d20 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b676:	4b67      	ldr	r3, [pc, #412]	; (800b814 <tcp_listen_input+0x1c8>)
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	f003 0310 	and.w	r3, r3, #16
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d019      	beq.n	800b6b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b682:	4b68      	ldr	r3, [pc, #416]	; (800b824 <tcp_listen_input+0x1d8>)
 800b684:	6819      	ldr	r1, [r3, #0]
 800b686:	4b68      	ldr	r3, [pc, #416]	; (800b828 <tcp_listen_input+0x1dc>)
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	4b67      	ldr	r3, [pc, #412]	; (800b82c <tcp_listen_input+0x1e0>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b692:	4b67      	ldr	r3, [pc, #412]	; (800b830 <tcp_listen_input+0x1e4>)
 800b694:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b696:	885b      	ldrh	r3, [r3, #2]
 800b698:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b69a:	4a65      	ldr	r2, [pc, #404]	; (800b830 <tcp_listen_input+0x1e4>)
 800b69c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b69e:	8812      	ldrh	r2, [r2, #0]
 800b6a0:	b292      	uxth	r2, r2
 800b6a2:	9202      	str	r2, [sp, #8]
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	4b63      	ldr	r3, [pc, #396]	; (800b834 <tcp_listen_input+0x1e8>)
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	4b63      	ldr	r3, [pc, #396]	; (800b838 <tcp_listen_input+0x1ec>)
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f002 ff92 	bl	800e5d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b6b4:	e0aa      	b.n	800b80c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800b6b6:	4b57      	ldr	r3, [pc, #348]	; (800b814 <tcp_listen_input+0x1c8>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	f003 0302 	and.w	r3, r3, #2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 80a4 	beq.w	800b80c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	7d5b      	ldrb	r3, [r3, #21]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff f92b 	bl	800a924 <tcp_alloc>
 800b6ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d111      	bne.n	800b6fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <tcp_listen_input+0xa8>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	6910      	ldr	r0, [r2, #16]
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	4798      	blx	r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73bb      	strb	r3, [r7, #14]
      return;
 800b6f2:	e08c      	b.n	800b80e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b6f4:	23f0      	movs	r3, #240	; 0xf0
 800b6f6:	73bb      	strb	r3, [r7, #14]
      return;
 800b6f8:	e089      	b.n	800b80e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b6fa:	4b50      	ldr	r3, [pc, #320]	; (800b83c <tcp_listen_input+0x1f0>)
 800b6fc:	695a      	ldr	r2, [r3, #20]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b702:	4b4e      	ldr	r3, [pc, #312]	; (800b83c <tcp_listen_input+0x1f0>)
 800b704:	691a      	ldr	r2, [r3, #16]
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	8ada      	ldrh	r2, [r3, #22]
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b712:	4b47      	ldr	r3, [pc, #284]	; (800b830 <tcp_listen_input+0x1e4>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2203      	movs	r2, #3
 800b722:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b724:	4b41      	ldr	r3, [pc, #260]	; (800b82c <tcp_listen_input+0x1e0>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b736:	6978      	ldr	r0, [r7, #20]
 800b738:	f7ff fa5c 	bl	800abf4 <tcp_next_iss>
 800b73c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b756:	4b35      	ldr	r3, [pc, #212]	; (800b82c <tcp_listen_input+0x1e0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	1e5a      	subs	r2, r3, #1
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	7a5b      	ldrb	r3, [r3, #9]
 800b772:	f003 030c 	and.w	r3, r3, #12
 800b776:	b2da      	uxtb	r2, r3
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7a1a      	ldrb	r2, [r3, #8]
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b784:	4b2e      	ldr	r3, [pc, #184]	; (800b840 <tcp_listen_input+0x1f4>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	60da      	str	r2, [r3, #12]
 800b78c:	4a2c      	ldr	r2, [pc, #176]	; (800b840 <tcp_listen_input+0x1f4>)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	f003 f8e3 	bl	800e95c <tcp_timer_needed>
 800b796:	4b2b      	ldr	r3, [pc, #172]	; (800b844 <tcp_listen_input+0x1f8>)
 800b798:	2201      	movs	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b79c:	6978      	ldr	r0, [r7, #20]
 800b79e:	f001 fd8f 	bl	800d2c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b7a2:	4b23      	ldr	r3, [pc, #140]	; (800b830 <tcp_listen_input+0x1e4>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	89db      	ldrh	r3, [r3, #14]
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f005 f885 	bl	80108d4 <ip4_route>
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f7ff fa34 	bl	800ac40 <tcp_eff_send_mss_netif>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	461a      	mov	r2, r3
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b7e0:	2112      	movs	r1, #18
 800b7e2:	6978      	ldr	r0, [r7, #20]
 800b7e4:	f002 f844 	bl	800d870 <tcp_enqueue_flags>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b7ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d004      	beq.n	800b7fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	6978      	ldr	r0, [r7, #20]
 800b7f8:	f7fe f986 	bl	8009b08 <tcp_abandon>
      return;
 800b7fc:	e007      	b.n	800b80e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800b7fe:	6978      	ldr	r0, [r7, #20]
 800b800:	f002 f924 	bl	800da4c <tcp_output>
  return;
 800b804:	bf00      	nop
 800b806:	e001      	b.n	800b80c <tcp_listen_input+0x1c0>
    return;
 800b808:	bf00      	nop
 800b80a:	e000      	b.n	800b80e <tcp_listen_input+0x1c2>
  return;
 800b80c:	bf00      	nop
}
 800b80e:	371c      	adds	r7, #28
 800b810:	46bd      	mov	sp, r7
 800b812:	bd90      	pop	{r4, r7, pc}
 800b814:	2400011c 	.word	0x2400011c
 800b818:	08013dc4 	.word	0x08013dc4
 800b81c:	08013fbc 	.word	0x08013fbc
 800b820:	08013e10 	.word	0x08013e10
 800b824:	24000114 	.word	0x24000114
 800b828:	2400011a 	.word	0x2400011a
 800b82c:	24000110 	.word	0x24000110
 800b830:	24000100 	.word	0x24000100
 800b834:	24000530 	.word	0x24000530
 800b838:	24000534 	.word	0x24000534
 800b83c:	24000520 	.word	0x24000520
 800b840:	24003410 	.word	0x24003410
 800b844:	2400340c 	.word	0x2400340c

0800b848 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af04      	add	r7, sp, #16
 800b84e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b850:	4b30      	ldr	r3, [pc, #192]	; (800b914 <tcp_timewait_input+0xcc>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	f003 0304 	and.w	r3, r3, #4
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d154      	bne.n	800b906 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <tcp_timewait_input+0x28>
 800b862:	4b2d      	ldr	r3, [pc, #180]	; (800b918 <tcp_timewait_input+0xd0>)
 800b864:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b868:	492c      	ldr	r1, [pc, #176]	; (800b91c <tcp_timewait_input+0xd4>)
 800b86a:	482d      	ldr	r0, [pc, #180]	; (800b920 <tcp_timewait_input+0xd8>)
 800b86c:	f006 fa58 	bl	8011d20 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b870:	4b28      	ldr	r3, [pc, #160]	; (800b914 <tcp_timewait_input+0xcc>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d02a      	beq.n	800b8d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b87c:	4b29      	ldr	r3, [pc, #164]	; (800b924 <tcp_timewait_input+0xdc>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	db2d      	blt.n	800b8e6 <tcp_timewait_input+0x9e>
 800b88a:	4b26      	ldr	r3, [pc, #152]	; (800b924 <tcp_timewait_input+0xdc>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b896:	440b      	add	r3, r1
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dc23      	bgt.n	800b8e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b89e:	4b22      	ldr	r3, [pc, #136]	; (800b928 <tcp_timewait_input+0xe0>)
 800b8a0:	6819      	ldr	r1, [r3, #0]
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <tcp_timewait_input+0xe4>)
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4b1e      	ldr	r3, [pc, #120]	; (800b924 <tcp_timewait_input+0xdc>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8ae:	4b20      	ldr	r3, [pc, #128]	; (800b930 <tcp_timewait_input+0xe8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8b2:	885b      	ldrh	r3, [r3, #2]
 800b8b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8b6:	4a1e      	ldr	r2, [pc, #120]	; (800b930 <tcp_timewait_input+0xe8>)
 800b8b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ba:	8812      	ldrh	r2, [r2, #0]
 800b8bc:	b292      	uxth	r2, r2
 800b8be:	9202      	str	r2, [sp, #8]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <tcp_timewait_input+0xec>)
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	; (800b938 <tcp_timewait_input+0xf0>)
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f002 fe84 	bl	800e5d8 <tcp_rst>
      return;
 800b8d0:	e01c      	b.n	800b90c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800b8d2:	4b10      	ldr	r3, [pc, #64]	; (800b914 <tcp_timewait_input+0xcc>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b8de:	4b17      	ldr	r3, [pc, #92]	; (800b93c <tcp_timewait_input+0xf4>)
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b8e6:	4b11      	ldr	r3, [pc, #68]	; (800b92c <tcp_timewait_input+0xe4>)
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00d      	beq.n	800b90a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	8b5b      	ldrh	r3, [r3, #26]
 800b8f2:	f043 0302 	orr.w	r3, r3, #2
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f002 f8a5 	bl	800da4c <tcp_output>
  }
  return;
 800b902:	bf00      	nop
 800b904:	e001      	b.n	800b90a <tcp_timewait_input+0xc2>
    return;
 800b906:	bf00      	nop
 800b908:	e000      	b.n	800b90c <tcp_timewait_input+0xc4>
  return;
 800b90a:	bf00      	nop
}
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	2400011c 	.word	0x2400011c
 800b918:	08013dc4 	.word	0x08013dc4
 800b91c:	08013fdc 	.word	0x08013fdc
 800b920:	08013e10 	.word	0x08013e10
 800b924:	24000110 	.word	0x24000110
 800b928:	24000114 	.word	0x24000114
 800b92c:	2400011a 	.word	0x2400011a
 800b930:	24000100 	.word	0x24000100
 800b934:	24000530 	.word	0x24000530
 800b938:	24000534 	.word	0x24000534
 800b93c:	24003414 	.word	0x24003414

0800b940 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b940:	b590      	push	{r4, r7, lr}
 800b942:	b08d      	sub	sp, #52	; 0x34
 800b944:	af04      	add	r7, sp, #16
 800b946:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d106      	bne.n	800b964 <tcp_process+0x24>
 800b956:	4ba5      	ldr	r3, [pc, #660]	; (800bbec <tcp_process+0x2ac>)
 800b958:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b95c:	49a4      	ldr	r1, [pc, #656]	; (800bbf0 <tcp_process+0x2b0>)
 800b95e:	48a5      	ldr	r0, [pc, #660]	; (800bbf4 <tcp_process+0x2b4>)
 800b960:	f006 f9de 	bl	8011d20 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b964:	4ba4      	ldr	r3, [pc, #656]	; (800bbf8 <tcp_process+0x2b8>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d04e      	beq.n	800ba0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	7d1b      	ldrb	r3, [r3, #20]
 800b974:	2b02      	cmp	r3, #2
 800b976:	d108      	bne.n	800b98a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b97c:	4b9f      	ldr	r3, [pc, #636]	; (800bbfc <tcp_process+0x2bc>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d123      	bne.n	800b9cc <tcp_process+0x8c>
        acceptable = 1;
 800b984:	2301      	movs	r3, #1
 800b986:	76fb      	strb	r3, [r7, #27]
 800b988:	e020      	b.n	800b9cc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b98e:	4b9c      	ldr	r3, [pc, #624]	; (800bc00 <tcp_process+0x2c0>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d102      	bne.n	800b99c <tcp_process+0x5c>
        acceptable = 1;
 800b996:	2301      	movs	r3, #1
 800b998:	76fb      	strb	r3, [r7, #27]
 800b99a:	e017      	b.n	800b9cc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b99c:	4b98      	ldr	r3, [pc, #608]	; (800bc00 <tcp_process+0x2c0>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	db10      	blt.n	800b9cc <tcp_process+0x8c>
 800b9aa:	4b95      	ldr	r3, [pc, #596]	; (800bc00 <tcp_process+0x2c0>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9b6:	440b      	add	r3, r1
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	dc06      	bgt.n	800b9cc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	8b5b      	ldrh	r3, [r3, #26]
 800b9c2:	f043 0302 	orr.w	r3, r3, #2
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b9cc:	7efb      	ldrb	r3, [r7, #27]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01b      	beq.n	800ba0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7d1b      	ldrb	r3, [r3, #20]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <tcp_process+0xa8>
 800b9da:	4b84      	ldr	r3, [pc, #528]	; (800bbec <tcp_process+0x2ac>)
 800b9dc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b9e0:	4988      	ldr	r1, [pc, #544]	; (800bc04 <tcp_process+0x2c4>)
 800b9e2:	4884      	ldr	r0, [pc, #528]	; (800bbf4 <tcp_process+0x2b4>)
 800b9e4:	f006 f99c 	bl	8011d20 <iprintf>
      recv_flags |= TF_RESET;
 800b9e8:	4b87      	ldr	r3, [pc, #540]	; (800bc08 <tcp_process+0x2c8>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	f043 0308 	orr.w	r3, r3, #8
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	4b85      	ldr	r3, [pc, #532]	; (800bc08 <tcp_process+0x2c8>)
 800b9f4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	8b5b      	ldrh	r3, [r3, #26]
 800b9fa:	f023 0301 	bic.w	r3, r3, #1
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ba04:	f06f 030d 	mvn.w	r3, #13
 800ba08:	e37a      	b.n	800c100 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e378      	b.n	800c100 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ba0e:	4b7a      	ldr	r3, [pc, #488]	; (800bbf8 <tcp_process+0x2b8>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	f003 0302 	and.w	r3, r3, #2
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d010      	beq.n	800ba3c <tcp_process+0xfc>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7d1b      	ldrb	r3, [r3, #20]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d00c      	beq.n	800ba3c <tcp_process+0xfc>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	7d1b      	ldrb	r3, [r3, #20]
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d008      	beq.n	800ba3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	8b5b      	ldrh	r3, [r3, #26]
 800ba2e:	f043 0302 	orr.w	r3, r3, #2
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e361      	b.n	800c100 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	8b5b      	ldrh	r3, [r3, #26]
 800ba40:	f003 0310 	and.w	r3, r3, #16
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d103      	bne.n	800ba50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ba48:	4b70      	ldr	r3, [pc, #448]	; (800bc0c <tcp_process+0x2cc>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f001 fc2d 	bl	800d2c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	7d1b      	ldrb	r3, [r3, #20]
 800ba6a:	3b02      	subs	r3, #2
 800ba6c:	2b07      	cmp	r3, #7
 800ba6e:	f200 8337 	bhi.w	800c0e0 <tcp_process+0x7a0>
 800ba72:	a201      	add	r2, pc, #4	; (adr r2, 800ba78 <tcp_process+0x138>)
 800ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba78:	0800ba99 	.word	0x0800ba99
 800ba7c:	0800bcc9 	.word	0x0800bcc9
 800ba80:	0800be41 	.word	0x0800be41
 800ba84:	0800be6b 	.word	0x0800be6b
 800ba88:	0800bf8f 	.word	0x0800bf8f
 800ba8c:	0800be41 	.word	0x0800be41
 800ba90:	0800c01b 	.word	0x0800c01b
 800ba94:	0800c0ab 	.word	0x0800c0ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ba98:	4b57      	ldr	r3, [pc, #348]	; (800bbf8 <tcp_process+0x2b8>)
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	f003 0310 	and.w	r3, r3, #16
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 80e4 	beq.w	800bc6e <tcp_process+0x32e>
 800baa6:	4b54      	ldr	r3, [pc, #336]	; (800bbf8 <tcp_process+0x2b8>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	f003 0302 	and.w	r3, r3, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 80dd 	beq.w	800bc6e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	4b50      	ldr	r3, [pc, #320]	; (800bbfc <tcp_process+0x2bc>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	429a      	cmp	r2, r3
 800bac0:	f040 80d5 	bne.w	800bc6e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bac4:	4b4e      	ldr	r3, [pc, #312]	; (800bc00 <tcp_process+0x2c0>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bad6:	4b49      	ldr	r3, [pc, #292]	; (800bbfc <tcp_process+0x2bc>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bade:	4b4c      	ldr	r3, [pc, #304]	; (800bc10 <tcp_process+0x2d0>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	89db      	ldrh	r3, [r3, #14]
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800baf8:	4b41      	ldr	r3, [pc, #260]	; (800bc00 <tcp_process+0x2c0>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	1e5a      	subs	r2, r3, #1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2204      	movs	r2, #4
 800bb06:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	4618      	mov	r0, r3
 800bb12:	f004 fedf 	bl	80108d4 <ip4_route>
 800bb16:	4601      	mov	r1, r0
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f7ff f88e 	bl	800ac40 <tcp_eff_send_mss_netif>
 800bb24:	4603      	mov	r3, r0
 800bb26:	461a      	mov	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb30:	009a      	lsls	r2, r3, #2
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	f241 111c 	movw	r1, #4380	; 0x111c
 800bb3c:	428b      	cmp	r3, r1
 800bb3e:	bf38      	it	cc
 800bb40:	460b      	movcc	r3, r1
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d204      	bcs.n	800bb50 <tcp_process+0x210>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	e00d      	b.n	800bb6c <tcp_process+0x22c>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	f241 121c 	movw	r2, #4380	; 0x111c
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d904      	bls.n	800bb68 <tcp_process+0x228>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	e001      	b.n	800bb6c <tcp_process+0x22c>
 800bb68:	f241 131c 	movw	r3, #4380	; 0x111c
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d106      	bne.n	800bb8a <tcp_process+0x24a>
 800bb7c:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <tcp_process+0x2ac>)
 800bb7e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bb82:	4924      	ldr	r1, [pc, #144]	; (800bc14 <tcp_process+0x2d4>)
 800bb84:	481b      	ldr	r0, [pc, #108]	; (800bbf4 <tcp_process+0x2b4>)
 800bb86:	f006 f8cb 	bl	8011d20 <iprintf>
        --pcb->snd_queuelen;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb90:	3b01      	subs	r3, #1
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d111      	bne.n	800bbca <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbaa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <tcp_process+0x280>
 800bbb2:	4b0e      	ldr	r3, [pc, #56]	; (800bbec <tcp_process+0x2ac>)
 800bbb4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bbb8:	4917      	ldr	r1, [pc, #92]	; (800bc18 <tcp_process+0x2d8>)
 800bbba:	480e      	ldr	r0, [pc, #56]	; (800bbf4 <tcp_process+0x2b4>)
 800bbbc:	f006 f8b0 	bl	8011d20 <iprintf>
          pcb->unsent = rseg->next;
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	66da      	str	r2, [r3, #108]	; 0x6c
 800bbc8:	e003      	b.n	800bbd2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bbd2:	69f8      	ldr	r0, [r7, #28]
 800bbd4:	f7fe fd3e 	bl	800a654 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11d      	bne.n	800bc1c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbe6:	861a      	strh	r2, [r3, #48]	; 0x30
 800bbe8:	e01f      	b.n	800bc2a <tcp_process+0x2ea>
 800bbea:	bf00      	nop
 800bbec:	08013dc4 	.word	0x08013dc4
 800bbf0:	08013ffc 	.word	0x08013ffc
 800bbf4:	08013e10 	.word	0x08013e10
 800bbf8:	2400011c 	.word	0x2400011c
 800bbfc:	24000114 	.word	0x24000114
 800bc00:	24000110 	.word	0x24000110
 800bc04:	08014018 	.word	0x08014018
 800bc08:	2400011d 	.word	0x2400011d
 800bc0c:	24003414 	.word	0x24003414
 800bc10:	24000100 	.word	0x24000100
 800bc14:	08014038 	.word	0x08014038
 800bc18:	08014050 	.word	0x08014050
        } else {
          pcb->rtime = 0;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <tcp_process+0x30a>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6910      	ldr	r0, [r2, #16]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	4798      	blx	r3
 800bc44:	4603      	mov	r3, r0
 800bc46:	76bb      	strb	r3, [r7, #26]
 800bc48:	e001      	b.n	800bc4e <tcp_process+0x30e>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bc4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc52:	f113 0f0d 	cmn.w	r3, #13
 800bc56:	d102      	bne.n	800bc5e <tcp_process+0x31e>
          return ERR_ABRT;
 800bc58:	f06f 030c 	mvn.w	r3, #12
 800bc5c:	e250      	b.n	800c100 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	8b5b      	ldrh	r3, [r3, #26]
 800bc62:	f043 0302 	orr.w	r3, r3, #2
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bc6c:	e23a      	b.n	800c0e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bc6e:	4b9d      	ldr	r3, [pc, #628]	; (800bee4 <tcp_process+0x5a4>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	f003 0310 	and.w	r3, r3, #16
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8234 	beq.w	800c0e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc7c:	4b9a      	ldr	r3, [pc, #616]	; (800bee8 <tcp_process+0x5a8>)
 800bc7e:	6819      	ldr	r1, [r3, #0]
 800bc80:	4b9a      	ldr	r3, [pc, #616]	; (800beec <tcp_process+0x5ac>)
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	461a      	mov	r2, r3
 800bc86:	4b9a      	ldr	r3, [pc, #616]	; (800bef0 <tcp_process+0x5b0>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc8c:	4b99      	ldr	r3, [pc, #612]	; (800bef4 <tcp_process+0x5b4>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc90:	885b      	ldrh	r3, [r3, #2]
 800bc92:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc94:	4a97      	ldr	r2, [pc, #604]	; (800bef4 <tcp_process+0x5b4>)
 800bc96:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc98:	8812      	ldrh	r2, [r2, #0]
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	9202      	str	r2, [sp, #8]
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	4b95      	ldr	r3, [pc, #596]	; (800bef8 <tcp_process+0x5b8>)
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	4b95      	ldr	r3, [pc, #596]	; (800befc <tcp_process+0x5bc>)
 800bca6:	4602      	mov	r2, r0
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f002 fc95 	bl	800e5d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcb4:	2b05      	cmp	r3, #5
 800bcb6:	f200 8215 	bhi.w	800c0e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f002 fa53 	bl	800e16c <tcp_rexmit_rto>
      break;
 800bcc6:	e20d      	b.n	800c0e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bcc8:	4b86      	ldr	r3, [pc, #536]	; (800bee4 <tcp_process+0x5a4>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	f003 0310 	and.w	r3, r3, #16
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 80a1 	beq.w	800be18 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bcd6:	4b84      	ldr	r3, [pc, #528]	; (800bee8 <tcp_process+0x5a8>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	3b01      	subs	r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	db7e      	blt.n	800bde4 <tcp_process+0x4a4>
 800bce6:	4b80      	ldr	r3, [pc, #512]	; (800bee8 <tcp_process+0x5a8>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dc77      	bgt.n	800bde4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2204      	movs	r2, #4
 800bcf8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bd02:	23fa      	movs	r3, #250	; 0xfa
 800bd04:	76bb      	strb	r3, [r7, #26]
 800bd06:	e01d      	b.n	800bd44 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <tcp_process+0x3e0>
 800bd12:	4b7b      	ldr	r3, [pc, #492]	; (800bf00 <tcp_process+0x5c0>)
 800bd14:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bd18:	497a      	ldr	r1, [pc, #488]	; (800bf04 <tcp_process+0x5c4>)
 800bd1a:	487b      	ldr	r0, [pc, #492]	; (800bf08 <tcp_process+0x5c8>)
 800bd1c:	f006 f800 	bl	8011d20 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <tcp_process+0x400>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	6910      	ldr	r0, [r2, #16]
 800bd34:	2200      	movs	r2, #0
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	4798      	blx	r3
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	76bb      	strb	r3, [r7, #26]
 800bd3e:	e001      	b.n	800bd44 <tcp_process+0x404>
 800bd40:	23f0      	movs	r3, #240	; 0xf0
 800bd42:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bd44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bd4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bd50:	f113 0f0d 	cmn.w	r3, #13
 800bd54:	d002      	beq.n	800bd5c <tcp_process+0x41c>
              tcp_abort(pcb);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7fd ff94 	bl	8009c84 <tcp_abort>
            }
            return ERR_ABRT;
 800bd5c:	f06f 030c 	mvn.w	r3, #12
 800bd60:	e1ce      	b.n	800c100 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fae0 	bl	800c328 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bd68:	4b68      	ldr	r3, [pc, #416]	; (800bf0c <tcp_process+0x5cc>)
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <tcp_process+0x43c>
            recv_acked--;
 800bd70:	4b66      	ldr	r3, [pc, #408]	; (800bf0c <tcp_process+0x5cc>)
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	4b64      	ldr	r3, [pc, #400]	; (800bf0c <tcp_process+0x5cc>)
 800bd7a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd80:	009a      	lsls	r2, r3, #2
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	f241 111c 	movw	r1, #4380	; 0x111c
 800bd8c:	428b      	cmp	r3, r1
 800bd8e:	bf38      	it	cc
 800bd90:	460b      	movcc	r3, r1
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d204      	bcs.n	800bda0 <tcp_process+0x460>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	e00d      	b.n	800bdbc <tcp_process+0x47c>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	f241 121c 	movw	r2, #4380	; 0x111c
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d904      	bls.n	800bdb8 <tcp_process+0x478>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	e001      	b.n	800bdbc <tcp_process+0x47c>
 800bdb8:	f241 131c 	movw	r3, #4380	; 0x111c
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bdc2:	4b53      	ldr	r3, [pc, #332]	; (800bf10 <tcp_process+0x5d0>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	f003 0320 	and.w	r3, r3, #32
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d037      	beq.n	800be3e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	8b5b      	ldrh	r3, [r3, #26]
 800bdd2:	f043 0302 	orr.w	r3, r3, #2
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2207      	movs	r2, #7
 800bde0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bde2:	e02c      	b.n	800be3e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bde4:	4b40      	ldr	r3, [pc, #256]	; (800bee8 <tcp_process+0x5a8>)
 800bde6:	6819      	ldr	r1, [r3, #0]
 800bde8:	4b40      	ldr	r3, [pc, #256]	; (800beec <tcp_process+0x5ac>)
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	461a      	mov	r2, r3
 800bdee:	4b40      	ldr	r3, [pc, #256]	; (800bef0 <tcp_process+0x5b0>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdf4:	4b3f      	ldr	r3, [pc, #252]	; (800bef4 <tcp_process+0x5b4>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdf8:	885b      	ldrh	r3, [r3, #2]
 800bdfa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdfc:	4a3d      	ldr	r2, [pc, #244]	; (800bef4 <tcp_process+0x5b4>)
 800bdfe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be00:	8812      	ldrh	r2, [r2, #0]
 800be02:	b292      	uxth	r2, r2
 800be04:	9202      	str	r2, [sp, #8]
 800be06:	9301      	str	r3, [sp, #4]
 800be08:	4b3b      	ldr	r3, [pc, #236]	; (800bef8 <tcp_process+0x5b8>)
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	4b3b      	ldr	r3, [pc, #236]	; (800befc <tcp_process+0x5bc>)
 800be0e:	4602      	mov	r2, r0
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f002 fbe1 	bl	800e5d8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800be16:	e167      	b.n	800c0e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800be18:	4b32      	ldr	r3, [pc, #200]	; (800bee4 <tcp_process+0x5a4>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	f003 0302 	and.w	r3, r3, #2
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8161 	beq.w	800c0e8 <tcp_process+0x7a8>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2a:	1e5a      	subs	r2, r3, #1
 800be2c:	4b30      	ldr	r3, [pc, #192]	; (800bef0 <tcp_process+0x5b0>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	f040 8159 	bne.w	800c0e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f002 f9ba 	bl	800e1b0 <tcp_rexmit>
      break;
 800be3c:	e154      	b.n	800c0e8 <tcp_process+0x7a8>
 800be3e:	e153      	b.n	800c0e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fa71 	bl	800c328 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800be46:	4b32      	ldr	r3, [pc, #200]	; (800bf10 <tcp_process+0x5d0>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	f003 0320 	and.w	r3, r3, #32
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 814c 	beq.w	800c0ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8b5b      	ldrh	r3, [r3, #26]
 800be58:	f043 0302 	orr.w	r3, r3, #2
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2207      	movs	r2, #7
 800be66:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be68:	e140      	b.n	800c0ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa5c 	bl	800c328 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800be70:	4b27      	ldr	r3, [pc, #156]	; (800bf10 <tcp_process+0x5d0>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	f003 0320 	and.w	r3, r3, #32
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d071      	beq.n	800bf60 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800be7c:	4b19      	ldr	r3, [pc, #100]	; (800bee4 <tcp_process+0x5a4>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	f003 0310 	and.w	r3, r3, #16
 800be84:	2b00      	cmp	r3, #0
 800be86:	d060      	beq.n	800bf4a <tcp_process+0x60a>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be8c:	4b16      	ldr	r3, [pc, #88]	; (800bee8 <tcp_process+0x5a8>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d15a      	bne.n	800bf4a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d156      	bne.n	800bf4a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	8b5b      	ldrh	r3, [r3, #26]
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7fe fdbe 	bl	800aa2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800beb0:	4b18      	ldr	r3, [pc, #96]	; (800bf14 <tcp_process+0x5d4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d105      	bne.n	800bec6 <tcp_process+0x586>
 800beba:	4b16      	ldr	r3, [pc, #88]	; (800bf14 <tcp_process+0x5d4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	4a14      	ldr	r2, [pc, #80]	; (800bf14 <tcp_process+0x5d4>)
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	e02e      	b.n	800bf24 <tcp_process+0x5e4>
 800bec6:	4b13      	ldr	r3, [pc, #76]	; (800bf14 <tcp_process+0x5d4>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	e027      	b.n	800bf1e <tcp_process+0x5de>
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d11f      	bne.n	800bf18 <tcp_process+0x5d8>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	60da      	str	r2, [r3, #12]
 800bee0:	e020      	b.n	800bf24 <tcp_process+0x5e4>
 800bee2:	bf00      	nop
 800bee4:	2400011c 	.word	0x2400011c
 800bee8:	24000114 	.word	0x24000114
 800beec:	2400011a 	.word	0x2400011a
 800bef0:	24000110 	.word	0x24000110
 800bef4:	24000100 	.word	0x24000100
 800bef8:	24000530 	.word	0x24000530
 800befc:	24000534 	.word	0x24000534
 800bf00:	08013dc4 	.word	0x08013dc4
 800bf04:	08014064 	.word	0x08014064
 800bf08:	08013e10 	.word	0x08013e10
 800bf0c:	24000118 	.word	0x24000118
 800bf10:	2400011d 	.word	0x2400011d
 800bf14:	24003410 	.word	0x24003410
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	617b      	str	r3, [r7, #20]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1d4      	bne.n	800bece <tcp_process+0x58e>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	60da      	str	r2, [r3, #12]
 800bf2a:	4b77      	ldr	r3, [pc, #476]	; (800c108 <tcp_process+0x7c8>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	220a      	movs	r2, #10
 800bf34:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bf36:	4b75      	ldr	r3, [pc, #468]	; (800c10c <tcp_process+0x7cc>)
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	60da      	str	r2, [r3, #12]
 800bf3e:	4a73      	ldr	r2, [pc, #460]	; (800c10c <tcp_process+0x7cc>)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	f002 fd0a 	bl	800e95c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bf48:	e0d2      	b.n	800c0f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	8b5b      	ldrh	r3, [r3, #26]
 800bf4e:	f043 0302 	orr.w	r3, r3, #2
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	751a      	strb	r2, [r3, #20]
      break;
 800bf5e:	e0c7      	b.n	800c0f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf60:	4b6b      	ldr	r3, [pc, #428]	; (800c110 <tcp_process+0x7d0>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 0310 	and.w	r3, r3, #16
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 80c1 	beq.w	800c0f0 <tcp_process+0x7b0>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf72:	4b68      	ldr	r3, [pc, #416]	; (800c114 <tcp_process+0x7d4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	f040 80ba 	bne.w	800c0f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f040 80b5 	bne.w	800c0f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2206      	movs	r2, #6
 800bf8a:	751a      	strb	r2, [r3, #20]
      break;
 800bf8c:	e0b0      	b.n	800c0f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f9ca 	bl	800c328 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bf94:	4b60      	ldr	r3, [pc, #384]	; (800c118 <tcp_process+0x7d8>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 0320 	and.w	r3, r3, #32
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 80a9 	beq.w	800c0f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	8b5b      	ldrh	r3, [r3, #26]
 800bfa6:	f043 0302 	orr.w	r3, r3, #2
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7fe fd3b 	bl	800aa2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bfb6:	4b59      	ldr	r3, [pc, #356]	; (800c11c <tcp_process+0x7dc>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d105      	bne.n	800bfcc <tcp_process+0x68c>
 800bfc0:	4b56      	ldr	r3, [pc, #344]	; (800c11c <tcp_process+0x7dc>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	4a55      	ldr	r2, [pc, #340]	; (800c11c <tcp_process+0x7dc>)
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	e013      	b.n	800bff4 <tcp_process+0x6b4>
 800bfcc:	4b53      	ldr	r3, [pc, #332]	; (800c11c <tcp_process+0x7dc>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	613b      	str	r3, [r7, #16]
 800bfd2:	e00c      	b.n	800bfee <tcp_process+0x6ae>
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d104      	bne.n	800bfe8 <tcp_process+0x6a8>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e005      	b.n	800bff4 <tcp_process+0x6b4>
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	613b      	str	r3, [r7, #16]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1ef      	bne.n	800bfd4 <tcp_process+0x694>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	60da      	str	r2, [r3, #12]
 800bffa:	4b43      	ldr	r3, [pc, #268]	; (800c108 <tcp_process+0x7c8>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	220a      	movs	r2, #10
 800c004:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c006:	4b41      	ldr	r3, [pc, #260]	; (800c10c <tcp_process+0x7cc>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60da      	str	r2, [r3, #12]
 800c00e:	4a3f      	ldr	r2, [pc, #252]	; (800c10c <tcp_process+0x7cc>)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	f002 fca2 	bl	800e95c <tcp_timer_needed>
      }
      break;
 800c018:	e06c      	b.n	800c0f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f984 	bl	800c328 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c020:	4b3b      	ldr	r3, [pc, #236]	; (800c110 <tcp_process+0x7d0>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d065      	beq.n	800c0f8 <tcp_process+0x7b8>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c030:	4b38      	ldr	r3, [pc, #224]	; (800c114 <tcp_process+0x7d4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	429a      	cmp	r2, r3
 800c036:	d15f      	bne.n	800c0f8 <tcp_process+0x7b8>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d15b      	bne.n	800c0f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7fe fcf3 	bl	800aa2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c046:	4b35      	ldr	r3, [pc, #212]	; (800c11c <tcp_process+0x7dc>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d105      	bne.n	800c05c <tcp_process+0x71c>
 800c050:	4b32      	ldr	r3, [pc, #200]	; (800c11c <tcp_process+0x7dc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	4a31      	ldr	r2, [pc, #196]	; (800c11c <tcp_process+0x7dc>)
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	e013      	b.n	800c084 <tcp_process+0x744>
 800c05c:	4b2f      	ldr	r3, [pc, #188]	; (800c11c <tcp_process+0x7dc>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	e00c      	b.n	800c07e <tcp_process+0x73e>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d104      	bne.n	800c078 <tcp_process+0x738>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	e005      	b.n	800c084 <tcp_process+0x744>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1ef      	bne.n	800c064 <tcp_process+0x724>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	60da      	str	r2, [r3, #12]
 800c08a:	4b1f      	ldr	r3, [pc, #124]	; (800c108 <tcp_process+0x7c8>)
 800c08c:	2201      	movs	r2, #1
 800c08e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	220a      	movs	r2, #10
 800c094:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c096:	4b1d      	ldr	r3, [pc, #116]	; (800c10c <tcp_process+0x7cc>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	60da      	str	r2, [r3, #12]
 800c09e:	4a1b      	ldr	r2, [pc, #108]	; (800c10c <tcp_process+0x7cc>)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	f002 fc5a 	bl	800e95c <tcp_timer_needed>
      }
      break;
 800c0a8:	e026      	b.n	800c0f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f93c 	bl	800c328 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c0b0:	4b17      	ldr	r3, [pc, #92]	; (800c110 <tcp_process+0x7d0>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	f003 0310 	and.w	r3, r3, #16
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d01f      	beq.n	800c0fc <tcp_process+0x7bc>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0c0:	4b14      	ldr	r3, [pc, #80]	; (800c114 <tcp_process+0x7d4>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d119      	bne.n	800c0fc <tcp_process+0x7bc>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d115      	bne.n	800c0fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c0d0:	4b11      	ldr	r3, [pc, #68]	; (800c118 <tcp_process+0x7d8>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f043 0310 	orr.w	r3, r3, #16
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <tcp_process+0x7d8>)
 800c0dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c0de:	e00d      	b.n	800c0fc <tcp_process+0x7bc>
    default:
      break;
 800c0e0:	bf00      	nop
 800c0e2:	e00c      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0e4:	bf00      	nop
 800c0e6:	e00a      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0e8:	bf00      	nop
 800c0ea:	e008      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0ec:	bf00      	nop
 800c0ee:	e006      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0f0:	bf00      	nop
 800c0f2:	e004      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0f4:	bf00      	nop
 800c0f6:	e002      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0f8:	bf00      	nop
 800c0fa:	e000      	b.n	800c0fe <tcp_process+0x7be>
      break;
 800c0fc:	bf00      	nop
  }
  return ERR_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3724      	adds	r7, #36	; 0x24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd90      	pop	{r4, r7, pc}
 800c108:	2400340c 	.word	0x2400340c
 800c10c:	24003420 	.word	0x24003420
 800c110:	2400011c 	.word	0x2400011c
 800c114:	24000114 	.word	0x24000114
 800c118:	2400011d 	.word	0x2400011d
 800c11c:	24003410 	.word	0x24003410

0800c120 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c120:	b590      	push	{r4, r7, lr}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <tcp_oos_insert_segment+0x1e>
 800c130:	4b3b      	ldr	r3, [pc, #236]	; (800c220 <tcp_oos_insert_segment+0x100>)
 800c132:	f240 421f 	movw	r2, #1055	; 0x41f
 800c136:	493b      	ldr	r1, [pc, #236]	; (800c224 <tcp_oos_insert_segment+0x104>)
 800c138:	483b      	ldr	r0, [pc, #236]	; (800c228 <tcp_oos_insert_segment+0x108>)
 800c13a:	f005 fdf1 	bl	8011d20 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	899b      	ldrh	r3, [r3, #12]
 800c144:	b29b      	uxth	r3, r3
 800c146:	4618      	mov	r0, r3
 800c148:	f7fb fb58 	bl	80077fc <lwip_htons>
 800c14c:	4603      	mov	r3, r0
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d028      	beq.n	800c1aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c158:	6838      	ldr	r0, [r7, #0]
 800c15a:	f7fe fa67 	bl	800a62c <tcp_segs_free>
    next = NULL;
 800c15e:	2300      	movs	r3, #0
 800c160:	603b      	str	r3, [r7, #0]
 800c162:	e056      	b.n	800c212 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fb fb45 	bl	80077fc <lwip_htons>
 800c172:	4603      	mov	r3, r0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00d      	beq.n	800c19a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	899b      	ldrh	r3, [r3, #12]
 800c184:	b29c      	uxth	r4, r3
 800c186:	2001      	movs	r0, #1
 800c188:	f7fb fb38 	bl	80077fc <lwip_htons>
 800c18c:	4603      	mov	r3, r0
 800c18e:	461a      	mov	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	4322      	orrs	r2, r4
 800c196:	b292      	uxth	r2, r2
 800c198:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f7fe fa55 	bl	800a654 <tcp_seg_free>
    while (next &&
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00e      	beq.n	800c1ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	891b      	ldrh	r3, [r3, #8]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	4b1d      	ldr	r3, [pc, #116]	; (800c22c <tcp_oos_insert_segment+0x10c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	441a      	add	r2, r3
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	8909      	ldrh	r1, [r1, #8]
 800c1c6:	440b      	add	r3, r1
 800c1c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	daca      	bge.n	800c164 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d01e      	beq.n	800c212 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	891b      	ldrh	r3, [r3, #8]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4b14      	ldr	r3, [pc, #80]	; (800c22c <tcp_oos_insert_segment+0x10c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	441a      	add	r2, r3
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dd12      	ble.n	800c212 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	4b0d      	ldr	r3, [pc, #52]	; (800c22c <tcp_oos_insert_segment+0x10c>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	891b      	ldrh	r3, [r3, #8]
 800c20a:	4619      	mov	r1, r3
 800c20c:	4610      	mov	r0, r2
 800c20e:	f7fc fd91 	bl	8008d34 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	601a      	str	r2, [r3, #0]
}
 800c218:	bf00      	nop
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd90      	pop	{r4, r7, pc}
 800c220:	08013dc4 	.word	0x08013dc4
 800c224:	08014084 	.word	0x08014084
 800c228:	08013e10 	.word	0x08013e10
 800c22c:	24000110 	.word	0x24000110

0800c230 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c230:	b5b0      	push	{r4, r5, r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c23e:	e03e      	b.n	800c2be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fc ff7e 	bl	8009150 <pbuf_clen>
 800c254:	4603      	mov	r3, r0
 800c256:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c25e:	8a7a      	ldrh	r2, [r7, #18]
 800c260:	429a      	cmp	r2, r3
 800c262:	d906      	bls.n	800c272 <tcp_free_acked_segments+0x42>
 800c264:	4b2a      	ldr	r3, [pc, #168]	; (800c310 <tcp_free_acked_segments+0xe0>)
 800c266:	f240 4257 	movw	r2, #1111	; 0x457
 800c26a:	492a      	ldr	r1, [pc, #168]	; (800c314 <tcp_free_acked_segments+0xe4>)
 800c26c:	482a      	ldr	r0, [pc, #168]	; (800c318 <tcp_free_acked_segments+0xe8>)
 800c26e:	f005 fd57 	bl	8011d20 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c278:	8a7b      	ldrh	r3, [r7, #18]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	891a      	ldrh	r2, [r3, #8]
 800c288:	4b24      	ldr	r3, [pc, #144]	; (800c31c <tcp_free_acked_segments+0xec>)
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	4413      	add	r3, r2
 800c28e:	b29a      	uxth	r2, r3
 800c290:	4b22      	ldr	r3, [pc, #136]	; (800c31c <tcp_free_acked_segments+0xec>)
 800c292:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c294:	6978      	ldr	r0, [r7, #20]
 800c296:	f7fe f9dd 	bl	800a654 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00c      	beq.n	800c2be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d109      	bne.n	800c2be <tcp_free_acked_segments+0x8e>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <tcp_free_acked_segments+0x8e>
 800c2b0:	4b17      	ldr	r3, [pc, #92]	; (800c310 <tcp_free_acked_segments+0xe0>)
 800c2b2:	f240 4262 	movw	r2, #1122	; 0x462
 800c2b6:	491a      	ldr	r1, [pc, #104]	; (800c320 <tcp_free_acked_segments+0xf0>)
 800c2b8:	4817      	ldr	r0, [pc, #92]	; (800c318 <tcp_free_acked_segments+0xe8>)
 800c2ba:	f005 fd31 	bl	8011d20 <iprintf>
  while (seg_list != NULL &&
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d020      	beq.n	800c306 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fb faab 	bl	8007826 <lwip_htonl>
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	891b      	ldrh	r3, [r3, #8]
 800c2d6:	461d      	mov	r5, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	899b      	ldrh	r3, [r3, #12]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fb fa8b 	bl	80077fc <lwip_htons>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <tcp_free_acked_segments+0xc6>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e000      	b.n	800c2f8 <tcp_free_acked_segments+0xc8>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	442b      	add	r3, r5
 800c2fa:	18e2      	adds	r2, r4, r3
 800c2fc:	4b09      	ldr	r3, [pc, #36]	; (800c324 <tcp_free_acked_segments+0xf4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c302:	2b00      	cmp	r3, #0
 800c304:	dd9c      	ble.n	800c240 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c306:	68bb      	ldr	r3, [r7, #8]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bdb0      	pop	{r4, r5, r7, pc}
 800c310:	08013dc4 	.word	0x08013dc4
 800c314:	080140ac 	.word	0x080140ac
 800c318:	08013e10 	.word	0x08013e10
 800c31c:	24000118 	.word	0x24000118
 800c320:	080140d4 	.word	0x080140d4
 800c324:	24000114 	.word	0x24000114

0800c328 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c328:	b5b0      	push	{r4, r5, r7, lr}
 800c32a:	b094      	sub	sp, #80	; 0x50
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <tcp_receive+0x20>
 800c33a:	4ba6      	ldr	r3, [pc, #664]	; (800c5d4 <tcp_receive+0x2ac>)
 800c33c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c340:	49a5      	ldr	r1, [pc, #660]	; (800c5d8 <tcp_receive+0x2b0>)
 800c342:	48a6      	ldr	r0, [pc, #664]	; (800c5dc <tcp_receive+0x2b4>)
 800c344:	f005 fcec 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	7d1b      	ldrb	r3, [r3, #20]
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d806      	bhi.n	800c35e <tcp_receive+0x36>
 800c350:	4ba0      	ldr	r3, [pc, #640]	; (800c5d4 <tcp_receive+0x2ac>)
 800c352:	f240 427c 	movw	r2, #1148	; 0x47c
 800c356:	49a2      	ldr	r1, [pc, #648]	; (800c5e0 <tcp_receive+0x2b8>)
 800c358:	48a0      	ldr	r0, [pc, #640]	; (800c5dc <tcp_receive+0x2b4>)
 800c35a:	f005 fce1 	bl	8011d20 <iprintf>

  if (flags & TCP_ACK) {
 800c35e:	4ba1      	ldr	r3, [pc, #644]	; (800c5e4 <tcp_receive+0x2bc>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	f003 0310 	and.w	r3, r3, #16
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 8263 	beq.w	800c832 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c372:	461a      	mov	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c378:	4413      	add	r3, r2
 800c37a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c380:	4b99      	ldr	r3, [pc, #612]	; (800c5e8 <tcp_receive+0x2c0>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	db1b      	blt.n	800c3c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c38e:	4b96      	ldr	r3, [pc, #600]	; (800c5e8 <tcp_receive+0x2c0>)
 800c390:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c392:	429a      	cmp	r2, r3
 800c394:	d106      	bne.n	800c3a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c39a:	4b94      	ldr	r3, [pc, #592]	; (800c5ec <tcp_receive+0x2c4>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	db0e      	blt.n	800c3c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3a8:	4b90      	ldr	r3, [pc, #576]	; (800c5ec <tcp_receive+0x2c4>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d125      	bne.n	800c3fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c3b0:	4b8f      	ldr	r3, [pc, #572]	; (800c5f0 <tcp_receive+0x2c8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	89db      	ldrh	r3, [r3, #14]
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d91c      	bls.n	800c3fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c3c2:	4b8b      	ldr	r3, [pc, #556]	; (800c5f0 <tcp_receive+0x2c8>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	89db      	ldrh	r3, [r3, #14]
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d205      	bcs.n	800c3ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c3ec:	4b7e      	ldr	r3, [pc, #504]	; (800c5e8 <tcp_receive+0x2c0>)
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c3f4:	4b7d      	ldr	r3, [pc, #500]	; (800c5ec <tcp_receive+0x2c4>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c3fc:	4b7b      	ldr	r3, [pc, #492]	; (800c5ec <tcp_receive+0x2c4>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	dc58      	bgt.n	800c4bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c40a:	4b7a      	ldr	r3, [pc, #488]	; (800c5f4 <tcp_receive+0x2cc>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d14b      	bne.n	800c4aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c41c:	4413      	add	r3, r2
 800c41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c420:	429a      	cmp	r2, r3
 800c422:	d142      	bne.n	800c4aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	db3d      	blt.n	800c4aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c432:	4b6e      	ldr	r3, [pc, #440]	; (800c5ec <tcp_receive+0x2c4>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d137      	bne.n	800c4aa <tcp_receive+0x182>
              found_dupack = 1;
 800c43a:	2301      	movs	r3, #1
 800c43c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c444:	2bff      	cmp	r3, #255	; 0xff
 800c446:	d007      	beq.n	800c458 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c44e:	3301      	adds	r3, #1
 800c450:	b2da      	uxtb	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d91b      	bls.n	800c49a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c46c:	4413      	add	r3, r2
 800c46e:	b29a      	uxth	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c476:	429a      	cmp	r2, r3
 800c478:	d30a      	bcc.n	800c490 <tcp_receive+0x168>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c484:	4413      	add	r3, r2
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c48e:	e004      	b.n	800c49a <tcp_receive+0x172>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d902      	bls.n	800c4aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f001 feef 	bl	800e288 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f040 8160 	bne.w	800c772 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4ba:	e15a      	b.n	800c772 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4bc:	4b4b      	ldr	r3, [pc, #300]	; (800c5ec <tcp_receive+0x2c4>)
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f2c0 814d 	blt.w	800c768 <tcp_receive+0x440>
 800c4ce:	4b47      	ldr	r3, [pc, #284]	; (800c5ec <tcp_receive+0x2c4>)
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f300 8145 	bgt.w	800c768 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	8b5b      	ldrh	r3, [r3, #26]
 800c4e2:	f003 0304 	and.w	r3, r3, #4
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d010      	beq.n	800c50c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	8b5b      	ldrh	r3, [r3, #26]
 800c4ee:	f023 0304 	bic.w	r3, r3, #4
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c51a:	10db      	asrs	r3, r3, #3
 800c51c:	b21b      	sxth	r3, r3
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c526:	b29b      	uxth	r3, r3
 800c528:	4413      	add	r3, r2
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	b21a      	sxth	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c534:	4b2d      	ldr	r3, [pc, #180]	; (800c5ec <tcp_receive+0x2c4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	b29a      	uxth	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53e:	b29b      	uxth	r3, r3
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c54c:	4b27      	ldr	r3, [pc, #156]	; (800c5ec <tcp_receive+0x2c4>)
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	7d1b      	ldrb	r3, [r3, #20]
 800c558:	2b03      	cmp	r3, #3
 800c55a:	f240 8096 	bls.w	800c68a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d244      	bcs.n	800c5f8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8b5b      	ldrh	r3, [r3, #26]
 800c572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <tcp_receive+0x256>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <tcp_receive+0x258>
 800c57e:	2302      	movs	r3, #2
 800c580:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c584:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c58e:	fb12 f303 	smulbb	r3, r2, r3
 800c592:	b29b      	uxth	r3, r3
 800c594:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c596:	4293      	cmp	r3, r2
 800c598:	bf28      	it	cs
 800c59a:	4613      	movcs	r3, r2
 800c59c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c5a6:	4413      	add	r3, r2
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d309      	bcc.n	800c5c8 <tcp_receive+0x2a0>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c5bc:	4413      	add	r3, r2
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c5c6:	e060      	b.n	800c68a <tcp_receive+0x362>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c5d2:	e05a      	b.n	800c68a <tcp_receive+0x362>
 800c5d4:	08013dc4 	.word	0x08013dc4
 800c5d8:	080140f4 	.word	0x080140f4
 800c5dc:	08013e10 	.word	0x08013e10
 800c5e0:	08014110 	.word	0x08014110
 800c5e4:	2400011c 	.word	0x2400011c
 800c5e8:	24000110 	.word	0x24000110
 800c5ec:	24000114 	.word	0x24000114
 800c5f0:	24000100 	.word	0x24000100
 800c5f4:	2400011a 	.word	0x2400011a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c5fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c600:	4413      	add	r3, r2
 800c602:	b29a      	uxth	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d309      	bcc.n	800c622 <tcp_receive+0x2fa>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c616:	4413      	add	r3, r2
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c620:	e004      	b.n	800c62c <tcp_receive+0x304>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c638:	429a      	cmp	r2, r3
 800c63a:	d326      	bcc.n	800c68a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c65c:	4413      	add	r3, r2
 800c65e:	b29a      	uxth	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c666:	429a      	cmp	r2, r3
 800c668:	d30a      	bcc.n	800c680 <tcp_receive+0x358>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c674:	4413      	add	r3, r2
 800c676:	b29a      	uxth	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c67e:	e004      	b.n	800c68a <tcp_receive+0x362>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c692:	4a98      	ldr	r2, [pc, #608]	; (800c8f4 <tcp_receive+0x5cc>)
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff fdcb 	bl	800c230 <tcp_free_acked_segments>
 800c69a:	4602      	mov	r2, r0
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a8:	4a93      	ldr	r2, [pc, #588]	; (800c8f8 <tcp_receive+0x5d0>)
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff fdc0 	bl	800c230 <tcp_free_acked_segments>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d104      	bne.n	800c6c8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6c4:	861a      	strh	r2, [r3, #48]	; 0x30
 800c6c6:	e002      	b.n	800c6ce <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d103      	bne.n	800c6e4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c6ea:	4b84      	ldr	r3, [pc, #528]	; (800c8fc <tcp_receive+0x5d4>)
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8b5b      	ldrh	r3, [r3, #26]
 800c6fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c700:	2b00      	cmp	r3, #0
 800c702:	d035      	beq.n	800c770 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d118      	bne.n	800c73e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00c      	beq.n	800c72e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	4618      	mov	r0, r3
 800c722:	f7fb f880 	bl	8007826 <lwip_htonl>
 800c726:	4603      	mov	r3, r0
 800c728:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	dc20      	bgt.n	800c770 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	8b5b      	ldrh	r3, [r3, #26]
 800c732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c73c:	e018      	b.n	800c770 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fb f86b 	bl	8007826 <lwip_htonl>
 800c750:	4603      	mov	r3, r0
 800c752:	1ae3      	subs	r3, r4, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	dc0b      	bgt.n	800c770 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8b5b      	ldrh	r3, [r3, #26]
 800c75c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c760:	b29a      	uxth	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c766:	e003      	b.n	800c770 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f001 ff87 	bl	800e67c <tcp_send_empty_ack>
 800c76e:	e000      	b.n	800c772 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c770:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c776:	2b00      	cmp	r3, #0
 800c778:	d05b      	beq.n	800c832 <tcp_receive+0x50a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c77e:	4b60      	ldr	r3, [pc, #384]	; (800c900 <tcp_receive+0x5d8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	da54      	bge.n	800c832 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c788:	4b5e      	ldr	r3, [pc, #376]	; (800c904 <tcp_receive+0x5dc>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c792:	b29b      	uxth	r3, r3
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	b29b      	uxth	r3, r3
 800c798:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c79c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7a6:	10db      	asrs	r3, r3, #3
 800c7a8:	b21b      	sxth	r3, r3
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7c0:	4413      	add	r3, r2
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	b21a      	sxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c7ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	da05      	bge.n	800c7de <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c7d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7d6:	425b      	negs	r3, r3
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c7de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c7e8:	109b      	asrs	r3, r3, #2
 800c7ea:	b21b      	sxth	r3, r3
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c802:	4413      	add	r3, r2
 800c804:	b29b      	uxth	r3, r3
 800c806:	b21a      	sxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c812:	10db      	asrs	r3, r3, #3
 800c814:	b21b      	sxth	r3, r3
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4413      	add	r3, r2
 800c822:	b29b      	uxth	r3, r3
 800c824:	b21a      	sxth	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c832:	4b35      	ldr	r3, [pc, #212]	; (800c908 <tcp_receive+0x5e0>)
 800c834:	881b      	ldrh	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	f000 84e1 	beq.w	800d1fe <tcp_receive+0xed6>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7d1b      	ldrb	r3, [r3, #20]
 800c840:	2b06      	cmp	r3, #6
 800c842:	f200 84dc 	bhi.w	800d1fe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c84a:	4b30      	ldr	r3, [pc, #192]	; (800c90c <tcp_receive+0x5e4>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	3b01      	subs	r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	f2c0 808e 	blt.w	800c974 <tcp_receive+0x64c>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c85c:	4b2a      	ldr	r3, [pc, #168]	; (800c908 <tcp_receive+0x5e0>)
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	4619      	mov	r1, r3
 800c862:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <tcp_receive+0x5e4>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	440b      	add	r3, r1
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	3301      	adds	r3, #1
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f300 8081 	bgt.w	800c974 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c872:	4b27      	ldr	r3, [pc, #156]	; (800c910 <tcp_receive+0x5e8>)
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c87c:	4b23      	ldr	r3, [pc, #140]	; (800c90c <tcp_receive+0x5e4>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c884:	4b22      	ldr	r3, [pc, #136]	; (800c910 <tcp_receive+0x5e8>)
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d106      	bne.n	800c89a <tcp_receive+0x572>
 800c88c:	4b21      	ldr	r3, [pc, #132]	; (800c914 <tcp_receive+0x5ec>)
 800c88e:	f240 5294 	movw	r2, #1428	; 0x594
 800c892:	4921      	ldr	r1, [pc, #132]	; (800c918 <tcp_receive+0x5f0>)
 800c894:	4821      	ldr	r0, [pc, #132]	; (800c91c <tcp_receive+0x5f4>)
 800c896:	f005 fa43 	bl	8011d20 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d906      	bls.n	800c8b2 <tcp_receive+0x58a>
 800c8a4:	4b1b      	ldr	r3, [pc, #108]	; (800c914 <tcp_receive+0x5ec>)
 800c8a6:	f240 5295 	movw	r2, #1429	; 0x595
 800c8aa:	491d      	ldr	r1, [pc, #116]	; (800c920 <tcp_receive+0x5f8>)
 800c8ac:	481b      	ldr	r0, [pc, #108]	; (800c91c <tcp_receive+0x5f4>)
 800c8ae:	f005 fa37 	bl	8011d20 <iprintf>
      off = (u16_t)off32;
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c8b8:	4b15      	ldr	r3, [pc, #84]	; (800c910 <tcp_receive+0x5e8>)
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	891b      	ldrh	r3, [r3, #8]
 800c8be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d906      	bls.n	800c8d4 <tcp_receive+0x5ac>
 800c8c6:	4b13      	ldr	r3, [pc, #76]	; (800c914 <tcp_receive+0x5ec>)
 800c8c8:	f240 5297 	movw	r2, #1431	; 0x597
 800c8cc:	4915      	ldr	r1, [pc, #84]	; (800c924 <tcp_receive+0x5fc>)
 800c8ce:	4813      	ldr	r0, [pc, #76]	; (800c91c <tcp_receive+0x5f4>)
 800c8d0:	f005 fa26 	bl	8011d20 <iprintf>
      inseg.len -= off;
 800c8d4:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <tcp_receive+0x5e8>)
 800c8d6:	891a      	ldrh	r2, [r3, #8]
 800c8d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <tcp_receive+0x5e8>)
 800c8e2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c8e4:	4b0a      	ldr	r3, [pc, #40]	; (800c910 <tcp_receive+0x5e8>)
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	891a      	ldrh	r2, [r3, #8]
 800c8ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c8f2:	e029      	b.n	800c948 <tcp_receive+0x620>
 800c8f4:	0801412c 	.word	0x0801412c
 800c8f8:	08014134 	.word	0x08014134
 800c8fc:	24000118 	.word	0x24000118
 800c900:	24000114 	.word	0x24000114
 800c904:	24003414 	.word	0x24003414
 800c908:	2400011a 	.word	0x2400011a
 800c90c:	24000110 	.word	0x24000110
 800c910:	240000f0 	.word	0x240000f0
 800c914:	08013dc4 	.word	0x08013dc4
 800c918:	0801413c 	.word	0x0801413c
 800c91c:	08013e10 	.word	0x08013e10
 800c920:	0801414c 	.word	0x0801414c
 800c924:	0801415c 	.word	0x0801415c
        off -= p->len;
 800c928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c92a:	895b      	ldrh	r3, [r3, #10]
 800c92c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c938:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c93a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93e:	2200      	movs	r2, #0
 800c940:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94a:	895b      	ldrh	r3, [r3, #10]
 800c94c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c950:	429a      	cmp	r2, r3
 800c952:	d8e9      	bhi.n	800c928 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c954:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c958:	4619      	mov	r1, r3
 800c95a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c95c:	f7fc faea 	bl	8008f34 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	4a91      	ldr	r2, [pc, #580]	; (800cbac <tcp_receive+0x884>)
 800c966:	6013      	str	r3, [r2, #0]
 800c968:	4b91      	ldr	r3, [pc, #580]	; (800cbb0 <tcp_receive+0x888>)
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	4a8f      	ldr	r2, [pc, #572]	; (800cbac <tcp_receive+0x884>)
 800c96e:	6812      	ldr	r2, [r2, #0]
 800c970:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c972:	e00d      	b.n	800c990 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c974:	4b8d      	ldr	r3, [pc, #564]	; (800cbac <tcp_receive+0x884>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da06      	bge.n	800c990 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	8b5b      	ldrh	r3, [r3, #26]
 800c986:	f043 0302 	orr.w	r3, r3, #2
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c990:	4b86      	ldr	r3, [pc, #536]	; (800cbac <tcp_receive+0x884>)
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f2c0 842a 	blt.w	800d1f4 <tcp_receive+0xecc>
 800c9a0:	4b82      	ldr	r3, [pc, #520]	; (800cbac <tcp_receive+0x884>)
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a8:	6879      	ldr	r1, [r7, #4]
 800c9aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c9ac:	440b      	add	r3, r1
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f300 841e 	bgt.w	800d1f4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9bc:	4b7b      	ldr	r3, [pc, #492]	; (800cbac <tcp_receive+0x884>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	f040 829a 	bne.w	800cefa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c9c6:	4b7a      	ldr	r3, [pc, #488]	; (800cbb0 <tcp_receive+0x888>)
 800c9c8:	891c      	ldrh	r4, [r3, #8]
 800c9ca:	4b79      	ldr	r3, [pc, #484]	; (800cbb0 <tcp_receive+0x888>)
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	899b      	ldrh	r3, [r3, #12]
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fa ff12 	bl	80077fc <lwip_htons>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	f003 0303 	and.w	r3, r3, #3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <tcp_receive+0x6c0>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e000      	b.n	800c9ea <tcp_receive+0x6c2>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4423      	add	r3, r4
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	4b71      	ldr	r3, [pc, #452]	; (800cbb4 <tcp_receive+0x88c>)
 800c9f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9f6:	4b6f      	ldr	r3, [pc, #444]	; (800cbb4 <tcp_receive+0x88c>)
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d275      	bcs.n	800caea <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c9fe:	4b6c      	ldr	r3, [pc, #432]	; (800cbb0 <tcp_receive+0x888>)
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	899b      	ldrh	r3, [r3, #12]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fa fef8 	bl	80077fc <lwip_htons>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d01f      	beq.n	800ca58 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ca18:	4b65      	ldr	r3, [pc, #404]	; (800cbb0 <tcp_receive+0x888>)
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	899b      	ldrh	r3, [r3, #12]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	b21b      	sxth	r3, r3
 800ca22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca26:	b21c      	sxth	r4, r3
 800ca28:	4b61      	ldr	r3, [pc, #388]	; (800cbb0 <tcp_receive+0x888>)
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	899b      	ldrh	r3, [r3, #12]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fa fee3 	bl	80077fc <lwip_htons>
 800ca36:	4603      	mov	r3, r0
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fa feda 	bl	80077fc <lwip_htons>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	b21b      	sxth	r3, r3
 800ca4c:	4323      	orrs	r3, r4
 800ca4e:	b21a      	sxth	r2, r3
 800ca50:	4b57      	ldr	r3, [pc, #348]	; (800cbb0 <tcp_receive+0x888>)
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	b292      	uxth	r2, r2
 800ca56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca5c:	4b54      	ldr	r3, [pc, #336]	; (800cbb0 <tcp_receive+0x888>)
 800ca5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ca60:	4b53      	ldr	r3, [pc, #332]	; (800cbb0 <tcp_receive+0x888>)
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	899b      	ldrh	r3, [r3, #12]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fa fec7 	bl	80077fc <lwip_htons>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d005      	beq.n	800ca86 <tcp_receive+0x75e>
            inseg.len -= 1;
 800ca7a:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <tcp_receive+0x888>)
 800ca7c:	891b      	ldrh	r3, [r3, #8]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	4b4b      	ldr	r3, [pc, #300]	; (800cbb0 <tcp_receive+0x888>)
 800ca84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ca86:	4b4a      	ldr	r3, [pc, #296]	; (800cbb0 <tcp_receive+0x888>)
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	4b49      	ldr	r3, [pc, #292]	; (800cbb0 <tcp_receive+0x888>)
 800ca8c:	891b      	ldrh	r3, [r3, #8]
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4610      	mov	r0, r2
 800ca92:	f7fc f94f 	bl	8008d34 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ca96:	4b46      	ldr	r3, [pc, #280]	; (800cbb0 <tcp_receive+0x888>)
 800ca98:	891c      	ldrh	r4, [r3, #8]
 800ca9a:	4b45      	ldr	r3, [pc, #276]	; (800cbb0 <tcp_receive+0x888>)
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	899b      	ldrh	r3, [r3, #12]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fa feaa 	bl	80077fc <lwip_htons>
 800caa8:	4603      	mov	r3, r0
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d001      	beq.n	800cab8 <tcp_receive+0x790>
 800cab4:	2301      	movs	r3, #1
 800cab6:	e000      	b.n	800caba <tcp_receive+0x792>
 800cab8:	2300      	movs	r3, #0
 800caba:	4423      	add	r3, r4
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	4b3d      	ldr	r3, [pc, #244]	; (800cbb4 <tcp_receive+0x88c>)
 800cac0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cac2:	4b3c      	ldr	r3, [pc, #240]	; (800cbb4 <tcp_receive+0x88c>)
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	461a      	mov	r2, r3
 800cac8:	4b38      	ldr	r3, [pc, #224]	; (800cbac <tcp_receive+0x884>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	441a      	add	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cad6:	440b      	add	r3, r1
 800cad8:	429a      	cmp	r2, r3
 800cada:	d006      	beq.n	800caea <tcp_receive+0x7c2>
 800cadc:	4b36      	ldr	r3, [pc, #216]	; (800cbb8 <tcp_receive+0x890>)
 800cade:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800cae2:	4936      	ldr	r1, [pc, #216]	; (800cbbc <tcp_receive+0x894>)
 800cae4:	4836      	ldr	r0, [pc, #216]	; (800cbc0 <tcp_receive+0x898>)
 800cae6:	f005 f91b 	bl	8011d20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 80e7 	beq.w	800ccc2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800caf4:	4b2e      	ldr	r3, [pc, #184]	; (800cbb0 <tcp_receive+0x888>)
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	899b      	ldrh	r3, [r3, #12]
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fa fe7d 	bl	80077fc <lwip_htons>
 800cb02:	4603      	mov	r3, r0
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d010      	beq.n	800cb30 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cb0e:	e00a      	b.n	800cb26 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb14:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f7fd fd97 	bl	800a654 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1f0      	bne.n	800cb10 <tcp_receive+0x7e8>
 800cb2e:	e0c8      	b.n	800ccc2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb34:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cb36:	e052      	b.n	800cbde <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	899b      	ldrh	r3, [r3, #12]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fa fe5b 	bl	80077fc <lwip_htons>
 800cb46:	4603      	mov	r3, r0
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d03d      	beq.n	800cbce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cb52:	4b17      	ldr	r3, [pc, #92]	; (800cbb0 <tcp_receive+0x888>)
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	899b      	ldrh	r3, [r3, #12]
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fa fe4e 	bl	80077fc <lwip_htons>
 800cb60:	4603      	mov	r3, r0
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d130      	bne.n	800cbce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cb6c:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <tcp_receive+0x888>)
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	899b      	ldrh	r3, [r3, #12]
 800cb72:	b29c      	uxth	r4, r3
 800cb74:	2001      	movs	r0, #1
 800cb76:	f7fa fe41 	bl	80077fc <lwip_htons>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4b0c      	ldr	r3, [pc, #48]	; (800cbb0 <tcp_receive+0x888>)
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	4322      	orrs	r2, r4
 800cb84:	b292      	uxth	r2, r2
 800cb86:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cb88:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <tcp_receive+0x888>)
 800cb8a:	891c      	ldrh	r4, [r3, #8]
 800cb8c:	4b08      	ldr	r3, [pc, #32]	; (800cbb0 <tcp_receive+0x888>)
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	899b      	ldrh	r3, [r3, #12]
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fa fe31 	bl	80077fc <lwip_htons>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0303 	and.w	r3, r3, #3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00e      	beq.n	800cbc4 <tcp_receive+0x89c>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e00d      	b.n	800cbc6 <tcp_receive+0x89e>
 800cbaa:	bf00      	nop
 800cbac:	24000110 	.word	0x24000110
 800cbb0:	240000f0 	.word	0x240000f0
 800cbb4:	2400011a 	.word	0x2400011a
 800cbb8:	08013dc4 	.word	0x08013dc4
 800cbbc:	0801416c 	.word	0x0801416c
 800cbc0:	08013e10 	.word	0x08013e10
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4423      	add	r3, r4
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	4b98      	ldr	r3, [pc, #608]	; (800ce2c <tcp_receive+0xb04>)
 800cbcc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cbd8:	6938      	ldr	r0, [r7, #16]
 800cbda:	f7fd fd3b 	bl	800a654 <tcp_seg_free>
            while (next &&
 800cbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00e      	beq.n	800cc02 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cbe4:	4b91      	ldr	r3, [pc, #580]	; (800ce2c <tcp_receive+0xb04>)
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	4b91      	ldr	r3, [pc, #580]	; (800ce30 <tcp_receive+0xb08>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	441a      	add	r2, r3
 800cbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbf8:	8909      	ldrh	r1, [r1, #8]
 800cbfa:	440b      	add	r3, r1
 800cbfc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	da9a      	bge.n	800cb38 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d059      	beq.n	800ccbc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800cc08:	4b88      	ldr	r3, [pc, #544]	; (800ce2c <tcp_receive+0xb04>)
 800cc0a:	881b      	ldrh	r3, [r3, #0]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	4b88      	ldr	r3, [pc, #544]	; (800ce30 <tcp_receive+0xb08>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	441a      	add	r2, r3
 800cc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dd4d      	ble.n	800ccbc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	4b81      	ldr	r3, [pc, #516]	; (800ce30 <tcp_receive+0xb08>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	4b80      	ldr	r3, [pc, #512]	; (800ce34 <tcp_receive+0xb0c>)
 800cc34:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc36:	4b7f      	ldr	r3, [pc, #508]	; (800ce34 <tcp_receive+0xb0c>)
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	899b      	ldrh	r3, [r3, #12]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fa fddc 	bl	80077fc <lwip_htons>
 800cc44:	4603      	mov	r3, r0
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <tcp_receive+0x934>
                inseg.len -= 1;
 800cc50:	4b78      	ldr	r3, [pc, #480]	; (800ce34 <tcp_receive+0xb0c>)
 800cc52:	891b      	ldrh	r3, [r3, #8]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	4b76      	ldr	r3, [pc, #472]	; (800ce34 <tcp_receive+0xb0c>)
 800cc5a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cc5c:	4b75      	ldr	r3, [pc, #468]	; (800ce34 <tcp_receive+0xb0c>)
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	4b74      	ldr	r3, [pc, #464]	; (800ce34 <tcp_receive+0xb0c>)
 800cc62:	891b      	ldrh	r3, [r3, #8]
 800cc64:	4619      	mov	r1, r3
 800cc66:	4610      	mov	r0, r2
 800cc68:	f7fc f864 	bl	8008d34 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cc6c:	4b71      	ldr	r3, [pc, #452]	; (800ce34 <tcp_receive+0xb0c>)
 800cc6e:	891c      	ldrh	r4, [r3, #8]
 800cc70:	4b70      	ldr	r3, [pc, #448]	; (800ce34 <tcp_receive+0xb0c>)
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	899b      	ldrh	r3, [r3, #12]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fa fdbf 	bl	80077fc <lwip_htons>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	f003 0303 	and.w	r3, r3, #3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <tcp_receive+0x966>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <tcp_receive+0x968>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4423      	add	r3, r4
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	4b65      	ldr	r3, [pc, #404]	; (800ce2c <tcp_receive+0xb04>)
 800cc96:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cc98:	4b64      	ldr	r3, [pc, #400]	; (800ce2c <tcp_receive+0xb04>)
 800cc9a:	881b      	ldrh	r3, [r3, #0]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4b64      	ldr	r3, [pc, #400]	; (800ce30 <tcp_receive+0xb08>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	441a      	add	r2, r3
 800cca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d006      	beq.n	800ccbc <tcp_receive+0x994>
 800ccae:	4b62      	ldr	r3, [pc, #392]	; (800ce38 <tcp_receive+0xb10>)
 800ccb0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ccb4:	4961      	ldr	r1, [pc, #388]	; (800ce3c <tcp_receive+0xb14>)
 800ccb6:	4862      	ldr	r0, [pc, #392]	; (800ce40 <tcp_receive+0xb18>)
 800ccb8:	f005 f832 	bl	8011d20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccc0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ccc2:	4b5a      	ldr	r3, [pc, #360]	; (800ce2c <tcp_receive+0xb04>)
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	4b59      	ldr	r3, [pc, #356]	; (800ce30 <tcp_receive+0xb08>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	441a      	add	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccd6:	4b55      	ldr	r3, [pc, #340]	; (800ce2c <tcp_receive+0xb04>)
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d206      	bcs.n	800ccec <tcp_receive+0x9c4>
 800ccde:	4b56      	ldr	r3, [pc, #344]	; (800ce38 <tcp_receive+0xb10>)
 800cce0:	f240 6207 	movw	r2, #1543	; 0x607
 800cce4:	4957      	ldr	r1, [pc, #348]	; (800ce44 <tcp_receive+0xb1c>)
 800cce6:	4856      	ldr	r0, [pc, #344]	; (800ce40 <tcp_receive+0xb18>)
 800cce8:	f005 f81a 	bl	8011d20 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccf0:	4b4e      	ldr	r3, [pc, #312]	; (800ce2c <tcp_receive+0xb04>)
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7fc ffcd 	bl	8009c9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cd02:	4b4c      	ldr	r3, [pc, #304]	; (800ce34 <tcp_receive+0xb0c>)
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	891b      	ldrh	r3, [r3, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d006      	beq.n	800cd1a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800cd0c:	4b49      	ldr	r3, [pc, #292]	; (800ce34 <tcp_receive+0xb0c>)
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	4a4d      	ldr	r2, [pc, #308]	; (800ce48 <tcp_receive+0xb20>)
 800cd12:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cd14:	4b47      	ldr	r3, [pc, #284]	; (800ce34 <tcp_receive+0xb0c>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd1a:	4b46      	ldr	r3, [pc, #280]	; (800ce34 <tcp_receive+0xb0c>)
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	899b      	ldrh	r3, [r3, #12]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fa fd6a 	bl	80077fc <lwip_htons>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 80b8 	beq.w	800cea6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cd36:	4b45      	ldr	r3, [pc, #276]	; (800ce4c <tcp_receive+0xb24>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	f043 0320 	orr.w	r3, r3, #32
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	4b42      	ldr	r3, [pc, #264]	; (800ce4c <tcp_receive+0xb24>)
 800cd42:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cd44:	e0af      	b.n	800cea6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd4a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	4a36      	ldr	r2, [pc, #216]	; (800ce30 <tcp_receive+0xb08>)
 800cd56:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	461c      	mov	r4, r3
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fa fd48 	bl	80077fc <lwip_htons>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	f003 0303 	and.w	r3, r3, #3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <tcp_receive+0xa54>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e000      	b.n	800cd7e <tcp_receive+0xa56>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	191a      	adds	r2, r3, r4
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd84:	441a      	add	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd8e:	461c      	mov	r4, r3
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	891b      	ldrh	r3, [r3, #8]
 800cd94:	461d      	mov	r5, r3
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	899b      	ldrh	r3, [r3, #12]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fa fd2c 	bl	80077fc <lwip_htons>
 800cda4:	4603      	mov	r3, r0
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f003 0303 	and.w	r3, r3, #3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <tcp_receive+0xa8c>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <tcp_receive+0xa8e>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	442b      	add	r3, r5
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	d206      	bcs.n	800cdca <tcp_receive+0xaa2>
 800cdbc:	4b1e      	ldr	r3, [pc, #120]	; (800ce38 <tcp_receive+0xb10>)
 800cdbe:	f240 622c 	movw	r2, #1580	; 0x62c
 800cdc2:	4923      	ldr	r1, [pc, #140]	; (800ce50 <tcp_receive+0xb28>)
 800cdc4:	481e      	ldr	r0, [pc, #120]	; (800ce40 <tcp_receive+0xb18>)
 800cdc6:	f004 ffab 	bl	8011d20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	891b      	ldrh	r3, [r3, #8]
 800cdce:	461c      	mov	r4, r3
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	899b      	ldrh	r3, [r3, #12]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fa fd0f 	bl	80077fc <lwip_htons>
 800cdde:	4603      	mov	r3, r0
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	f003 0303 	and.w	r3, r3, #3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <tcp_receive+0xac6>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e000      	b.n	800cdf0 <tcp_receive+0xac8>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	1919      	adds	r1, r3, r4
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdf6:	b28b      	uxth	r3, r1
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fc ff4b 	bl	8009c9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	891b      	ldrh	r3, [r3, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d028      	beq.n	800ce62 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ce10:	4b0d      	ldr	r3, [pc, #52]	; (800ce48 <tcp_receive+0xb20>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d01d      	beq.n	800ce54 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ce18:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <tcp_receive+0xb20>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	4619      	mov	r1, r3
 800ce22:	4610      	mov	r0, r2
 800ce24:	f7fc f9ce 	bl	80091c4 <pbuf_cat>
 800ce28:	e018      	b.n	800ce5c <tcp_receive+0xb34>
 800ce2a:	bf00      	nop
 800ce2c:	2400011a 	.word	0x2400011a
 800ce30:	24000110 	.word	0x24000110
 800ce34:	240000f0 	.word	0x240000f0
 800ce38:	08013dc4 	.word	0x08013dc4
 800ce3c:	080141a4 	.word	0x080141a4
 800ce40:	08013e10 	.word	0x08013e10
 800ce44:	080141e0 	.word	0x080141e0
 800ce48:	24000120 	.word	0x24000120
 800ce4c:	2400011d 	.word	0x2400011d
 800ce50:	08014200 	.word	0x08014200
            } else {
              recv_data = cseg->p;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	4a70      	ldr	r2, [pc, #448]	; (800d01c <tcp_receive+0xcf4>)
 800ce5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	899b      	ldrh	r3, [r3, #12]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fa fcc6 	bl	80077fc <lwip_htons>
 800ce70:	4603      	mov	r3, r0
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00d      	beq.n	800ce98 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ce7c:	4b68      	ldr	r3, [pc, #416]	; (800d020 <tcp_receive+0xcf8>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	f043 0320 	orr.w	r3, r3, #32
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	4b66      	ldr	r3, [pc, #408]	; (800d020 <tcp_receive+0xcf8>)
 800ce88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7d1b      	ldrb	r3, [r3, #20]
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d102      	bne.n	800ce98 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2207      	movs	r2, #7
 800ce96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cea0:	68b8      	ldr	r0, [r7, #8]
 800cea2:	f7fd fbd7 	bl	800a654 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d008      	beq.n	800cec0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ceba:	429a      	cmp	r2, r3
 800cebc:	f43f af43 	beq.w	800cd46 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	8b5b      	ldrh	r3, [r3, #26]
 800cec4:	f003 0301 	and.w	r3, r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00e      	beq.n	800ceea <tcp_receive+0xbc2>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8b5b      	ldrh	r3, [r3, #26]
 800ced0:	f023 0301 	bic.w	r3, r3, #1
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	835a      	strh	r2, [r3, #26]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	8b5b      	ldrh	r3, [r3, #26]
 800cede:	f043 0302 	orr.w	r3, r3, #2
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cee8:	e188      	b.n	800d1fc <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	8b5b      	ldrh	r3, [r3, #26]
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cef8:	e180      	b.n	800d1fc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cf02:	4848      	ldr	r0, [pc, #288]	; (800d024 <tcp_receive+0xcfc>)
 800cf04:	f7fd fbbe 	bl	800a684 <tcp_seg_copy>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	675a      	str	r2, [r3, #116]	; 0x74
 800cf0e:	e16d      	b.n	800d1ec <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf18:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf1a:	e157      	b.n	800d1cc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	685a      	ldr	r2, [r3, #4]
 800cf22:	4b41      	ldr	r3, [pc, #260]	; (800d028 <tcp_receive+0xd00>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d11d      	bne.n	800cf66 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cf2a:	4b3e      	ldr	r3, [pc, #248]	; (800d024 <tcp_receive+0xcfc>)
 800cf2c:	891a      	ldrh	r2, [r3, #8]
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	891b      	ldrh	r3, [r3, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	f240 814f 	bls.w	800d1d6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cf38:	483a      	ldr	r0, [pc, #232]	; (800d024 <tcp_receive+0xcfc>)
 800cf3a:	f7fd fba3 	bl	800a684 <tcp_seg_copy>
 800cf3e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8149 	beq.w	800d1da <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800cf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800cf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e002      	b.n	800cf5c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cf5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf5e:	6978      	ldr	r0, [r7, #20]
 800cf60:	f7ff f8de 	bl	800c120 <tcp_oos_insert_segment>
                }
                break;
 800cf64:	e139      	b.n	800d1da <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cf66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d117      	bne.n	800cf9c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cf6c:	4b2e      	ldr	r3, [pc, #184]	; (800d028 <tcp_receive+0xd00>)
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	da57      	bge.n	800d02c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cf7c:	4829      	ldr	r0, [pc, #164]	; (800d024 <tcp_receive+0xcfc>)
 800cf7e:	f7fd fb81 	bl	800a684 <tcp_seg_copy>
 800cf82:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 8129 	beq.w	800d1de <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cf92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf94:	69b8      	ldr	r0, [r7, #24]
 800cf96:	f7ff f8c3 	bl	800c120 <tcp_oos_insert_segment>
                  }
                  break;
 800cf9a:	e120      	b.n	800d1de <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cf9c:	4b22      	ldr	r3, [pc, #136]	; (800d028 <tcp_receive+0xd00>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	db3e      	blt.n	800d02c <tcp_receive+0xd04>
 800cfae:	4b1e      	ldr	r3, [pc, #120]	; (800d028 <tcp_receive+0xd00>)
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	3301      	adds	r3, #1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dc35      	bgt.n	800d02c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cfc0:	4818      	ldr	r0, [pc, #96]	; (800d024 <tcp_receive+0xcfc>)
 800cfc2:	f7fd fb5f 	bl	800a684 <tcp_seg_copy>
 800cfc6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 8109 	beq.w	800d1e2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfd8:	8912      	ldrh	r2, [r2, #8]
 800cfda:	441a      	add	r2, r3
 800cfdc:	4b12      	ldr	r3, [pc, #72]	; (800d028 <tcp_receive+0xd00>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	dd12      	ble.n	800d00c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cfe6:	4b10      	ldr	r3, [pc, #64]	; (800d028 <tcp_receive+0xd00>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	891b      	ldrh	r3, [r3, #8]
 800d004:	4619      	mov	r1, r3
 800d006:	4610      	mov	r0, r2
 800d008:	f7fb fe94 	bl	8008d34 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d014:	69f8      	ldr	r0, [r7, #28]
 800d016:	f7ff f883 	bl	800c120 <tcp_oos_insert_segment>
                  }
                  break;
 800d01a:	e0e2      	b.n	800d1e2 <tcp_receive+0xeba>
 800d01c:	24000120 	.word	0x24000120
 800d020:	2400011d 	.word	0x2400011d
 800d024:	240000f0 	.word	0x240000f0
 800d028:	24000110 	.word	0x24000110
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f040 80c6 	bne.w	800d1c6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d03a:	4b80      	ldr	r3, [pc, #512]	; (800d23c <tcp_receive+0xf14>)
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d046:	2b00      	cmp	r3, #0
 800d048:	f340 80bd 	ble.w	800d1c6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	899b      	ldrh	r3, [r3, #12]
 800d052:	b29b      	uxth	r3, r3
 800d054:	4618      	mov	r0, r3
 800d056:	f7fa fbd1 	bl	80077fc <lwip_htons>
 800d05a:	4603      	mov	r3, r0
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	f040 80bf 	bne.w	800d1e6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d068:	4875      	ldr	r0, [pc, #468]	; (800d240 <tcp_receive+0xf18>)
 800d06a:	f7fd fb0b 	bl	800a684 <tcp_seg_copy>
 800d06e:	4602      	mov	r2, r0
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80b6 	beq.w	800d1ea <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d086:	8912      	ldrh	r2, [r2, #8]
 800d088:	441a      	add	r2, r3
 800d08a:	4b6c      	ldr	r3, [pc, #432]	; (800d23c <tcp_receive+0xf14>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	dd12      	ble.n	800d0ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d094:	4b69      	ldr	r3, [pc, #420]	; (800d23c <tcp_receive+0xf14>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	b29a      	uxth	r2, r3
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	891b      	ldrh	r3, [r3, #8]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f7fb fe3d 	bl	8008d34 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d0ba:	4b62      	ldr	r3, [pc, #392]	; (800d244 <tcp_receive+0xf1c>)
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	4b5e      	ldr	r3, [pc, #376]	; (800d23c <tcp_receive+0xf14>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	441a      	add	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0ce:	440b      	add	r3, r1
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f340 8089 	ble.w	800d1ea <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	899b      	ldrh	r3, [r3, #12]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fa fb8a 	bl	80077fc <lwip_htons>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d022      	beq.n	800d13a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	899b      	ldrh	r3, [r3, #12]
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	b21b      	sxth	r3, r3
 800d100:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d104:	b21c      	sxth	r4, r3
 800d106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	899b      	ldrh	r3, [r3, #12]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	4618      	mov	r0, r3
 800d112:	f7fa fb73 	bl	80077fc <lwip_htons>
 800d116:	4603      	mov	r3, r0
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d120:	b29b      	uxth	r3, r3
 800d122:	4618      	mov	r0, r3
 800d124:	f7fa fb6a 	bl	80077fc <lwip_htons>
 800d128:	4603      	mov	r3, r0
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	4323      	orrs	r3, r4
 800d12e:	b21a      	sxth	r2, r3
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	b292      	uxth	r2, r2
 800d138:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	b29a      	uxth	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d144:	4413      	add	r3, r2
 800d146:	b299      	uxth	r1, r3
 800d148:	4b3c      	ldr	r3, [pc, #240]	; (800d23c <tcp_receive+0xf14>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	1a8a      	subs	r2, r1, r2
 800d154:	b292      	uxth	r2, r2
 800d156:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	891b      	ldrh	r3, [r3, #8]
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fb fde4 	bl	8008d34 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	891c      	ldrh	r4, [r3, #8]
 800d172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	899b      	ldrh	r3, [r3, #12]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fa fb3d 	bl	80077fc <lwip_htons>
 800d182:	4603      	mov	r3, r0
 800d184:	b2db      	uxtb	r3, r3
 800d186:	f003 0303 	and.w	r3, r3, #3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <tcp_receive+0xe6a>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <tcp_receive+0xe6c>
 800d192:	2300      	movs	r3, #0
 800d194:	4423      	add	r3, r4
 800d196:	b29a      	uxth	r2, r3
 800d198:	4b2a      	ldr	r3, [pc, #168]	; (800d244 <tcp_receive+0xf1c>)
 800d19a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d19c:	4b29      	ldr	r3, [pc, #164]	; (800d244 <tcp_receive+0xf1c>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b26      	ldr	r3, [pc, #152]	; (800d23c <tcp_receive+0xf14>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	441a      	add	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	6879      	ldr	r1, [r7, #4]
 800d1ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d1b0:	440b      	add	r3, r1
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d019      	beq.n	800d1ea <tcp_receive+0xec2>
 800d1b6:	4b24      	ldr	r3, [pc, #144]	; (800d248 <tcp_receive+0xf20>)
 800d1b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d1bc:	4923      	ldr	r1, [pc, #140]	; (800d24c <tcp_receive+0xf24>)
 800d1be:	4824      	ldr	r0, [pc, #144]	; (800d250 <tcp_receive+0xf28>)
 800d1c0:	f004 fdae 	bl	8011d20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d1c4:	e011      	b.n	800d1ea <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f47f aea4 	bne.w	800cf1c <tcp_receive+0xbf4>
 800d1d4:	e00a      	b.n	800d1ec <tcp_receive+0xec4>
                break;
 800d1d6:	bf00      	nop
 800d1d8:	e008      	b.n	800d1ec <tcp_receive+0xec4>
                break;
 800d1da:	bf00      	nop
 800d1dc:	e006      	b.n	800d1ec <tcp_receive+0xec4>
                  break;
 800d1de:	bf00      	nop
 800d1e0:	e004      	b.n	800d1ec <tcp_receive+0xec4>
                  break;
 800d1e2:	bf00      	nop
 800d1e4:	e002      	b.n	800d1ec <tcp_receive+0xec4>
                  break;
 800d1e6:	bf00      	nop
 800d1e8:	e000      	b.n	800d1ec <tcp_receive+0xec4>
                break;
 800d1ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 fa45 	bl	800e67c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d1f2:	e003      	b.n	800d1fc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f001 fa41 	bl	800e67c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d1fa:	e01a      	b.n	800d232 <tcp_receive+0xf0a>
 800d1fc:	e019      	b.n	800d232 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d1fe:	4b0f      	ldr	r3, [pc, #60]	; (800d23c <tcp_receive+0xf14>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	db0a      	blt.n	800d222 <tcp_receive+0xefa>
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <tcp_receive+0xf14>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d218:	440b      	add	r3, r1
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	3301      	adds	r3, #1
 800d21e:	2b00      	cmp	r3, #0
 800d220:	dd07      	ble.n	800d232 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	8b5b      	ldrh	r3, [r3, #26]
 800d226:	f043 0302 	orr.w	r3, r3, #2
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d230:	e7ff      	b.n	800d232 <tcp_receive+0xf0a>
 800d232:	bf00      	nop
 800d234:	3750      	adds	r7, #80	; 0x50
 800d236:	46bd      	mov	sp, r7
 800d238:	bdb0      	pop	{r4, r5, r7, pc}
 800d23a:	bf00      	nop
 800d23c:	24000110 	.word	0x24000110
 800d240:	240000f0 	.word	0x240000f0
 800d244:	2400011a 	.word	0x2400011a
 800d248:	08013dc4 	.word	0x08013dc4
 800d24c:	0801416c 	.word	0x0801416c
 800d250:	08013e10 	.word	0x08013e10

0800d254 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d25a:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <tcp_get_next_optbyte+0x5c>)
 800d25c:	881b      	ldrh	r3, [r3, #0]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	b291      	uxth	r1, r2
 800d262:	4a13      	ldr	r2, [pc, #76]	; (800d2b0 <tcp_get_next_optbyte+0x5c>)
 800d264:	8011      	strh	r1, [r2, #0]
 800d266:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d268:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <tcp_get_next_optbyte+0x60>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <tcp_get_next_optbyte+0x26>
 800d270:	4b11      	ldr	r3, [pc, #68]	; (800d2b8 <tcp_get_next_optbyte+0x64>)
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	88fa      	ldrh	r2, [r7, #6]
 800d276:	429a      	cmp	r2, r3
 800d278:	d208      	bcs.n	800d28c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d27a:	4b10      	ldr	r3, [pc, #64]	; (800d2bc <tcp_get_next_optbyte+0x68>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3314      	adds	r3, #20
 800d280:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d282:	88fb      	ldrh	r3, [r7, #6]
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	4413      	add	r3, r2
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	e00b      	b.n	800d2a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d28c:	88fb      	ldrh	r3, [r7, #6]
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	4b09      	ldr	r3, [pc, #36]	; (800d2b8 <tcp_get_next_optbyte+0x64>)
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	b2db      	uxtb	r3, r3
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d29a:	4b06      	ldr	r3, [pc, #24]	; (800d2b4 <tcp_get_next_optbyte+0x60>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	797b      	ldrb	r3, [r7, #5]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	2400010c 	.word	0x2400010c
 800d2b4:	24000108 	.word	0x24000108
 800d2b8:	24000106 	.word	0x24000106
 800d2bc:	24000100 	.word	0x24000100

0800d2c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d106      	bne.n	800d2dc <tcp_parseopt+0x1c>
 800d2ce:	4b31      	ldr	r3, [pc, #196]	; (800d394 <tcp_parseopt+0xd4>)
 800d2d0:	f240 727d 	movw	r2, #1917	; 0x77d
 800d2d4:	4930      	ldr	r1, [pc, #192]	; (800d398 <tcp_parseopt+0xd8>)
 800d2d6:	4831      	ldr	r0, [pc, #196]	; (800d39c <tcp_parseopt+0xdc>)
 800d2d8:	f004 fd22 	bl	8011d20 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d2dc:	4b30      	ldr	r3, [pc, #192]	; (800d3a0 <tcp_parseopt+0xe0>)
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d053      	beq.n	800d38c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d2e4:	4b2f      	ldr	r3, [pc, #188]	; (800d3a4 <tcp_parseopt+0xe4>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	801a      	strh	r2, [r3, #0]
 800d2ea:	e043      	b.n	800d374 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800d2ec:	f7ff ffb2 	bl	800d254 <tcp_get_next_optbyte>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d03c      	beq.n	800d374 <tcp_parseopt+0xb4>
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d002      	beq.n	800d304 <tcp_parseopt+0x44>
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d03f      	beq.n	800d382 <tcp_parseopt+0xc2>
 800d302:	e026      	b.n	800d352 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d304:	f7ff ffa6 	bl	800d254 <tcp_get_next_optbyte>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	d13b      	bne.n	800d386 <tcp_parseopt+0xc6>
 800d30e:	4b25      	ldr	r3, [pc, #148]	; (800d3a4 <tcp_parseopt+0xe4>)
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	3302      	adds	r3, #2
 800d314:	4a22      	ldr	r2, [pc, #136]	; (800d3a0 <tcp_parseopt+0xe0>)
 800d316:	8812      	ldrh	r2, [r2, #0]
 800d318:	4293      	cmp	r3, r2
 800d31a:	dc34      	bgt.n	800d386 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d31c:	f7ff ff9a 	bl	800d254 <tcp_get_next_optbyte>
 800d320:	4603      	mov	r3, r0
 800d322:	b29b      	uxth	r3, r3
 800d324:	021b      	lsls	r3, r3, #8
 800d326:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d328:	f7ff ff94 	bl	800d254 <tcp_get_next_optbyte>
 800d32c:	4603      	mov	r3, r0
 800d32e:	b29a      	uxth	r2, r3
 800d330:	89bb      	ldrh	r3, [r7, #12]
 800d332:	4313      	orrs	r3, r2
 800d334:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d336:	89bb      	ldrh	r3, [r7, #12]
 800d338:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d33c:	d804      	bhi.n	800d348 <tcp_parseopt+0x88>
 800d33e:	89bb      	ldrh	r3, [r7, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <tcp_parseopt+0x88>
 800d344:	89ba      	ldrh	r2, [r7, #12]
 800d346:	e001      	b.n	800d34c <tcp_parseopt+0x8c>
 800d348:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d350:	e010      	b.n	800d374 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d352:	f7ff ff7f 	bl	800d254 <tcp_get_next_optbyte>
 800d356:	4603      	mov	r3, r0
 800d358:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d35a:	7afb      	ldrb	r3, [r7, #11]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d914      	bls.n	800d38a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d360:	7afb      	ldrb	r3, [r7, #11]
 800d362:	b29a      	uxth	r2, r3
 800d364:	4b0f      	ldr	r3, [pc, #60]	; (800d3a4 <tcp_parseopt+0xe4>)
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	4413      	add	r3, r2
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	3b02      	subs	r3, #2
 800d36e:	b29a      	uxth	r2, r3
 800d370:	4b0c      	ldr	r3, [pc, #48]	; (800d3a4 <tcp_parseopt+0xe4>)
 800d372:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d374:	4b0b      	ldr	r3, [pc, #44]	; (800d3a4 <tcp_parseopt+0xe4>)
 800d376:	881a      	ldrh	r2, [r3, #0]
 800d378:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <tcp_parseopt+0xe0>)
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d3b5      	bcc.n	800d2ec <tcp_parseopt+0x2c>
 800d380:	e004      	b.n	800d38c <tcp_parseopt+0xcc>
          return;
 800d382:	bf00      	nop
 800d384:	e002      	b.n	800d38c <tcp_parseopt+0xcc>
            return;
 800d386:	bf00      	nop
 800d388:	e000      	b.n	800d38c <tcp_parseopt+0xcc>
            return;
 800d38a:	bf00      	nop
      }
    }
  }
}
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	08013dc4 	.word	0x08013dc4
 800d398:	08014228 	.word	0x08014228
 800d39c:	08013e10 	.word	0x08013e10
 800d3a0:	24000104 	.word	0x24000104
 800d3a4:	2400010c 	.word	0x2400010c

0800d3a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d3ac:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <tcp_trigger_input_pcb_close+0x1c>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	f043 0310 	orr.w	r3, r3, #16
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <tcp_trigger_input_pcb_close+0x1c>)
 800d3b8:	701a      	strb	r2, [r3, #0]
}
 800d3ba:	bf00      	nop
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	2400011d 	.word	0x2400011d

0800d3c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <tcp_route+0x28>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	7a1b      	ldrb	r3, [r3, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d006      	beq.n	800d3f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	7a1b      	ldrb	r3, [r3, #8]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fb face 	bl	8008988 <netif_get_by_index>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	e003      	b.n	800d3f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f003 fa6f 	bl	80108d4 <ip4_route>
 800d3f6:	4603      	mov	r3, r0
  }
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d400:	b590      	push	{r4, r7, lr}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	603b      	str	r3, [r7, #0]
 800d40c:	4613      	mov	r3, r2
 800d40e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d105      	bne.n	800d422 <tcp_create_segment+0x22>
 800d416:	4b44      	ldr	r3, [pc, #272]	; (800d528 <tcp_create_segment+0x128>)
 800d418:	22a3      	movs	r2, #163	; 0xa3
 800d41a:	4944      	ldr	r1, [pc, #272]	; (800d52c <tcp_create_segment+0x12c>)
 800d41c:	4844      	ldr	r0, [pc, #272]	; (800d530 <tcp_create_segment+0x130>)
 800d41e:	f004 fc7f 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d105      	bne.n	800d434 <tcp_create_segment+0x34>
 800d428:	4b3f      	ldr	r3, [pc, #252]	; (800d528 <tcp_create_segment+0x128>)
 800d42a:	22a4      	movs	r2, #164	; 0xa4
 800d42c:	4941      	ldr	r1, [pc, #260]	; (800d534 <tcp_create_segment+0x134>)
 800d42e:	4840      	ldr	r0, [pc, #256]	; (800d530 <tcp_create_segment+0x130>)
 800d430:	f004 fc76 	bl	8011d20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d434:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0304 	and.w	r3, r3, #4
 800d440:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d442:	2003      	movs	r0, #3
 800d444:	f7fa ff1a 	bl	800827c <memp_malloc>
 800d448:	6138      	str	r0, [r7, #16]
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d450:	68b8      	ldr	r0, [r7, #8]
 800d452:	f7fb fdf5 	bl	8009040 <pbuf_free>
    return NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	e061      	b.n	800d51e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d460:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	2200      	movs	r2, #0
 800d466:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	891a      	ldrh	r2, [r3, #8]
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	b29b      	uxth	r3, r3
 800d476:	429a      	cmp	r2, r3
 800d478:	d205      	bcs.n	800d486 <tcp_create_segment+0x86>
 800d47a:	4b2b      	ldr	r3, [pc, #172]	; (800d528 <tcp_create_segment+0x128>)
 800d47c:	22b0      	movs	r2, #176	; 0xb0
 800d47e:	492e      	ldr	r1, [pc, #184]	; (800d538 <tcp_create_segment+0x138>)
 800d480:	482b      	ldr	r0, [pc, #172]	; (800d530 <tcp_create_segment+0x130>)
 800d482:	f004 fc4d 	bl	8011d20 <iprintf>
  seg->len = p->tot_len - optlen;
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	891a      	ldrh	r2, [r3, #8]
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	b29a      	uxth	r2, r3
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d496:	2114      	movs	r1, #20
 800d498:	68b8      	ldr	r0, [r7, #8]
 800d49a:	f7fb fd3b 	bl	8008f14 <pbuf_add_header>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d4a4:	6938      	ldr	r0, [r7, #16]
 800d4a6:	f7fd f8d5 	bl	800a654 <tcp_seg_free>
    return NULL;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e037      	b.n	800d51e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	8ada      	ldrh	r2, [r3, #22]
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	68dc      	ldr	r4, [r3, #12]
 800d4c0:	4610      	mov	r0, r2
 800d4c2:	f7fa f99b 	bl	80077fc <lwip_htons>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	8b1a      	ldrh	r2, [r3, #24]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	68dc      	ldr	r4, [r3, #12]
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	f7fa f992 	bl	80077fc <lwip_htons>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	68dc      	ldr	r4, [r3, #12]
 800d4e0:	6838      	ldr	r0, [r7, #0]
 800d4e2:	f7fa f9a0 	bl	8007826 <lwip_htonl>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	089b      	lsrs	r3, r3, #2
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	3305      	adds	r3, #5
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	031b      	lsls	r3, r3, #12
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	4313      	orrs	r3, r2
 800d500:	b29a      	uxth	r2, r3
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	68dc      	ldr	r4, [r3, #12]
 800d506:	4610      	mov	r0, r2
 800d508:	f7fa f978 	bl	80077fc <lwip_htons>
 800d50c:	4603      	mov	r3, r0
 800d50e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	749a      	strb	r2, [r3, #18]
 800d518:	2200      	movs	r2, #0
 800d51a:	74da      	strb	r2, [r3, #19]
  return seg;
 800d51c:	693b      	ldr	r3, [r7, #16]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	371c      	adds	r7, #28
 800d522:	46bd      	mov	sp, r7
 800d524:	bd90      	pop	{r4, r7, pc}
 800d526:	bf00      	nop
 800d528:	08014244 	.word	0x08014244
 800d52c:	08014278 	.word	0x08014278
 800d530:	08014298 	.word	0x08014298
 800d534:	080142c0 	.word	0x080142c0
 800d538:	080142e4 	.word	0x080142e4

0800d53c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b08b      	sub	sp, #44	; 0x2c
 800d540:	af02      	add	r7, sp, #8
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	460b      	mov	r3, r1
 800d546:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	61fb      	str	r3, [r7, #28]
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d550:	2300      	movs	r3, #0
 800d552:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d106      	bne.n	800d568 <tcp_split_unsent_seg+0x2c>
 800d55a:	4b96      	ldr	r3, [pc, #600]	; (800d7b4 <tcp_split_unsent_seg+0x278>)
 800d55c:	f240 324b 	movw	r2, #843	; 0x34b
 800d560:	4995      	ldr	r1, [pc, #596]	; (800d7b8 <tcp_split_unsent_seg+0x27c>)
 800d562:	4896      	ldr	r0, [pc, #600]	; (800d7bc <tcp_split_unsent_seg+0x280>)
 800d564:	f004 fbdc 	bl	8011d20 <iprintf>

  useg = pcb->unsent;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d56c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d574:	f04f 33ff 	mov.w	r3, #4294967295
 800d578:	e117      	b.n	800d7aa <tcp_split_unsent_seg+0x26e>
  }

  if (split == 0) {
 800d57a:	887b      	ldrh	r3, [r7, #2]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d109      	bne.n	800d594 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d580:	4b8c      	ldr	r3, [pc, #560]	; (800d7b4 <tcp_split_unsent_seg+0x278>)
 800d582:	f240 3253 	movw	r2, #851	; 0x353
 800d586:	498e      	ldr	r1, [pc, #568]	; (800d7c0 <tcp_split_unsent_seg+0x284>)
 800d588:	488c      	ldr	r0, [pc, #560]	; (800d7bc <tcp_split_unsent_seg+0x280>)
 800d58a:	f004 fbc9 	bl	8011d20 <iprintf>
    return ERR_VAL;
 800d58e:	f06f 0305 	mvn.w	r3, #5
 800d592:	e10a      	b.n	800d7aa <tcp_split_unsent_seg+0x26e>
  }

  if (useg->len <= split) {
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	891b      	ldrh	r3, [r3, #8]
 800d598:	887a      	ldrh	r2, [r7, #2]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d301      	bcc.n	800d5a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e103      	b.n	800d7aa <tcp_split_unsent_seg+0x26e>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5a6:	887a      	ldrh	r2, [r7, #2]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d906      	bls.n	800d5ba <tcp_split_unsent_seg+0x7e>
 800d5ac:	4b81      	ldr	r3, [pc, #516]	; (800d7b4 <tcp_split_unsent_seg+0x278>)
 800d5ae:	f240 325b 	movw	r2, #859	; 0x35b
 800d5b2:	4984      	ldr	r1, [pc, #528]	; (800d7c4 <tcp_split_unsent_seg+0x288>)
 800d5b4:	4881      	ldr	r0, [pc, #516]	; (800d7bc <tcp_split_unsent_seg+0x280>)
 800d5b6:	f004 fbb3 	bl	8011d20 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	891b      	ldrh	r3, [r3, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <tcp_split_unsent_seg+0x94>
 800d5c2:	4b7c      	ldr	r3, [pc, #496]	; (800d7b4 <tcp_split_unsent_seg+0x278>)
 800d5c4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d5c8:	497f      	ldr	r1, [pc, #508]	; (800d7c8 <tcp_split_unsent_seg+0x28c>)
 800d5ca:	487c      	ldr	r0, [pc, #496]	; (800d7bc <tcp_split_unsent_seg+0x280>)
 800d5cc:	f004 fba8 	bl	8011d20 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	7a9b      	ldrb	r3, [r3, #10]
 800d5d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	891a      	ldrh	r2, [r3, #8]
 800d5e6:	887b      	ldrh	r3, [r7, #2]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	89bb      	ldrh	r3, [r7, #12]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800d600:	f7fb fa3e 	bl	8008a80 <pbuf_alloc>
 800d604:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 80b7 	beq.w	800d77c <tcp_split_unsent_seg+0x240>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	891a      	ldrh	r2, [r3, #8]
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	891b      	ldrh	r3, [r3, #8]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	887b      	ldrh	r3, [r7, #2]
 800d61e:	4413      	add	r3, r2
 800d620:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	6858      	ldr	r0, [r3, #4]
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	18d1      	adds	r1, r2, r3
 800d62e:	897b      	ldrh	r3, [r7, #10]
 800d630:	89ba      	ldrh	r2, [r7, #12]
 800d632:	f7fb feff 	bl	8009434 <pbuf_copy_partial>
 800d636:	4603      	mov	r3, r0
 800d638:	461a      	mov	r2, r3
 800d63a:	89bb      	ldrh	r3, [r7, #12]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	f040 809f 	bne.w	800d780 <tcp_split_unsent_seg+0x244>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	899b      	ldrh	r3, [r3, #12]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fa f8d6 	bl	80077fc <lwip_htons>
 800d650:	4603      	mov	r3, r0
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d658:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d65a:	2300      	movs	r3, #0
 800d65c:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d65e:	7efb      	ldrb	r3, [r7, #27]
 800d660:	f003 0308 	and.w	r3, r3, #8
 800d664:	2b00      	cmp	r3, #0
 800d666:	d007      	beq.n	800d678 <tcp_split_unsent_seg+0x13c>
    split_flags &= ~TCP_PSH;
 800d668:	7efb      	ldrb	r3, [r7, #27]
 800d66a:	f023 0308 	bic.w	r3, r3, #8
 800d66e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d670:	7ebb      	ldrb	r3, [r7, #26]
 800d672:	f043 0308 	orr.w	r3, r3, #8
 800d676:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d678:	7efb      	ldrb	r3, [r7, #27]
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d007      	beq.n	800d692 <tcp_split_unsent_seg+0x156>
    split_flags &= ~TCP_FIN;
 800d682:	7efb      	ldrb	r3, [r7, #27]
 800d684:	f023 0301 	bic.w	r3, r3, #1
 800d688:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d68a:	7ebb      	ldrb	r3, [r7, #26]
 800d68c:	f043 0301 	orr.w	r3, r3, #1
 800d690:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fa f8c4 	bl	8007826 <lwip_htonl>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	887b      	ldrh	r3, [r7, #2]
 800d6a2:	18d1      	adds	r1, r2, r3
 800d6a4:	7eba      	ldrb	r2, [r7, #26]
 800d6a6:	7bfb      	ldrb	r3, [r7, #15]
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	6939      	ldr	r1, [r7, #16]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fea6 	bl	800d400 <tcp_create_segment>
 800d6b4:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d063      	beq.n	800d784 <tcp_split_unsent_seg+0x248>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fb fd45 	bl	8009150 <pbuf_clen>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	6858      	ldr	r0, [r3, #4]
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	891a      	ldrh	r2, [r3, #8]
 800d6e4:	89bb      	ldrh	r3, [r7, #12]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	f7fb fb22 	bl	8008d34 <pbuf_realloc>
  useg->len -= remainder;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	891a      	ldrh	r2, [r3, #8]
 800d6f4:	89bb      	ldrh	r3, [r7, #12]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	899b      	ldrh	r3, [r3, #12]
 800d704:	b29c      	uxth	r4, r3
 800d706:	7efb      	ldrb	r3, [r7, #27]
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fa f876 	bl	80077fc <lwip_htons>
 800d710:	4603      	mov	r3, r0
 800d712:	461a      	mov	r2, r3
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	4322      	orrs	r2, r4
 800d71a:	b292      	uxth	r2, r2
 800d71c:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	4618      	mov	r0, r3
 800d724:	f7fb fd14 	bl	8009150 <pbuf_clen>
 800d728:	4603      	mov	r3, r0
 800d72a:	461a      	mov	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d732:	4413      	add	r3, r2
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	4618      	mov	r0, r3
 800d742:	f7fb fd05 	bl	8009150 <pbuf_clen>
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d750:	4413      	add	r3, r2
 800d752:	b29a      	uxth	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	69fa      	ldr	r2, [r7, #28]
 800d766:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d103      	bne.n	800d778 <tcp_split_unsent_seg+0x23c>
    pcb->unsent_oversize = 0;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	e016      	b.n	800d7aa <tcp_split_unsent_seg+0x26e>
    goto memerr;
 800d77c:	bf00      	nop
 800d77e:	e002      	b.n	800d786 <tcp_split_unsent_seg+0x24a>
    goto memerr;
 800d780:	bf00      	nop
 800d782:	e000      	b.n	800d786 <tcp_split_unsent_seg+0x24a>
    goto memerr;
 800d784:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d006      	beq.n	800d79a <tcp_split_unsent_seg+0x25e>
 800d78c:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <tcp_split_unsent_seg+0x278>)
 800d78e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d792:	490e      	ldr	r1, [pc, #56]	; (800d7cc <tcp_split_unsent_seg+0x290>)
 800d794:	4809      	ldr	r0, [pc, #36]	; (800d7bc <tcp_split_unsent_seg+0x280>)
 800d796:	f004 fac3 	bl	8011d20 <iprintf>
  if (p != NULL) {
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <tcp_split_unsent_seg+0x26a>
    pbuf_free(p);
 800d7a0:	6938      	ldr	r0, [r7, #16]
 800d7a2:	f7fb fc4d 	bl	8009040 <pbuf_free>
  }

  return ERR_MEM;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3724      	adds	r7, #36	; 0x24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd90      	pop	{r4, r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	08014244 	.word	0x08014244
 800d7b8:	080145d8 	.word	0x080145d8
 800d7bc:	08014298 	.word	0x08014298
 800d7c0:	080145fc 	.word	0x080145fc
 800d7c4:	08014620 	.word	0x08014620
 800d7c8:	08014630 	.word	0x08014630
 800d7cc:	08014640 	.word	0x08014640

0800d7d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d7d0:	b590      	push	{r4, r7, lr}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <tcp_send_fin+0x1c>
 800d7de:	4b21      	ldr	r3, [pc, #132]	; (800d864 <tcp_send_fin+0x94>)
 800d7e0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d7e4:	4920      	ldr	r1, [pc, #128]	; (800d868 <tcp_send_fin+0x98>)
 800d7e6:	4821      	ldr	r0, [pc, #132]	; (800d86c <tcp_send_fin+0x9c>)
 800d7e8:	f004 fa9a 	bl	8011d20 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d02e      	beq.n	800d852 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f8:	60fb      	str	r3, [r7, #12]
 800d7fa:	e002      	b.n	800d802 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1f8      	bne.n	800d7fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	899b      	ldrh	r3, [r3, #12]
 800d810:	b29b      	uxth	r3, r3
 800d812:	4618      	mov	r0, r3
 800d814:	f7f9 fff2 	bl	80077fc <lwip_htons>
 800d818:	4603      	mov	r3, r0
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	2b00      	cmp	r3, #0
 800d822:	d116      	bne.n	800d852 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	899b      	ldrh	r3, [r3, #12]
 800d82a:	b29c      	uxth	r4, r3
 800d82c:	2001      	movs	r0, #1
 800d82e:	f7f9 ffe5 	bl	80077fc <lwip_htons>
 800d832:	4603      	mov	r3, r0
 800d834:	461a      	mov	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	4322      	orrs	r2, r4
 800d83c:	b292      	uxth	r2, r2
 800d83e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	8b5b      	ldrh	r3, [r3, #26]
 800d844:	f043 0320 	orr.w	r3, r3, #32
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	e004      	b.n	800d85c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d852:	2101      	movs	r1, #1
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f80b 	bl	800d870 <tcp_enqueue_flags>
 800d85a:	4603      	mov	r3, r0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	bd90      	pop	{r4, r7, pc}
 800d864:	08014244 	.word	0x08014244
 800d868:	0801464c 	.word	0x0801464c
 800d86c:	08014298 	.word	0x08014298

0800d870 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08a      	sub	sp, #40	; 0x28
 800d874:	af02      	add	r7, sp, #8
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d880:	2300      	movs	r3, #0
 800d882:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_enqueue_flags+0x2c>
 800d88e:	4b67      	ldr	r3, [pc, #412]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d890:	f240 4212 	movw	r2, #1042	; 0x412
 800d894:	4966      	ldr	r1, [pc, #408]	; (800da30 <tcp_enqueue_flags+0x1c0>)
 800d896:	4867      	ldr	r0, [pc, #412]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d898:	f004 fa42 	bl	8011d20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <tcp_enqueue_flags+0x40>
 800d8a2:	4b62      	ldr	r3, [pc, #392]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d8a4:	f240 4213 	movw	r2, #1043	; 0x413
 800d8a8:	4963      	ldr	r1, [pc, #396]	; (800da38 <tcp_enqueue_flags+0x1c8>)
 800d8aa:	4862      	ldr	r0, [pc, #392]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d8ac:	f004 fa38 	bl	8011d20 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d8b0:	78fb      	ldrb	r3, [r7, #3]
 800d8b2:	f003 0302 	and.w	r3, r3, #2
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d8be:	7ffb      	ldrb	r3, [r7, #31]
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0304 	and.w	r3, r3, #4
 800d8c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d8ca:	7dfb      	ldrb	r3, [r7, #23]
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800d8d8:	f7fb f8d2 	bl	8008a80 <pbuf_alloc>
 800d8dc:	6138      	str	r0, [r7, #16]
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d109      	bne.n	800d8f8 <tcp_enqueue_flags+0x88>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8b5b      	ldrh	r3, [r3, #26]
 800d8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f6:	e095      	b.n	800da24 <tcp_enqueue_flags+0x1b4>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	895a      	ldrh	r2, [r3, #10]
 800d8fc:	7dfb      	ldrb	r3, [r7, #23]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	429a      	cmp	r2, r3
 800d902:	d206      	bcs.n	800d912 <tcp_enqueue_flags+0xa2>
 800d904:	4b49      	ldr	r3, [pc, #292]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d906:	f240 423a 	movw	r2, #1082	; 0x43a
 800d90a:	494c      	ldr	r1, [pc, #304]	; (800da3c <tcp_enqueue_flags+0x1cc>)
 800d90c:	4849      	ldr	r0, [pc, #292]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d90e:	f004 fa07 	bl	8011d20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d916:	78fa      	ldrb	r2, [r7, #3]
 800d918:	7ffb      	ldrb	r3, [r7, #31]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	460b      	mov	r3, r1
 800d91e:	6939      	ldr	r1, [r7, #16]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7ff fd6d 	bl	800d400 <tcp_create_segment>
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d109      	bne.n	800d942 <tcp_enqueue_flags+0xd2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	8b5b      	ldrh	r3, [r3, #26]
 800d932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d936:	b29a      	uxth	r2, r3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d93c:	f04f 33ff 	mov.w	r3, #4294967295
 800d940:	e070      	b.n	800da24 <tcp_enqueue_flags+0x1b4>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d006      	beq.n	800d95c <tcp_enqueue_flags+0xec>
 800d94e:	4b37      	ldr	r3, [pc, #220]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d950:	f240 4242 	movw	r2, #1090	; 0x442
 800d954:	493a      	ldr	r1, [pc, #232]	; (800da40 <tcp_enqueue_flags+0x1d0>)
 800d956:	4837      	ldr	r0, [pc, #220]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d958:	f004 f9e2 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	891b      	ldrh	r3, [r3, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d006      	beq.n	800d972 <tcp_enqueue_flags+0x102>
 800d964:	4b31      	ldr	r3, [pc, #196]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800d966:	f240 4243 	movw	r2, #1091	; 0x443
 800d96a:	4936      	ldr	r1, [pc, #216]	; (800da44 <tcp_enqueue_flags+0x1d4>)
 800d96c:	4831      	ldr	r0, [pc, #196]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800d96e:	f004 f9d7 	bl	8011d20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d976:	2b00      	cmp	r3, #0
 800d978:	d103      	bne.n	800d982 <tcp_enqueue_flags+0x112>
    pcb->unsent = seg;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	66da      	str	r2, [r3, #108]	; 0x6c
 800d980:	e00d      	b.n	800d99e <tcp_enqueue_flags+0x12e>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d986:	61bb      	str	r3, [r7, #24]
 800d988:	e002      	b.n	800d990 <tcp_enqueue_flags+0x120>
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	61bb      	str	r3, [r7, #24]
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1f8      	bne.n	800d98a <tcp_enqueue_flags+0x11a>
    useg->next = seg;
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d9a6:	78fb      	ldrb	r3, [r7, #3]
 800d9a8:	f003 0302 	and.w	r3, r3, #2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d104      	bne.n	800d9ba <tcp_enqueue_flags+0x14a>
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d004      	beq.n	800d9c4 <tcp_enqueue_flags+0x154>
    pcb->snd_lbb++;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d006      	beq.n	800d9dc <tcp_enqueue_flags+0x16c>
    tcp_set_flags(pcb, TF_FIN);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	8b5b      	ldrh	r3, [r3, #26]
 800d9d2:	f043 0320 	orr.w	r3, r3, #32
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fb fbb5 	bl	8009150 <pbuf_clen>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9f0:	4413      	add	r3, r2
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00e      	beq.n	800da22 <tcp_enqueue_flags+0x1b2>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10a      	bne.n	800da22 <tcp_enqueue_flags+0x1b2>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d106      	bne.n	800da22 <tcp_enqueue_flags+0x1b2>
 800da14:	4b05      	ldr	r3, [pc, #20]	; (800da2c <tcp_enqueue_flags+0x1bc>)
 800da16:	f240 4266 	movw	r2, #1126	; 0x466
 800da1a:	490b      	ldr	r1, [pc, #44]	; (800da48 <tcp_enqueue_flags+0x1d8>)
 800da1c:	4805      	ldr	r0, [pc, #20]	; (800da34 <tcp_enqueue_flags+0x1c4>)
 800da1e:	f004 f97f 	bl	8011d20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3720      	adds	r7, #32
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	08014244 	.word	0x08014244
 800da30:	08014668 	.word	0x08014668
 800da34:	08014298 	.word	0x08014298
 800da38:	080146c0 	.word	0x080146c0
 800da3c:	080146e0 	.word	0x080146e0
 800da40:	0801471c 	.word	0x0801471c
 800da44:	08014734 	.word	0x08014734
 800da48:	08014760 	.word	0x08014760

0800da4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800da4c:	b5b0      	push	{r4, r5, r7, lr}
 800da4e:	b08a      	sub	sp, #40	; 0x28
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <tcp_output+0x1c>
 800da5a:	4ba0      	ldr	r3, [pc, #640]	; (800dcdc <tcp_output+0x290>)
 800da5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800da60:	499f      	ldr	r1, [pc, #636]	; (800dce0 <tcp_output+0x294>)
 800da62:	48a0      	ldr	r0, [pc, #640]	; (800dce4 <tcp_output+0x298>)
 800da64:	f004 f95c 	bl	8011d20 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	7d1b      	ldrb	r3, [r3, #20]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d106      	bne.n	800da7e <tcp_output+0x32>
 800da70:	4b9a      	ldr	r3, [pc, #616]	; (800dcdc <tcp_output+0x290>)
 800da72:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800da76:	499c      	ldr	r1, [pc, #624]	; (800dce8 <tcp_output+0x29c>)
 800da78:	489a      	ldr	r0, [pc, #616]	; (800dce4 <tcp_output+0x298>)
 800da7a:	f004 f951 	bl	8011d20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800da7e:	4b9b      	ldr	r3, [pc, #620]	; (800dcec <tcp_output+0x2a0>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	429a      	cmp	r2, r3
 800da86:	d101      	bne.n	800da8c <tcp_output+0x40>
    return ERR_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	e1d2      	b.n	800de32 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da98:	429a      	cmp	r2, r3
 800da9a:	d203      	bcs.n	800daa4 <tcp_output+0x58>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800daa2:	e002      	b.n	800daaa <tcp_output+0x5e>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800daaa:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10b      	bne.n	800dad0 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	8b5b      	ldrh	r3, [r3, #26]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 81a9 	beq.w	800de18 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fdd8 	bl	800e67c <tcp_send_empty_ack>
 800dacc:	4603      	mov	r3, r0
 800dace:	e1b0      	b.n	800de32 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dad0:	6879      	ldr	r1, [r7, #4]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3304      	adds	r3, #4
 800dad6:	461a      	mov	r2, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff fc75 	bl	800d3c8 <tcp_route>
 800dade:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <tcp_output+0xa0>
    return ERR_RTE;
 800dae6:	f06f 0303 	mvn.w	r3, #3
 800daea:	e1a2      	b.n	800de32 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d003      	beq.n	800dafa <tcp_output+0xae>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d111      	bne.n	800db1e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <tcp_output+0xba>
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	3304      	adds	r3, #4
 800db04:	e000      	b.n	800db08 <tcp_output+0xbc>
 800db06:	2300      	movs	r3, #0
 800db08:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d102      	bne.n	800db16 <tcp_output+0xca>
      return ERR_RTE;
 800db10:	f06f 0303 	mvn.w	r3, #3
 800db14:	e18d      	b.n	800de32 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	4618      	mov	r0, r3
 800db26:	f7f9 fe7e 	bl	8007826 <lwip_htonl>
 800db2a:	4602      	mov	r2, r0
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db34:	8912      	ldrh	r2, [r2, #8]
 800db36:	4413      	add	r3, r2
 800db38:	69ba      	ldr	r2, [r7, #24]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d227      	bcs.n	800db8e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db44:	461a      	mov	r2, r3
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	4293      	cmp	r3, r2
 800db4a:	d114      	bne.n	800db76 <tcp_output+0x12a>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db50:	2b00      	cmp	r3, #0
 800db52:	d110      	bne.n	800db76 <tcp_output+0x12a>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10b      	bne.n	800db76 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	8b5b      	ldrh	r3, [r3, #26]
 800db7a:	f003 0302 	and.w	r3, r3, #2
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 814c 	beq.w	800de1c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fd79 	bl	800e67c <tcp_send_empty_ack>
 800db8a:	4603      	mov	r3, r0
 800db8c:	e151      	b.n	800de32 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 811b 	beq.w	800ddda <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800dba4:	e002      	b.n	800dbac <tcp_output+0x160>
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	623b      	str	r3, [r7, #32]
 800dbac:	6a3b      	ldr	r3, [r7, #32]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1f8      	bne.n	800dba6 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dbb4:	e111      	b.n	800ddda <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	899b      	ldrh	r3, [r3, #12]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f9 fe1c 	bl	80077fc <lwip_htons>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d006      	beq.n	800dbde <tcp_output+0x192>
 800dbd0:	4b42      	ldr	r3, [pc, #264]	; (800dcdc <tcp_output+0x290>)
 800dbd2:	f240 5237 	movw	r2, #1335	; 0x537
 800dbd6:	4946      	ldr	r1, [pc, #280]	; (800dcf0 <tcp_output+0x2a4>)
 800dbd8:	4842      	ldr	r0, [pc, #264]	; (800dce4 <tcp_output+0x298>)
 800dbda:	f004 f8a1 	bl	8011d20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d01f      	beq.n	800dc26 <tcp_output+0x1da>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	8b5b      	ldrh	r3, [r3, #26]
 800dbea:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d119      	bne.n	800dc26 <tcp_output+0x1da>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00b      	beq.n	800dc12 <tcp_output+0x1c6>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d110      	bne.n	800dc26 <tcp_output+0x1da>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc08:	891a      	ldrh	r2, [r3, #8]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d209      	bcs.n	800dc26 <tcp_output+0x1da>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d004      	beq.n	800dc26 <tcp_output+0x1da>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc22:	2b08      	cmp	r3, #8
 800dc24:	d901      	bls.n	800dc2a <tcp_output+0x1de>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <tcp_output+0x1e0>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d106      	bne.n	800dc3e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8b5b      	ldrh	r3, [r3, #26]
 800dc34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 80e3 	beq.w	800de04 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	7d1b      	ldrb	r3, [r3, #20]
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	d00d      	beq.n	800dc62 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	899b      	ldrh	r3, [r3, #12]
 800dc4c:	b29c      	uxth	r4, r3
 800dc4e:	2010      	movs	r0, #16
 800dc50:	f7f9 fdd4 	bl	80077fc <lwip_htons>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	4322      	orrs	r2, r4
 800dc5e:	b292      	uxth	r2, r2
 800dc60:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc68:	f000 f908 	bl	800de7c <tcp_output_segment>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d009      	beq.n	800dc8c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	8b5b      	ldrh	r3, [r3, #26]
 800dc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	835a      	strh	r2, [r3, #26]
      return err;
 800dc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8a:	e0d2      	b.n	800de32 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	d006      	beq.n	800dcaa <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	8b5b      	ldrh	r3, [r3, #26]
 800dca0:	f023 0303 	bic.w	r3, r3, #3
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f9 fdb8 	bl	8007826 <lwip_htonl>
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcba:	891b      	ldrh	r3, [r3, #8]
 800dcbc:	461d      	mov	r5, r3
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	899b      	ldrh	r3, [r3, #12]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7f9 fd98 	bl	80077fc <lwip_htons>
 800dccc:	4603      	mov	r3, r0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f003 0303 	and.w	r3, r3, #3
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00d      	beq.n	800dcf4 <tcp_output+0x2a8>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e00c      	b.n	800dcf6 <tcp_output+0x2aa>
 800dcdc:	08014244 	.word	0x08014244
 800dce0:	08014788 	.word	0x08014788
 800dce4:	08014298 	.word	0x08014298
 800dce8:	080147a0 	.word	0x080147a0
 800dcec:	24003424 	.word	0x24003424
 800dcf0:	080147c8 	.word	0x080147c8
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	442b      	add	r3, r5
 800dcf8:	4423      	add	r3, r4
 800dcfa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	da02      	bge.n	800dd0e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	891b      	ldrh	r3, [r3, #8]
 800dd12:	461c      	mov	r4, r3
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	899b      	ldrh	r3, [r3, #12]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7f9 fd6d 	bl	80077fc <lwip_htons>
 800dd22:	4603      	mov	r3, r0
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 0303 	and.w	r3, r3, #3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <tcp_output+0x2e6>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e000      	b.n	800dd34 <tcp_output+0x2e8>
 800dd32:	2300      	movs	r3, #0
 800dd34:	4423      	add	r3, r4
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d049      	beq.n	800ddce <tcp_output+0x382>
      seg->next = NULL;
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d105      	bne.n	800dd54 <tcp_output+0x308>
        pcb->unacked = seg;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd4c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	623b      	str	r3, [r7, #32]
 800dd52:	e03f      	b.n	800ddd4 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f9 fd63 	bl	8007826 <lwip_htonl>
 800dd60:	4604      	mov	r4, r0
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7f9 fd5c 	bl	8007826 <lwip_htonl>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	1ae3      	subs	r3, r4, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da24      	bge.n	800ddc0 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3370      	adds	r3, #112	; 0x70
 800dd7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dd7c:	e002      	b.n	800dd84 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d011      	beq.n	800ddb0 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7f9 fd46 	bl	8007826 <lwip_htonl>
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7f9 fd3f 	bl	8007826 <lwip_htonl>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	dbe6      	blt.n	800dd7e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	e009      	b.n	800ddd4 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	623b      	str	r3, [r7, #32]
 800ddcc:	e002      	b.n	800ddd4 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ddce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddd0:	f7fc fc40 	bl	800a654 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d012      	beq.n	800de06 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7f9 fd1d 	bl	8007826 <lwip_htonl>
 800ddec:	4602      	mov	r2, r0
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf6:	8912      	ldrh	r2, [r2, #8]
 800ddf8:	4413      	add	r3, r2
  while (seg != NULL &&
 800ddfa:	69ba      	ldr	r2, [r7, #24]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	f4bf aeda 	bcs.w	800dbb6 <tcp_output+0x16a>
 800de02:	e000      	b.n	800de06 <tcp_output+0x3ba>
      break;
 800de04:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d108      	bne.n	800de20 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800de16:	e004      	b.n	800de22 <tcp_output+0x3d6>
    goto output_done;
 800de18:	bf00      	nop
 800de1a:	e002      	b.n	800de22 <tcp_output+0x3d6>
    goto output_done;
 800de1c:	bf00      	nop
 800de1e:	e000      	b.n	800de22 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800de20:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	8b5b      	ldrh	r3, [r3, #26]
 800de26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3728      	adds	r7, #40	; 0x28
 800de36:	46bd      	mov	sp, r7
 800de38:	bdb0      	pop	{r4, r5, r7, pc}
 800de3a:	bf00      	nop

0800de3c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d106      	bne.n	800de58 <tcp_output_segment_busy+0x1c>
 800de4a:	4b09      	ldr	r3, [pc, #36]	; (800de70 <tcp_output_segment_busy+0x34>)
 800de4c:	f240 529a 	movw	r2, #1434	; 0x59a
 800de50:	4908      	ldr	r1, [pc, #32]	; (800de74 <tcp_output_segment_busy+0x38>)
 800de52:	4809      	ldr	r0, [pc, #36]	; (800de78 <tcp_output_segment_busy+0x3c>)
 800de54:	f003 ff64 	bl	8011d20 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	7b9b      	ldrb	r3, [r3, #14]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d001      	beq.n	800de66 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800de62:	2301      	movs	r3, #1
 800de64:	e000      	b.n	800de68 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	08014244 	.word	0x08014244
 800de74:	080147e0 	.word	0x080147e0
 800de78:	08014298 	.word	0x08014298

0800de7c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800de7c:	b5b0      	push	{r4, r5, r7, lr}
 800de7e:	b08c      	sub	sp, #48	; 0x30
 800de80:	af04      	add	r7, sp, #16
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d106      	bne.n	800de9c <tcp_output_segment+0x20>
 800de8e:	4b64      	ldr	r3, [pc, #400]	; (800e020 <tcp_output_segment+0x1a4>)
 800de90:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800de94:	4963      	ldr	r1, [pc, #396]	; (800e024 <tcp_output_segment+0x1a8>)
 800de96:	4864      	ldr	r0, [pc, #400]	; (800e028 <tcp_output_segment+0x1ac>)
 800de98:	f003 ff42 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d106      	bne.n	800deb0 <tcp_output_segment+0x34>
 800dea2:	4b5f      	ldr	r3, [pc, #380]	; (800e020 <tcp_output_segment+0x1a4>)
 800dea4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dea8:	4960      	ldr	r1, [pc, #384]	; (800e02c <tcp_output_segment+0x1b0>)
 800deaa:	485f      	ldr	r0, [pc, #380]	; (800e028 <tcp_output_segment+0x1ac>)
 800deac:	f003 ff38 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <tcp_output_segment+0x48>
 800deb6:	4b5a      	ldr	r3, [pc, #360]	; (800e020 <tcp_output_segment+0x1a4>)
 800deb8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800debc:	495c      	ldr	r1, [pc, #368]	; (800e030 <tcp_output_segment+0x1b4>)
 800debe:	485a      	ldr	r0, [pc, #360]	; (800e028 <tcp_output_segment+0x1ac>)
 800dec0:	f003 ff2e 	bl	8011d20 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7ff ffb9 	bl	800de3c <tcp_output_segment_busy>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e0a0      	b.n	800e016 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68dc      	ldr	r4, [r3, #12]
 800dedc:	4610      	mov	r0, r2
 800dede:	f7f9 fca2 	bl	8007826 <lwip_htonl>
 800dee2:	4603      	mov	r3, r0
 800dee4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	68dc      	ldr	r4, [r3, #12]
 800deee:	4610      	mov	r0, r2
 800def0:	f7f9 fc84 	bl	80077fc <lwip_htons>
 800def4:	4603      	mov	r3, r0
 800def6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800df00:	441a      	add	r2, r3
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	3314      	adds	r3, #20
 800df0c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	7a9b      	ldrb	r3, [r3, #10]
 800df12:	f003 0301 	and.w	r3, r3, #1
 800df16:	2b00      	cmp	r3, #0
 800df18:	d015      	beq.n	800df46 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	3304      	adds	r3, #4
 800df1e:	461a      	mov	r2, r3
 800df20:	6879      	ldr	r1, [r7, #4]
 800df22:	f44f 7006 	mov.w	r0, #536	; 0x218
 800df26:	f7fc fe8b 	bl	800ac40 <tcp_eff_send_mss_netif>
 800df2a:	4603      	mov	r3, r0
 800df2c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800df2e:	8b7b      	ldrh	r3, [r7, #26]
 800df30:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800df34:	4618      	mov	r0, r3
 800df36:	f7f9 fc76 	bl	8007826 <lwip_htonl>
 800df3a:	4602      	mov	r2, r0
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3304      	adds	r3, #4
 800df44:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	da02      	bge.n	800df56 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2200      	movs	r2, #0
 800df54:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10c      	bne.n	800df78 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800df5e:	4b35      	ldr	r3, [pc, #212]	; (800e034 <tcp_output_segment+0x1b8>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f9 fc5a 	bl	8007826 <lwip_htonl>
 800df72:	4602      	mov	r2, r0
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	461a      	mov	r2, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	8959      	ldrh	r1, [r3, #10]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	8b3a      	ldrh	r2, [r7, #24]
 800df94:	1a8a      	subs	r2, r1, r2
 800df96:	b292      	uxth	r2, r2
 800df98:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	8919      	ldrh	r1, [r3, #8]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	8b3a      	ldrh	r2, [r7, #24]
 800dfa6:	1a8a      	subs	r2, r1, r2
 800dfa8:	b292      	uxth	r2, r2
 800dfaa:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	68d2      	ldr	r2, [r2, #12]
 800dfb4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	741a      	strb	r2, [r3, #16]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	f103 0214 	add.w	r2, r3, #20
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	7a9b      	ldrb	r3, [r3, #10]
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	4413      	add	r3, r2
 800dfd6:	69fa      	ldr	r2, [r7, #28]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d006      	beq.n	800dfea <tcp_output_segment+0x16e>
 800dfdc:	4b10      	ldr	r3, [pc, #64]	; (800e020 <tcp_output_segment+0x1a4>)
 800dfde:	f240 621c 	movw	r2, #1564	; 0x61c
 800dfe2:	4915      	ldr	r1, [pc, #84]	; (800e038 <tcp_output_segment+0x1bc>)
 800dfe4:	4810      	ldr	r0, [pc, #64]	; (800e028 <tcp_output_segment+0x1ac>)
 800dfe6:	f003 fe9b 	bl	8011d20 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6858      	ldr	r0, [r3, #4]
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	1d1c      	adds	r4, r3, #4
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	7add      	ldrb	r5, [r3, #11]
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	7a9b      	ldrb	r3, [r3, #10]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	9202      	str	r2, [sp, #8]
 800e000:	2206      	movs	r2, #6
 800e002:	9201      	str	r2, [sp, #4]
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	462b      	mov	r3, r5
 800e008:	4622      	mov	r2, r4
 800e00a:	f002 fe1f 	bl	8010c4c <ip4_output_if>
 800e00e:	4603      	mov	r3, r0
 800e010:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3720      	adds	r7, #32
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bdb0      	pop	{r4, r5, r7, pc}
 800e01e:	bf00      	nop
 800e020:	08014244 	.word	0x08014244
 800e024:	08014808 	.word	0x08014808
 800e028:	08014298 	.word	0x08014298
 800e02c:	08014828 	.word	0x08014828
 800e030:	08014848 	.word	0x08014848
 800e034:	24003414 	.word	0x24003414
 800e038:	0801486c 	.word	0x0801486c

0800e03c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e03c:	b5b0      	push	{r4, r5, r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d106      	bne.n	800e058 <tcp_rexmit_rto_prepare+0x1c>
 800e04a:	4b31      	ldr	r3, [pc, #196]	; (800e110 <tcp_rexmit_rto_prepare+0xd4>)
 800e04c:	f240 6263 	movw	r2, #1635	; 0x663
 800e050:	4930      	ldr	r1, [pc, #192]	; (800e114 <tcp_rexmit_rto_prepare+0xd8>)
 800e052:	4831      	ldr	r0, [pc, #196]	; (800e118 <tcp_rexmit_rto_prepare+0xdc>)
 800e054:	f003 fe64 	bl	8011d20 <iprintf>

  if (pcb->unacked == NULL) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d102      	bne.n	800e066 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e060:	f06f 0305 	mvn.w	r3, #5
 800e064:	e050      	b.n	800e108 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	e00b      	b.n	800e086 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f7ff fee4 	bl	800de3c <tcp_output_segment_busy>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e07a:	f06f 0305 	mvn.w	r3, #5
 800e07e:	e043      	b.n	800e108 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	60fb      	str	r3, [r7, #12]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1ef      	bne.n	800e06e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f7ff fed4 	bl	800de3c <tcp_output_segment_busy>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e09a:	f06f 0305 	mvn.w	r3, #5
 800e09e:	e033      	b.n	800e108 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	8b5b      	ldrh	r3, [r3, #26]
 800e0ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7f9 fbab 	bl	8007826 <lwip_htonl>
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	891b      	ldrh	r3, [r3, #8]
 800e0d6:	461d      	mov	r5, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	899b      	ldrh	r3, [r3, #12]
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7f9 fb8b 	bl	80077fc <lwip_htons>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	f003 0303 	and.w	r3, r3, #3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d001      	beq.n	800e0f6 <tcp_rexmit_rto_prepare+0xba>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e000      	b.n	800e0f8 <tcp_rexmit_rto_prepare+0xbc>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	442b      	add	r3, r5
 800e0fa:	18e2      	adds	r2, r4, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3710      	adds	r7, #16
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bdb0      	pop	{r4, r5, r7, pc}
 800e110:	08014244 	.word	0x08014244
 800e114:	08014880 	.word	0x08014880
 800e118:	08014298 	.word	0x08014298

0800e11c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d106      	bne.n	800e138 <tcp_rexmit_rto_commit+0x1c>
 800e12a:	4b0d      	ldr	r3, [pc, #52]	; (800e160 <tcp_rexmit_rto_commit+0x44>)
 800e12c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e130:	490c      	ldr	r1, [pc, #48]	; (800e164 <tcp_rexmit_rto_commit+0x48>)
 800e132:	480d      	ldr	r0, [pc, #52]	; (800e168 <tcp_rexmit_rto_commit+0x4c>)
 800e134:	f003 fdf4 	bl	8011d20 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e13e:	2bff      	cmp	r3, #255	; 0xff
 800e140:	d007      	beq.n	800e152 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e148:	3301      	adds	r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff fc7a 	bl	800da4c <tcp_output>
}
 800e158:	bf00      	nop
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	08014244 	.word	0x08014244
 800e164:	080148a4 	.word	0x080148a4
 800e168:	08014298 	.word	0x08014298

0800e16c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <tcp_rexmit_rto+0x1c>
 800e17a:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <tcp_rexmit_rto+0x38>)
 800e17c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e180:	4909      	ldr	r1, [pc, #36]	; (800e1a8 <tcp_rexmit_rto+0x3c>)
 800e182:	480a      	ldr	r0, [pc, #40]	; (800e1ac <tcp_rexmit_rto+0x40>)
 800e184:	f003 fdcc 	bl	8011d20 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7ff ff57 	bl	800e03c <tcp_rexmit_rto_prepare>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d102      	bne.n	800e19a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff ffc1 	bl	800e11c <tcp_rexmit_rto_commit>
  }
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	08014244 	.word	0x08014244
 800e1a8:	080148c8 	.word	0x080148c8
 800e1ac:	08014298 	.word	0x08014298

0800e1b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e1b0:	b590      	push	{r4, r7, lr}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <tcp_rexmit+0x1c>
 800e1be:	4b2f      	ldr	r3, [pc, #188]	; (800e27c <tcp_rexmit+0xcc>)
 800e1c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e1c4:	492e      	ldr	r1, [pc, #184]	; (800e280 <tcp_rexmit+0xd0>)
 800e1c6:	482f      	ldr	r0, [pc, #188]	; (800e284 <tcp_rexmit+0xd4>)
 800e1c8:	f003 fdaa 	bl	8011d20 <iprintf>

  if (pcb->unacked == NULL) {
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d102      	bne.n	800e1da <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e1d4:	f06f 0305 	mvn.w	r3, #5
 800e1d8:	e04c      	b.n	800e274 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e1e0:	68b8      	ldr	r0, [r7, #8]
 800e1e2:	f7ff fe2b 	bl	800de3c <tcp_output_segment_busy>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e1ec:	f06f 0305 	mvn.w	r3, #5
 800e1f0:	e040      	b.n	800e274 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	336c      	adds	r3, #108	; 0x6c
 800e1fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e200:	e002      	b.n	800e208 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d011      	beq.n	800e234 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f9 fb04 	bl	8007826 <lwip_htonl>
 800e21e:	4604      	mov	r4, r0
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	4618      	mov	r0, r3
 800e228:	f7f9 fafd 	bl	8007826 <lwip_htonl>
 800e22c:	4603      	mov	r3, r0
 800e22e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e230:	2b00      	cmp	r3, #0
 800e232:	dbe6      	blt.n	800e202 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d103      	bne.n	800e252 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e258:	2bff      	cmp	r3, #255	; 0xff
 800e25a:	d007      	beq.n	800e26c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e262:	3301      	adds	r3, #1
 800e264:	b2da      	uxtb	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd90      	pop	{r4, r7, pc}
 800e27c:	08014244 	.word	0x08014244
 800e280:	080148e4 	.word	0x080148e4
 800e284:	08014298 	.word	0x08014298

0800e288 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d106      	bne.n	800e2a4 <tcp_rexmit_fast+0x1c>
 800e296:	4b2f      	ldr	r3, [pc, #188]	; (800e354 <tcp_rexmit_fast+0xcc>)
 800e298:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e29c:	492e      	ldr	r1, [pc, #184]	; (800e358 <tcp_rexmit_fast+0xd0>)
 800e29e:	482f      	ldr	r0, [pc, #188]	; (800e35c <tcp_rexmit_fast+0xd4>)
 800e2a0:	f003 fd3e 	bl	8011d20 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d04f      	beq.n	800e34c <tcp_rexmit_fast+0xc4>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	8b5b      	ldrh	r3, [r3, #26]
 800e2b0:	f003 0304 	and.w	r3, r3, #4
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d149      	bne.n	800e34c <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff ff79 	bl	800e1b0 <tcp_rexmit>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d143      	bne.n	800e34c <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d208      	bcs.n	800e2e6 <tcp_rexmit_fast+0x5e>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	da00      	bge.n	800e2e0 <tcp_rexmit_fast+0x58>
 800e2de:	3301      	adds	r3, #1
 800e2e0:	105b      	asrs	r3, r3, #1
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	e007      	b.n	800e2f6 <tcp_rexmit_fast+0x6e>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	da00      	bge.n	800e2f2 <tcp_rexmit_fast+0x6a>
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	105b      	asrs	r3, r3, #1
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e302:	461a      	mov	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e308:	005b      	lsls	r3, r3, #1
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d206      	bcs.n	800e31c <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	b29a      	uxth	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e326:	4619      	mov	r1, r3
 800e328:	0049      	lsls	r1, r1, #1
 800e32a:	440b      	add	r3, r1
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	4413      	add	r3, r2
 800e330:	b29a      	uxth	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	8b5b      	ldrh	r3, [r3, #26]
 800e33c:	f043 0304 	orr.w	r3, r3, #4
 800e340:	b29a      	uxth	r2, r3
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e34c:	bf00      	nop
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	08014244 	.word	0x08014244
 800e358:	080148fc 	.word	0x080148fc
 800e35c:	08014298 	.word	0x08014298

0800e360 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	607b      	str	r3, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	817b      	strh	r3, [r7, #10]
 800e36e:	4613      	mov	r3, r2
 800e370:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e372:	897a      	ldrh	r2, [r7, #10]
 800e374:	893b      	ldrh	r3, [r7, #8]
 800e376:	4413      	add	r3, r2
 800e378:	b29b      	uxth	r3, r3
 800e37a:	3314      	adds	r3, #20
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e382:	4619      	mov	r1, r3
 800e384:	20a4      	movs	r0, #164	; 0xa4
 800e386:	f7fa fb7b 	bl	8008a80 <pbuf_alloc>
 800e38a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d04e      	beq.n	800e430 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	895b      	ldrh	r3, [r3, #10]
 800e396:	461a      	mov	r2, r3
 800e398:	897b      	ldrh	r3, [r7, #10]
 800e39a:	3314      	adds	r3, #20
 800e39c:	429a      	cmp	r2, r3
 800e39e:	da06      	bge.n	800e3ae <tcp_output_alloc_header_common+0x4e>
 800e3a0:	4b26      	ldr	r3, [pc, #152]	; (800e43c <tcp_output_alloc_header_common+0xdc>)
 800e3a2:	f240 7224 	movw	r2, #1828	; 0x724
 800e3a6:	4926      	ldr	r1, [pc, #152]	; (800e440 <tcp_output_alloc_header_common+0xe0>)
 800e3a8:	4826      	ldr	r0, [pc, #152]	; (800e444 <tcp_output_alloc_header_common+0xe4>)
 800e3aa:	f003 fcb9 	bl	8011d20 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e3b4:	8c3b      	ldrh	r3, [r7, #32]
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7f9 fa20 	bl	80077fc <lwip_htons>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	461a      	mov	r2, r3
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e3c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7f9 fa18 	bl	80077fc <lwip_htons>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7f9 fa23 	bl	8007826 <lwip_htonl>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e3e6:	897b      	ldrh	r3, [r7, #10]
 800e3e8:	089b      	lsrs	r3, r3, #2
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	3305      	adds	r3, #5
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	031b      	lsls	r3, r3, #12
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f9 f9fc 	bl	80077fc <lwip_htons>
 800e404:	4603      	mov	r3, r0
 800e406:	461a      	mov	r2, r3
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e40c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f9 f9f4 	bl	80077fc <lwip_htons>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	2200      	movs	r2, #0
 800e420:	741a      	strb	r2, [r3, #16]
 800e422:	2200      	movs	r2, #0
 800e424:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	2200      	movs	r2, #0
 800e42a:	749a      	strb	r2, [r3, #18]
 800e42c:	2200      	movs	r2, #0
 800e42e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e430:	697b      	ldr	r3, [r7, #20]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	08014244 	.word	0x08014244
 800e440:	0801491c 	.word	0x0801491c
 800e444:	08014298 	.word	0x08014298

0800e448 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e448:	b5b0      	push	{r4, r5, r7, lr}
 800e44a:	b08a      	sub	sp, #40	; 0x28
 800e44c:	af04      	add	r7, sp, #16
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	607b      	str	r3, [r7, #4]
 800e452:	460b      	mov	r3, r1
 800e454:	817b      	strh	r3, [r7, #10]
 800e456:	4613      	mov	r3, r2
 800e458:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d106      	bne.n	800e46e <tcp_output_alloc_header+0x26>
 800e460:	4b15      	ldr	r3, [pc, #84]	; (800e4b8 <tcp_output_alloc_header+0x70>)
 800e462:	f240 7242 	movw	r2, #1858	; 0x742
 800e466:	4915      	ldr	r1, [pc, #84]	; (800e4bc <tcp_output_alloc_header+0x74>)
 800e468:	4815      	ldr	r0, [pc, #84]	; (800e4c0 <tcp_output_alloc_header+0x78>)
 800e46a:	f003 fc59 	bl	8011d20 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	8adb      	ldrh	r3, [r3, #22]
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	8b12      	ldrh	r2, [r2, #24]
 800e47a:	68f9      	ldr	r1, [r7, #12]
 800e47c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e47e:	893d      	ldrh	r5, [r7, #8]
 800e480:	897c      	ldrh	r4, [r7, #10]
 800e482:	9103      	str	r1, [sp, #12]
 800e484:	2110      	movs	r1, #16
 800e486:	9102      	str	r1, [sp, #8]
 800e488:	9201      	str	r2, [sp, #4]
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	462a      	mov	r2, r5
 800e490:	4621      	mov	r1, r4
 800e492:	f7ff ff65 	bl	800e360 <tcp_output_alloc_header_common>
 800e496:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d006      	beq.n	800e4ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e4a6:	441a      	add	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e4ac:	697b      	ldr	r3, [r7, #20]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3718      	adds	r7, #24
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	08014244 	.word	0x08014244
 800e4bc:	0801494c 	.word	0x0801494c
 800e4c0:	08014298 	.word	0x08014298

0800e4c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b088      	sub	sp, #32
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	71fb      	strb	r3, [r7, #7]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d106      	bne.n	800e4f2 <tcp_output_fill_options+0x2e>
 800e4e4:	4b13      	ldr	r3, [pc, #76]	; (800e534 <tcp_output_fill_options+0x70>)
 800e4e6:	f240 7256 	movw	r2, #1878	; 0x756
 800e4ea:	4913      	ldr	r1, [pc, #76]	; (800e538 <tcp_output_fill_options+0x74>)
 800e4ec:	4813      	ldr	r0, [pc, #76]	; (800e53c <tcp_output_fill_options+0x78>)
 800e4ee:	f003 fc17 	bl	8011d20 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	3314      	adds	r3, #20
 800e4fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	f103 0214 	add.w	r2, r3, #20
 800e504:	8bfb      	ldrh	r3, [r7, #30]
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	4619      	mov	r1, r3
 800e50a:	79fb      	ldrb	r3, [r7, #7]
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	f003 0304 	and.w	r3, r3, #4
 800e512:	440b      	add	r3, r1
 800e514:	4413      	add	r3, r2
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d006      	beq.n	800e52a <tcp_output_fill_options+0x66>
 800e51c:	4b05      	ldr	r3, [pc, #20]	; (800e534 <tcp_output_fill_options+0x70>)
 800e51e:	f240 7275 	movw	r2, #1909	; 0x775
 800e522:	4907      	ldr	r1, [pc, #28]	; (800e540 <tcp_output_fill_options+0x7c>)
 800e524:	4805      	ldr	r0, [pc, #20]	; (800e53c <tcp_output_fill_options+0x78>)
 800e526:	f003 fbfb 	bl	8011d20 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e52a:	bf00      	nop
 800e52c:	3720      	adds	r7, #32
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	08014244 	.word	0x08014244
 800e538:	08014974 	.word	0x08014974
 800e53c:	08014298 	.word	0x08014298
 800e540:	0801486c 	.word	0x0801486c

0800e544 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b08a      	sub	sp, #40	; 0x28
 800e548:	af04      	add	r7, sp, #16
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
 800e550:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d106      	bne.n	800e566 <tcp_output_control_segment+0x22>
 800e558:	4b1c      	ldr	r3, [pc, #112]	; (800e5cc <tcp_output_control_segment+0x88>)
 800e55a:	f240 7287 	movw	r2, #1927	; 0x787
 800e55e:	491c      	ldr	r1, [pc, #112]	; (800e5d0 <tcp_output_control_segment+0x8c>)
 800e560:	481c      	ldr	r0, [pc, #112]	; (800e5d4 <tcp_output_control_segment+0x90>)
 800e562:	f003 fbdd 	bl	8011d20 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f7fe ff2c 	bl	800d3c8 <tcp_route>
 800e570:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e578:	23fc      	movs	r3, #252	; 0xfc
 800e57a:	75fb      	strb	r3, [r7, #23]
 800e57c:	e01c      	b.n	800e5b8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d006      	beq.n	800e592 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	7adb      	ldrb	r3, [r3, #11]
 800e588:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	7a9b      	ldrb	r3, [r3, #10]
 800e58e:	757b      	strb	r3, [r7, #21]
 800e590:	e003      	b.n	800e59a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e592:	23ff      	movs	r3, #255	; 0xff
 800e594:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e59a:	7dba      	ldrb	r2, [r7, #22]
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	9302      	str	r3, [sp, #8]
 800e5a0:	2306      	movs	r3, #6
 800e5a2:	9301      	str	r3, [sp, #4]
 800e5a4:	7d7b      	ldrb	r3, [r7, #21]
 800e5a6:	9300      	str	r3, [sp, #0]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	6879      	ldr	r1, [r7, #4]
 800e5ae:	68b8      	ldr	r0, [r7, #8]
 800e5b0:	f002 fb4c 	bl	8010c4c <ip4_output_if>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e5b8:	68b8      	ldr	r0, [r7, #8]
 800e5ba:	f7fa fd41 	bl	8009040 <pbuf_free>
  return err;
 800e5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3718      	adds	r7, #24
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08014244 	.word	0x08014244
 800e5d0:	0801499c 	.word	0x0801499c
 800e5d4:	08014298 	.word	0x08014298

0800e5d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e5d8:	b590      	push	{r4, r7, lr}
 800e5da:	b08b      	sub	sp, #44	; 0x2c
 800e5dc:	af04      	add	r7, sp, #16
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d106      	bne.n	800e5fa <tcp_rst+0x22>
 800e5ec:	4b1f      	ldr	r3, [pc, #124]	; (800e66c <tcp_rst+0x94>)
 800e5ee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e5f2:	491f      	ldr	r1, [pc, #124]	; (800e670 <tcp_rst+0x98>)
 800e5f4:	481f      	ldr	r0, [pc, #124]	; (800e674 <tcp_rst+0x9c>)
 800e5f6:	f003 fb93 	bl	8011d20 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d106      	bne.n	800e60e <tcp_rst+0x36>
 800e600:	4b1a      	ldr	r3, [pc, #104]	; (800e66c <tcp_rst+0x94>)
 800e602:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e606:	491c      	ldr	r1, [pc, #112]	; (800e678 <tcp_rst+0xa0>)
 800e608:	481a      	ldr	r0, [pc, #104]	; (800e674 <tcp_rst+0x9c>)
 800e60a:	f003 fb89 	bl	8011d20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e60e:	2300      	movs	r3, #0
 800e610:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e612:	f246 0308 	movw	r3, #24584	; 0x6008
 800e616:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e618:	7dfb      	ldrb	r3, [r7, #23]
 800e61a:	b29c      	uxth	r4, r3
 800e61c:	68b8      	ldr	r0, [r7, #8]
 800e61e:	f7f9 f902 	bl	8007826 <lwip_htonl>
 800e622:	4602      	mov	r2, r0
 800e624:	8abb      	ldrh	r3, [r7, #20]
 800e626:	9303      	str	r3, [sp, #12]
 800e628:	2314      	movs	r3, #20
 800e62a:	9302      	str	r3, [sp, #8]
 800e62c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	4613      	mov	r3, r2
 800e636:	2200      	movs	r2, #0
 800e638:	4621      	mov	r1, r4
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7ff fe90 	bl	800e360 <tcp_output_alloc_header_common>
 800e640:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00c      	beq.n	800e662 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	2200      	movs	r2, #0
 800e64c:	6939      	ldr	r1, [r7, #16]
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f7ff ff38 	bl	800e4c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	6939      	ldr	r1, [r7, #16]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff ff72 	bl	800e544 <tcp_output_control_segment>
 800e660:	e000      	b.n	800e664 <tcp_rst+0x8c>
    return;
 800e662:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e664:	371c      	adds	r7, #28
 800e666:	46bd      	mov	sp, r7
 800e668:	bd90      	pop	{r4, r7, pc}
 800e66a:	bf00      	nop
 800e66c:	08014244 	.word	0x08014244
 800e670:	080149c8 	.word	0x080149c8
 800e674:	08014298 	.word	0x08014298
 800e678:	080149e4 	.word	0x080149e4

0800e67c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e684:	2300      	movs	r3, #0
 800e686:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e688:	2300      	movs	r3, #0
 800e68a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d106      	bne.n	800e6a0 <tcp_send_empty_ack+0x24>
 800e692:	4b28      	ldr	r3, [pc, #160]	; (800e734 <tcp_send_empty_ack+0xb8>)
 800e694:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e698:	4927      	ldr	r1, [pc, #156]	; (800e738 <tcp_send_empty_ack+0xbc>)
 800e69a:	4828      	ldr	r0, [pc, #160]	; (800e73c <tcp_send_empty_ack+0xc0>)
 800e69c:	f003 fb40 	bl	8011d20 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e6a0:	7dfb      	ldrb	r3, [r7, #23]
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	f003 0304 	and.w	r3, r3, #4
 800e6aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e6ac:	7d7b      	ldrb	r3, [r7, #21]
 800e6ae:	b29c      	uxth	r4, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7f9 f8b6 	bl	8007826 <lwip_htonl>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2200      	movs	r2, #0
 800e6be:	4621      	mov	r1, r4
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7ff fec1 	bl	800e448 <tcp_output_alloc_header>
 800e6c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d109      	bne.n	800e6e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	8b5b      	ldrh	r3, [r3, #26]
 800e6d2:	f043 0303 	orr.w	r3, r3, #3
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e6dc:	f06f 0301 	mvn.w	r3, #1
 800e6e0:	e023      	b.n	800e72a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e6e2:	7dbb      	ldrb	r3, [r7, #22]
 800e6e4:	7dfa      	ldrb	r2, [r7, #23]
 800e6e6:	6939      	ldr	r1, [r7, #16]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7ff feeb 	bl	800e4c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	6939      	ldr	r1, [r7, #16]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7ff ff24 	bl	800e544 <tcp_output_control_segment>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d007      	beq.n	800e718 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	8b5b      	ldrh	r3, [r3, #26]
 800e70c:	f043 0303 	orr.w	r3, r3, #3
 800e710:	b29a      	uxth	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	835a      	strh	r2, [r3, #26]
 800e716:	e006      	b.n	800e726 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	8b5b      	ldrh	r3, [r3, #26]
 800e71c:	f023 0303 	bic.w	r3, r3, #3
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	371c      	adds	r7, #28
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd90      	pop	{r4, r7, pc}
 800e732:	bf00      	nop
 800e734:	08014244 	.word	0x08014244
 800e738:	08014a00 	.word	0x08014a00
 800e73c:	08014298 	.word	0x08014298

0800e740 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e740:	b590      	push	{r4, r7, lr}
 800e742:	b087      	sub	sp, #28
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e748:	2300      	movs	r3, #0
 800e74a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d106      	bne.n	800e760 <tcp_keepalive+0x20>
 800e752:	4b18      	ldr	r3, [pc, #96]	; (800e7b4 <tcp_keepalive+0x74>)
 800e754:	f640 0224 	movw	r2, #2084	; 0x824
 800e758:	4917      	ldr	r1, [pc, #92]	; (800e7b8 <tcp_keepalive+0x78>)
 800e75a:	4818      	ldr	r0, [pc, #96]	; (800e7bc <tcp_keepalive+0x7c>)
 800e75c:	f003 fae0 	bl	8011d20 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e760:	7dfb      	ldrb	r3, [r7, #23]
 800e762:	b29c      	uxth	r4, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e768:	3b01      	subs	r3, #1
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f9 f85b 	bl	8007826 <lwip_htonl>
 800e770:	4603      	mov	r3, r0
 800e772:	2200      	movs	r2, #0
 800e774:	4621      	mov	r1, r4
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7ff fe66 	bl	800e448 <tcp_output_alloc_header>
 800e77c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d102      	bne.n	800e78a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e784:	f04f 33ff 	mov.w	r3, #4294967295
 800e788:	e010      	b.n	800e7ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e78a:	7dfb      	ldrb	r3, [r7, #23]
 800e78c:	2200      	movs	r2, #0
 800e78e:	6939      	ldr	r1, [r7, #16]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff fe97 	bl	800e4c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	3304      	adds	r3, #4
 800e79c:	6939      	ldr	r1, [r7, #16]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff fed0 	bl	800e544 <tcp_output_control_segment>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd90      	pop	{r4, r7, pc}
 800e7b4:	08014244 	.word	0x08014244
 800e7b8:	08014a20 	.word	0x08014a20
 800e7bc:	08014298 	.word	0x08014298

0800e7c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e7c0:	b590      	push	{r4, r7, lr}
 800e7c2:	b08b      	sub	sp, #44	; 0x2c
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d106      	bne.n	800e7e2 <tcp_zero_window_probe+0x22>
 800e7d4:	4b4c      	ldr	r3, [pc, #304]	; (800e908 <tcp_zero_window_probe+0x148>)
 800e7d6:	f640 024f 	movw	r2, #2127	; 0x84f
 800e7da:	494c      	ldr	r1, [pc, #304]	; (800e90c <tcp_zero_window_probe+0x14c>)
 800e7dc:	484c      	ldr	r0, [pc, #304]	; (800e910 <tcp_zero_window_probe+0x150>)
 800e7de:	f003 fa9f 	bl	8011d20 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d101      	bne.n	800e7f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	e086      	b.n	800e900 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7f8:	2bff      	cmp	r3, #255	; 0xff
 800e7fa:	d007      	beq.n	800e80c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e802:	3301      	adds	r3, #1
 800e804:	b2da      	uxtb	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	899b      	ldrh	r3, [r3, #12]
 800e812:	b29b      	uxth	r3, r3
 800e814:	4618      	mov	r0, r3
 800e816:	f7f8 fff1 	bl	80077fc <lwip_htons>
 800e81a:	4603      	mov	r3, r0
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	f003 0301 	and.w	r3, r3, #1
 800e822:	2b00      	cmp	r3, #0
 800e824:	d005      	beq.n	800e832 <tcp_zero_window_probe+0x72>
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	891b      	ldrh	r3, [r3, #8]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d101      	bne.n	800e832 <tcp_zero_window_probe+0x72>
 800e82e:	2301      	movs	r3, #1
 800e830:	e000      	b.n	800e834 <tcp_zero_window_probe+0x74>
 800e832:	2300      	movs	r3, #0
 800e834:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e836:	7ffb      	ldrb	r3, [r7, #31]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bf0c      	ite	eq
 800e83c:	2301      	moveq	r3, #1
 800e83e:	2300      	movne	r3, #0
 800e840:	b2db      	uxtb	r3, r3
 800e842:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e848:	b299      	uxth	r1, r3
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	8bba      	ldrh	r2, [r7, #28]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7ff fdf8 	bl	800e448 <tcp_output_alloc_header>
 800e858:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d102      	bne.n	800e866 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e860:	f04f 33ff 	mov.w	r3, #4294967295
 800e864:	e04c      	b.n	800e900 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e86c:	7ffb      	ldrb	r3, [r7, #31]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d011      	beq.n	800e896 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	899b      	ldrh	r3, [r3, #12]
 800e876:	b29b      	uxth	r3, r3
 800e878:	b21b      	sxth	r3, r3
 800e87a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e87e:	b21c      	sxth	r4, r3
 800e880:	2011      	movs	r0, #17
 800e882:	f7f8 ffbb 	bl	80077fc <lwip_htons>
 800e886:	4603      	mov	r3, r0
 800e888:	b21b      	sxth	r3, r3
 800e88a:	4323      	orrs	r3, r4
 800e88c:	b21b      	sxth	r3, r3
 800e88e:	b29a      	uxth	r2, r3
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	819a      	strh	r2, [r3, #12]
 800e894:	e010      	b.n	800e8b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	3314      	adds	r3, #20
 800e89c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	6858      	ldr	r0, [r3, #4]
 800e8a2:	6a3b      	ldr	r3, [r7, #32]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	891a      	ldrh	r2, [r3, #8]
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	891b      	ldrh	r3, [r3, #8]
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	6939      	ldr	r1, [r7, #16]
 800e8b4:	f7fa fdbe 	bl	8009434 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8b8:	6a3b      	ldr	r3, [r7, #32]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7f8 ffb1 	bl	8007826 <lwip_htonl>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	da02      	bge.n	800e8dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	69b9      	ldr	r1, [r7, #24]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff fded 	bl	800e4c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	69b9      	ldr	r1, [r7, #24]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7ff fe26 	bl	800e544 <tcp_output_control_segment>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e8fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e900:	4618      	mov	r0, r3
 800e902:	372c      	adds	r7, #44	; 0x2c
 800e904:	46bd      	mov	sp, r7
 800e906:	bd90      	pop	{r4, r7, pc}
 800e908:	08014244 	.word	0x08014244
 800e90c:	08014a3c 	.word	0x08014a3c
 800e910:	08014298 	.word	0x08014298

0800e914 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e91c:	f7fa ff0a 	bl	8009734 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e920:	4b0a      	ldr	r3, [pc, #40]	; (800e94c <tcpip_tcp_timer+0x38>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d103      	bne.n	800e930 <tcpip_tcp_timer+0x1c>
 800e928:	4b09      	ldr	r3, [pc, #36]	; (800e950 <tcpip_tcp_timer+0x3c>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d005      	beq.n	800e93c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e930:	2200      	movs	r2, #0
 800e932:	4908      	ldr	r1, [pc, #32]	; (800e954 <tcpip_tcp_timer+0x40>)
 800e934:	20fa      	movs	r0, #250	; 0xfa
 800e936:	f000 f8f1 	bl	800eb1c <sys_timeout>
 800e93a:	e002      	b.n	800e942 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e93c:	4b06      	ldr	r3, [pc, #24]	; (800e958 <tcpip_tcp_timer+0x44>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
  }
}
 800e942:	bf00      	nop
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	24003410 	.word	0x24003410
 800e950:	24003420 	.word	0x24003420
 800e954:	0800e915 	.word	0x0800e915
 800e958:	2400012c 	.word	0x2400012c

0800e95c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e960:	4b0a      	ldr	r3, [pc, #40]	; (800e98c <tcp_timer_needed+0x30>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10f      	bne.n	800e988 <tcp_timer_needed+0x2c>
 800e968:	4b09      	ldr	r3, [pc, #36]	; (800e990 <tcp_timer_needed+0x34>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d103      	bne.n	800e978 <tcp_timer_needed+0x1c>
 800e970:	4b08      	ldr	r3, [pc, #32]	; (800e994 <tcp_timer_needed+0x38>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d007      	beq.n	800e988 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e978:	4b04      	ldr	r3, [pc, #16]	; (800e98c <tcp_timer_needed+0x30>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e97e:	2200      	movs	r2, #0
 800e980:	4905      	ldr	r1, [pc, #20]	; (800e998 <tcp_timer_needed+0x3c>)
 800e982:	20fa      	movs	r0, #250	; 0xfa
 800e984:	f000 f8ca 	bl	800eb1c <sys_timeout>
  }
}
 800e988:	bf00      	nop
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	2400012c 	.word	0x2400012c
 800e990:	24003410 	.word	0x24003410
 800e994:	24003420 	.word	0x24003420
 800e998:	0800e915 	.word	0x0800e915

0800e99c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e9a8:	2006      	movs	r0, #6
 800e9aa:	f7f9 fc67 	bl	800827c <memp_malloc>
 800e9ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d109      	bne.n	800e9ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d151      	bne.n	800ea60 <sys_timeout_abs+0xc4>
 800e9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ea68 <sys_timeout_abs+0xcc>)
 800e9be:	22be      	movs	r2, #190	; 0xbe
 800e9c0:	492a      	ldr	r1, [pc, #168]	; (800ea6c <sys_timeout_abs+0xd0>)
 800e9c2:	482b      	ldr	r0, [pc, #172]	; (800ea70 <sys_timeout_abs+0xd4>)
 800e9c4:	f003 f9ac 	bl	8011d20 <iprintf>
    return;
 800e9c8:	e04a      	b.n	800ea60 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e9e2:	4b24      	ldr	r3, [pc, #144]	; (800ea74 <sys_timeout_abs+0xd8>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d103      	bne.n	800e9f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e9ea:	4a22      	ldr	r2, [pc, #136]	; (800ea74 <sys_timeout_abs+0xd8>)
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	6013      	str	r3, [r2, #0]
    return;
 800e9f0:	e037      	b.n	800ea62 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	685a      	ldr	r2, [r3, #4]
 800e9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ea74 <sys_timeout_abs+0xd8>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	0fdb      	lsrs	r3, r3, #31
 800ea00:	f003 0301 	and.w	r3, r3, #1
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d007      	beq.n	800ea1a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ea0a:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <sys_timeout_abs+0xd8>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ea12:	4a18      	ldr	r2, [pc, #96]	; (800ea74 <sys_timeout_abs+0xd8>)
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	6013      	str	r3, [r2, #0]
 800ea18:	e023      	b.n	800ea62 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea1a:	4b16      	ldr	r3, [pc, #88]	; (800ea74 <sys_timeout_abs+0xd8>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	617b      	str	r3, [r7, #20]
 800ea20:	e01a      	b.n	800ea58 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00b      	beq.n	800ea42 <sys_timeout_abs+0xa6>
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	0fdb      	lsrs	r3, r3, #31
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d007      	beq.n	800ea52 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	693a      	ldr	r2, [r7, #16]
 800ea4e:	601a      	str	r2, [r3, #0]
        break;
 800ea50:	e007      	b.n	800ea62 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1e1      	bne.n	800ea22 <sys_timeout_abs+0x86>
 800ea5e:	e000      	b.n	800ea62 <sys_timeout_abs+0xc6>
    return;
 800ea60:	bf00      	nop
      }
    }
  }
}
 800ea62:	3718      	adds	r7, #24
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	08014a60 	.word	0x08014a60
 800ea6c:	08014a94 	.word	0x08014a94
 800ea70:	08014ad4 	.word	0x08014ad4
 800ea74:	24000124 	.word	0x24000124

0800ea78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b086      	sub	sp, #24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	4798      	blx	r3

  now = sys_now();
 800ea8a:	f7f8 fddd 	bl	8007648 <sys_now>
 800ea8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	4b0f      	ldr	r3, [pc, #60]	; (800ead4 <lwip_cyclic_timer+0x5c>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4413      	add	r3, r2
 800ea9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	0fdb      	lsrs	r3, r3, #31
 800eaa4:	f003 0301 	and.w	r3, r3, #1
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d009      	beq.n	800eac2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	4413      	add	r3, r2
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	4907      	ldr	r1, [pc, #28]	; (800ead8 <lwip_cyclic_timer+0x60>)
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff ff6e 	bl	800e99c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800eac0:	e004      	b.n	800eacc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	4904      	ldr	r1, [pc, #16]	; (800ead8 <lwip_cyclic_timer+0x60>)
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff ff68 	bl	800e99c <sys_timeout_abs>
}
 800eacc:	bf00      	nop
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	24000128 	.word	0x24000128
 800ead8:	0800ea79 	.word	0x0800ea79

0800eadc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eae2:	2301      	movs	r3, #1
 800eae4:	607b      	str	r3, [r7, #4]
 800eae6:	e00e      	b.n	800eb06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eae8:	4a0a      	ldr	r2, [pc, #40]	; (800eb14 <sys_timeouts_init+0x38>)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	4a07      	ldr	r2, [pc, #28]	; (800eb14 <sys_timeouts_init+0x38>)
 800eaf6:	4413      	add	r3, r2
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4907      	ldr	r1, [pc, #28]	; (800eb18 <sys_timeouts_init+0x3c>)
 800eafc:	f000 f80e 	bl	800eb1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3301      	adds	r3, #1
 800eb04:	607b      	str	r3, [r7, #4]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d9ed      	bls.n	800eae8 <sys_timeouts_init+0xc>
  }
}
 800eb0c:	bf00      	nop
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	0801565c 	.word	0x0801565c
 800eb18:	0800ea79 	.word	0x0800ea79

0800eb1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb2e:	d306      	bcc.n	800eb3e <sys_timeout+0x22>
 800eb30:	4b0a      	ldr	r3, [pc, #40]	; (800eb5c <sys_timeout+0x40>)
 800eb32:	f240 1229 	movw	r2, #297	; 0x129
 800eb36:	490a      	ldr	r1, [pc, #40]	; (800eb60 <sys_timeout+0x44>)
 800eb38:	480a      	ldr	r0, [pc, #40]	; (800eb64 <sys_timeout+0x48>)
 800eb3a:	f003 f8f1 	bl	8011d20 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eb3e:	f7f8 fd83 	bl	8007648 <sys_now>
 800eb42:	4602      	mov	r2, r0
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4413      	add	r3, r2
 800eb48:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	68b9      	ldr	r1, [r7, #8]
 800eb4e:	6978      	ldr	r0, [r7, #20]
 800eb50:	f7ff ff24 	bl	800e99c <sys_timeout_abs>
#endif
}
 800eb54:	bf00      	nop
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	08014a60 	.word	0x08014a60
 800eb60:	08014afc 	.word	0x08014afc
 800eb64:	08014ad4 	.word	0x08014ad4

0800eb68 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eb6e:	f7f8 fd6b 	bl	8007648 <sys_now>
 800eb72:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800eb74:	4b1a      	ldr	r3, [pc, #104]	; (800ebe0 <sys_check_timeouts+0x78>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <sys_check_timeouts+0x1a>
 800eb7e:	f7f9 ff29 	bl	80089d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800eb82:	4b18      	ldr	r3, [pc, #96]	; (800ebe4 <sys_check_timeouts+0x7c>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d022      	beq.n	800ebd4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	0fdb      	lsrs	r3, r3, #31
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d11a      	bne.n	800ebd8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a0f      	ldr	r2, [pc, #60]	; (800ebe4 <sys_check_timeouts+0x7c>)
 800eba8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	4a0b      	ldr	r2, [pc, #44]	; (800ebe8 <sys_check_timeouts+0x80>)
 800ebbc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ebbe:	68b9      	ldr	r1, [r7, #8]
 800ebc0:	2006      	movs	r0, #6
 800ebc2:	f7f9 fbcb 	bl	800835c <memp_free>
    if (handler != NULL) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d0d3      	beq.n	800eb74 <sys_check_timeouts+0xc>
      handler(arg);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6838      	ldr	r0, [r7, #0]
 800ebd0:	4798      	blx	r3
  do {
 800ebd2:	e7cf      	b.n	800eb74 <sys_check_timeouts+0xc>
      return;
 800ebd4:	bf00      	nop
 800ebd6:	e000      	b.n	800ebda <sys_check_timeouts+0x72>
      return;
 800ebd8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	24003408 	.word	0x24003408
 800ebe4:	24000124 	.word	0x24000124
 800ebe8:	24000128 	.word	0x24000128

0800ebec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ebf0:	f003 f8ae 	bl	8011d50 <rand>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	4b01      	ldr	r3, [pc, #4]	; (800ec0c <udp_init+0x20>)
 800ec06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ec08:	bf00      	nop
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	2400002c 	.word	0x2400002c

0800ec10 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ec1a:	4b17      	ldr	r3, [pc, #92]	; (800ec78 <udp_new_port+0x68>)
 800ec1c:	881b      	ldrh	r3, [r3, #0]
 800ec1e:	1c5a      	adds	r2, r3, #1
 800ec20:	b291      	uxth	r1, r2
 800ec22:	4a15      	ldr	r2, [pc, #84]	; (800ec78 <udp_new_port+0x68>)
 800ec24:	8011      	strh	r1, [r2, #0]
 800ec26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d103      	bne.n	800ec36 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ec2e:	4b12      	ldr	r3, [pc, #72]	; (800ec78 <udp_new_port+0x68>)
 800ec30:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ec34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec36:	4b11      	ldr	r3, [pc, #68]	; (800ec7c <udp_new_port+0x6c>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	e011      	b.n	800ec62 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	8a5a      	ldrh	r2, [r3, #18]
 800ec42:	4b0d      	ldr	r3, [pc, #52]	; (800ec78 <udp_new_port+0x68>)
 800ec44:	881b      	ldrh	r3, [r3, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d108      	bne.n	800ec5c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ec4a:	88fb      	ldrh	r3, [r7, #6]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	80fb      	strh	r3, [r7, #6]
 800ec50:	88fb      	ldrh	r3, [r7, #6]
 800ec52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec56:	d3e0      	bcc.n	800ec1a <udp_new_port+0xa>
        return 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e007      	b.n	800ec6c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	603b      	str	r3, [r7, #0]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1ea      	bne.n	800ec3e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ec68:	4b03      	ldr	r3, [pc, #12]	; (800ec78 <udp_new_port+0x68>)
 800ec6a:	881b      	ldrh	r3, [r3, #0]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	2400002c 	.word	0x2400002c
 800ec7c:	24003428 	.word	0x24003428

0800ec80 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d105      	bne.n	800eca0 <udp_input_local_match+0x20>
 800ec94:	4b27      	ldr	r3, [pc, #156]	; (800ed34 <udp_input_local_match+0xb4>)
 800ec96:	2287      	movs	r2, #135	; 0x87
 800ec98:	4927      	ldr	r1, [pc, #156]	; (800ed38 <udp_input_local_match+0xb8>)
 800ec9a:	4828      	ldr	r0, [pc, #160]	; (800ed3c <udp_input_local_match+0xbc>)
 800ec9c:	f003 f840 	bl	8011d20 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d105      	bne.n	800ecb2 <udp_input_local_match+0x32>
 800eca6:	4b23      	ldr	r3, [pc, #140]	; (800ed34 <udp_input_local_match+0xb4>)
 800eca8:	2288      	movs	r2, #136	; 0x88
 800ecaa:	4925      	ldr	r1, [pc, #148]	; (800ed40 <udp_input_local_match+0xc0>)
 800ecac:	4823      	ldr	r0, [pc, #140]	; (800ed3c <udp_input_local_match+0xbc>)
 800ecae:	f003 f837 	bl	8011d20 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	7a1b      	ldrb	r3, [r3, #8]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00b      	beq.n	800ecd2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	7a1a      	ldrb	r2, [r3, #8]
 800ecbe:	4b21      	ldr	r3, [pc, #132]	; (800ed44 <udp_input_local_match+0xc4>)
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d001      	beq.n	800ecd2 <udp_input_local_match+0x52>
    return 0;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e02b      	b.n	800ed2a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d018      	beq.n	800ed0a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d013      	beq.n	800ed06 <udp_input_local_match+0x86>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00f      	beq.n	800ed06 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ece6:	4b17      	ldr	r3, [pc, #92]	; (800ed44 <udp_input_local_match+0xc4>)
 800ece8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ecea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecee:	d00a      	beq.n	800ed06 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	4b13      	ldr	r3, [pc, #76]	; (800ed44 <udp_input_local_match+0xc4>)
 800ecf6:	695b      	ldr	r3, [r3, #20]
 800ecf8:	405a      	eors	r2, r3
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d110      	bne.n	800ed28 <udp_input_local_match+0xa8>
          return 1;
 800ed06:	2301      	movs	r3, #1
 800ed08:	e00f      	b.n	800ed2a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d009      	beq.n	800ed24 <udp_input_local_match+0xa4>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d005      	beq.n	800ed24 <udp_input_local_match+0xa4>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <udp_input_local_match+0xc4>)
 800ed1e:	695b      	ldr	r3, [r3, #20]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d101      	bne.n	800ed28 <udp_input_local_match+0xa8>
        return 1;
 800ed24:	2301      	movs	r3, #1
 800ed26:	e000      	b.n	800ed2a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ed28:	2300      	movs	r3, #0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	08014b48 	.word	0x08014b48
 800ed38:	08014b78 	.word	0x08014b78
 800ed3c:	08014b9c 	.word	0x08014b9c
 800ed40:	08014bc4 	.word	0x08014bc4
 800ed44:	24000520 	.word	0x24000520

0800ed48 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ed48:	b590      	push	{r4, r7, lr}
 800ed4a:	b08d      	sub	sp, #52	; 0x34
 800ed4c:	af02      	add	r7, sp, #8
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d105      	bne.n	800ed68 <udp_input+0x20>
 800ed5c:	4b7c      	ldr	r3, [pc, #496]	; (800ef50 <udp_input+0x208>)
 800ed5e:	22cf      	movs	r2, #207	; 0xcf
 800ed60:	497c      	ldr	r1, [pc, #496]	; (800ef54 <udp_input+0x20c>)
 800ed62:	487d      	ldr	r0, [pc, #500]	; (800ef58 <udp_input+0x210>)
 800ed64:	f002 ffdc 	bl	8011d20 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d105      	bne.n	800ed7a <udp_input+0x32>
 800ed6e:	4b78      	ldr	r3, [pc, #480]	; (800ef50 <udp_input+0x208>)
 800ed70:	22d0      	movs	r2, #208	; 0xd0
 800ed72:	497a      	ldr	r1, [pc, #488]	; (800ef5c <udp_input+0x214>)
 800ed74:	4878      	ldr	r0, [pc, #480]	; (800ef58 <udp_input+0x210>)
 800ed76:	f002 ffd3 	bl	8011d20 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	895b      	ldrh	r3, [r3, #10]
 800ed7e:	2b07      	cmp	r3, #7
 800ed80:	d803      	bhi.n	800ed8a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7fa f95c 	bl	8009040 <pbuf_free>
    goto end;
 800ed88:	e0de      	b.n	800ef48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ed90:	4b73      	ldr	r3, [pc, #460]	; (800ef60 <udp_input+0x218>)
 800ed92:	695a      	ldr	r2, [r3, #20]
 800ed94:	4b72      	ldr	r3, [pc, #456]	; (800ef60 <udp_input+0x218>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4619      	mov	r1, r3
 800ed9a:	4610      	mov	r0, r2
 800ed9c:	f002 f82e 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 800eda0:	4603      	mov	r3, r0
 800eda2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	881b      	ldrh	r3, [r3, #0]
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	4618      	mov	r0, r3
 800edac:	f7f8 fd26 	bl	80077fc <lwip_htons>
 800edb0:	4603      	mov	r3, r0
 800edb2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	885b      	ldrh	r3, [r3, #2]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f8 fd1e 	bl	80077fc <lwip_htons>
 800edc0:	4603      	mov	r3, r0
 800edc2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800edc8:	2300      	movs	r3, #0
 800edca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edd0:	4b64      	ldr	r3, [pc, #400]	; (800ef64 <udp_input+0x21c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	627b      	str	r3, [r7, #36]	; 0x24
 800edd6:	e054      	b.n	800ee82 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	8a5b      	ldrh	r3, [r3, #18]
 800eddc:	89fa      	ldrh	r2, [r7, #14]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d14a      	bne.n	800ee78 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ede2:	7cfb      	ldrb	r3, [r7, #19]
 800ede4:	461a      	mov	r2, r3
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edea:	f7ff ff49 	bl	800ec80 <udp_input_local_match>
 800edee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d041      	beq.n	800ee78 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	7c1b      	ldrb	r3, [r3, #16]
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d11d      	bne.n	800ee3c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d102      	bne.n	800ee0c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	61fb      	str	r3, [r7, #28]
 800ee0a:	e017      	b.n	800ee3c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ee0c:	7cfb      	ldrb	r3, [r7, #19]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d014      	beq.n	800ee3c <udp_input+0xf4>
 800ee12:	4b53      	ldr	r3, [pc, #332]	; (800ef60 <udp_input+0x218>)
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1a:	d10f      	bne.n	800ee3c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	3304      	adds	r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d008      	beq.n	800ee3c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	3304      	adds	r3, #4
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d101      	bne.n	800ee3c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3e:	8a9b      	ldrh	r3, [r3, #20]
 800ee40:	8a3a      	ldrh	r2, [r7, #16]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d118      	bne.n	800ee78 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ee46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee48:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d005      	beq.n	800ee5a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	685a      	ldr	r2, [r3, #4]
 800ee52:	4b43      	ldr	r3, [pc, #268]	; (800ef60 <udp_input+0x218>)
 800ee54:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d10e      	bne.n	800ee78 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d014      	beq.n	800ee8a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	68da      	ldr	r2, [r3, #12]
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ee68:	4b3e      	ldr	r3, [pc, #248]	; (800ef64 <udp_input+0x21c>)
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ee70:	4a3c      	ldr	r2, [pc, #240]	; (800ef64 <udp_input+0x21c>)
 800ee72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee74:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ee76:	e008      	b.n	800ee8a <udp_input+0x142>
      }
    }

    prev = pcb;
 800ee78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
 800ee82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1a7      	bne.n	800edd8 <udp_input+0x90>
 800ee88:	e000      	b.n	800ee8c <udp_input+0x144>
        break;
 800ee8a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <udp_input+0x15a>
    for_us = 1;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	76fb      	strb	r3, [r7, #27]
 800eea0:	e00a      	b.n	800eeb8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	3304      	adds	r3, #4
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	4b2d      	ldr	r3, [pc, #180]	; (800ef60 <udp_input+0x218>)
 800eeaa:	695b      	ldr	r3, [r3, #20]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	bf0c      	ite	eq
 800eeb0:	2301      	moveq	r3, #1
 800eeb2:	2300      	movne	r3, #0
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800eeb8:	7efb      	ldrb	r3, [r7, #27]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d041      	beq.n	800ef42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eebe:	2108      	movs	r1, #8
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7fa f837 	bl	8008f34 <pbuf_remove_header>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00a      	beq.n	800eee2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800eecc:	4b20      	ldr	r3, [pc, #128]	; (800ef50 <udp_input+0x208>)
 800eece:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800eed2:	4925      	ldr	r1, [pc, #148]	; (800ef68 <udp_input+0x220>)
 800eed4:	4820      	ldr	r0, [pc, #128]	; (800ef58 <udp_input+0x210>)
 800eed6:	f002 ff23 	bl	8011d20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7fa f8b0 	bl	8009040 <pbuf_free>
      goto end;
 800eee0:	e032      	b.n	800ef48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d012      	beq.n	800ef0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	699b      	ldr	r3, [r3, #24]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00a      	beq.n	800ef06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	699c      	ldr	r4, [r3, #24]
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	69d8      	ldr	r0, [r3, #28]
 800eef8:	8a3b      	ldrh	r3, [r7, #16]
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4b1b      	ldr	r3, [pc, #108]	; (800ef6c <udp_input+0x224>)
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ef04:	e021      	b.n	800ef4a <udp_input+0x202>
        pbuf_free(p);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7fa f89a 	bl	8009040 <pbuf_free>
        goto end;
 800ef0c:	e01c      	b.n	800ef48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ef0e:	7cfb      	ldrb	r3, [r7, #19]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d112      	bne.n	800ef3a <udp_input+0x1f2>
 800ef14:	4b12      	ldr	r3, [pc, #72]	; (800ef60 <udp_input+0x218>)
 800ef16:	695b      	ldr	r3, [r3, #20]
 800ef18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef1c:	2be0      	cmp	r3, #224	; 0xe0
 800ef1e:	d00c      	beq.n	800ef3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ef20:	4b0f      	ldr	r3, [pc, #60]	; (800ef60 <udp_input+0x218>)
 800ef22:	899b      	ldrh	r3, [r3, #12]
 800ef24:	3308      	adds	r3, #8
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	b21b      	sxth	r3, r3
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7fa f874 	bl	800901a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ef32:	2103      	movs	r1, #3
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f001 fc39 	bl	80107ac <icmp_dest_unreach>
      pbuf_free(p);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7fa f880 	bl	8009040 <pbuf_free>
  return;
 800ef40:	e003      	b.n	800ef4a <udp_input+0x202>
    pbuf_free(p);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7fa f87c 	bl	8009040 <pbuf_free>
  return;
 800ef48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ef4a:	372c      	adds	r7, #44	; 0x2c
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd90      	pop	{r4, r7, pc}
 800ef50:	08014b48 	.word	0x08014b48
 800ef54:	08014bec 	.word	0x08014bec
 800ef58:	08014b9c 	.word	0x08014b9c
 800ef5c:	08014c04 	.word	0x08014c04
 800ef60:	24000520 	.word	0x24000520
 800ef64:	24003428 	.word	0x24003428
 800ef68:	08014c20 	.word	0x08014c20
 800ef6c:	24000530 	.word	0x24000530

0800ef70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d109      	bne.n	800ef94 <udp_send+0x24>
 800ef80:	4b11      	ldr	r3, [pc, #68]	; (800efc8 <udp_send+0x58>)
 800ef82:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ef86:	4911      	ldr	r1, [pc, #68]	; (800efcc <udp_send+0x5c>)
 800ef88:	4811      	ldr	r0, [pc, #68]	; (800efd0 <udp_send+0x60>)
 800ef8a:	f002 fec9 	bl	8011d20 <iprintf>
 800ef8e:	f06f 030f 	mvn.w	r3, #15
 800ef92:	e015      	b.n	800efc0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d109      	bne.n	800efae <udp_send+0x3e>
 800ef9a:	4b0b      	ldr	r3, [pc, #44]	; (800efc8 <udp_send+0x58>)
 800ef9c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800efa0:	490c      	ldr	r1, [pc, #48]	; (800efd4 <udp_send+0x64>)
 800efa2:	480b      	ldr	r0, [pc, #44]	; (800efd0 <udp_send+0x60>)
 800efa4:	f002 febc 	bl	8011d20 <iprintf>
 800efa8:	f06f 030f 	mvn.w	r3, #15
 800efac:	e008      	b.n	800efc0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	1d1a      	adds	r2, r3, #4
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	8a9b      	ldrh	r3, [r3, #20]
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 f80d 	bl	800efd8 <udp_sendto>
 800efbe:	4603      	mov	r3, r0
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	08014b48 	.word	0x08014b48
 800efcc:	08014c3c 	.word	0x08014c3c
 800efd0:	08014b9c 	.word	0x08014b9c
 800efd4:	08014c54 	.word	0x08014c54

0800efd8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af02      	add	r7, sp, #8
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d109      	bne.n	800f000 <udp_sendto+0x28>
 800efec:	4b23      	ldr	r3, [pc, #140]	; (800f07c <udp_sendto+0xa4>)
 800efee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eff2:	4923      	ldr	r1, [pc, #140]	; (800f080 <udp_sendto+0xa8>)
 800eff4:	4823      	ldr	r0, [pc, #140]	; (800f084 <udp_sendto+0xac>)
 800eff6:	f002 fe93 	bl	8011d20 <iprintf>
 800effa:	f06f 030f 	mvn.w	r3, #15
 800effe:	e038      	b.n	800f072 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d109      	bne.n	800f01a <udp_sendto+0x42>
 800f006:	4b1d      	ldr	r3, [pc, #116]	; (800f07c <udp_sendto+0xa4>)
 800f008:	f240 2219 	movw	r2, #537	; 0x219
 800f00c:	491e      	ldr	r1, [pc, #120]	; (800f088 <udp_sendto+0xb0>)
 800f00e:	481d      	ldr	r0, [pc, #116]	; (800f084 <udp_sendto+0xac>)
 800f010:	f002 fe86 	bl	8011d20 <iprintf>
 800f014:	f06f 030f 	mvn.w	r3, #15
 800f018:	e02b      	b.n	800f072 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d109      	bne.n	800f034 <udp_sendto+0x5c>
 800f020:	4b16      	ldr	r3, [pc, #88]	; (800f07c <udp_sendto+0xa4>)
 800f022:	f240 221a 	movw	r2, #538	; 0x21a
 800f026:	4919      	ldr	r1, [pc, #100]	; (800f08c <udp_sendto+0xb4>)
 800f028:	4816      	ldr	r0, [pc, #88]	; (800f084 <udp_sendto+0xac>)
 800f02a:	f002 fe79 	bl	8011d20 <iprintf>
 800f02e:	f06f 030f 	mvn.w	r3, #15
 800f032:	e01e      	b.n	800f072 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	7a1b      	ldrb	r3, [r3, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d006      	beq.n	800f04a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	7a1b      	ldrb	r3, [r3, #8]
 800f040:	4618      	mov	r0, r3
 800f042:	f7f9 fca1 	bl	8008988 <netif_get_by_index>
 800f046:	6178      	str	r0, [r7, #20]
 800f048:	e003      	b.n	800f052 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f001 fc42 	bl	80108d4 <ip4_route>
 800f050:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d102      	bne.n	800f05e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f058:	f06f 0303 	mvn.w	r3, #3
 800f05c:	e009      	b.n	800f072 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f05e:	887a      	ldrh	r2, [r7, #2]
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	4613      	mov	r3, r2
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	68b9      	ldr	r1, [r7, #8]
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	f000 f810 	bl	800f090 <udp_sendto_if>
 800f070:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f072:	4618      	mov	r0, r3
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	08014b48 	.word	0x08014b48
 800f080:	08014c6c 	.word	0x08014c6c
 800f084:	08014b9c 	.word	0x08014b9c
 800f088:	08014c84 	.word	0x08014c84
 800f08c:	08014ca0 	.word	0x08014ca0

0800f090 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b088      	sub	sp, #32
 800f094:	af02      	add	r7, sp, #8
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d109      	bne.n	800f0b8 <udp_sendto_if+0x28>
 800f0a4:	4b2e      	ldr	r3, [pc, #184]	; (800f160 <udp_sendto_if+0xd0>)
 800f0a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0aa:	492e      	ldr	r1, [pc, #184]	; (800f164 <udp_sendto_if+0xd4>)
 800f0ac:	482e      	ldr	r0, [pc, #184]	; (800f168 <udp_sendto_if+0xd8>)
 800f0ae:	f002 fe37 	bl	8011d20 <iprintf>
 800f0b2:	f06f 030f 	mvn.w	r3, #15
 800f0b6:	e04f      	b.n	800f158 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d109      	bne.n	800f0d2 <udp_sendto_if+0x42>
 800f0be:	4b28      	ldr	r3, [pc, #160]	; (800f160 <udp_sendto_if+0xd0>)
 800f0c0:	f240 2281 	movw	r2, #641	; 0x281
 800f0c4:	4929      	ldr	r1, [pc, #164]	; (800f16c <udp_sendto_if+0xdc>)
 800f0c6:	4828      	ldr	r0, [pc, #160]	; (800f168 <udp_sendto_if+0xd8>)
 800f0c8:	f002 fe2a 	bl	8011d20 <iprintf>
 800f0cc:	f06f 030f 	mvn.w	r3, #15
 800f0d0:	e042      	b.n	800f158 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <udp_sendto_if+0x5c>
 800f0d8:	4b21      	ldr	r3, [pc, #132]	; (800f160 <udp_sendto_if+0xd0>)
 800f0da:	f240 2282 	movw	r2, #642	; 0x282
 800f0de:	4924      	ldr	r1, [pc, #144]	; (800f170 <udp_sendto_if+0xe0>)
 800f0e0:	4821      	ldr	r0, [pc, #132]	; (800f168 <udp_sendto_if+0xd8>)
 800f0e2:	f002 fe1d 	bl	8011d20 <iprintf>
 800f0e6:	f06f 030f 	mvn.w	r3, #15
 800f0ea:	e035      	b.n	800f158 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f0ec:	6a3b      	ldr	r3, [r7, #32]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d109      	bne.n	800f106 <udp_sendto_if+0x76>
 800f0f2:	4b1b      	ldr	r3, [pc, #108]	; (800f160 <udp_sendto_if+0xd0>)
 800f0f4:	f240 2283 	movw	r2, #643	; 0x283
 800f0f8:	491e      	ldr	r1, [pc, #120]	; (800f174 <udp_sendto_if+0xe4>)
 800f0fa:	481b      	ldr	r0, [pc, #108]	; (800f168 <udp_sendto_if+0xd8>)
 800f0fc:	f002 fe10 	bl	8011d20 <iprintf>
 800f100:	f06f 030f 	mvn.w	r3, #15
 800f104:	e028      	b.n	800f158 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d009      	beq.n	800f120 <udp_sendto_if+0x90>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d005      	beq.n	800f120 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f11c:	2be0      	cmp	r3, #224	; 0xe0
 800f11e:	d103      	bne.n	800f128 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f120:	6a3b      	ldr	r3, [r7, #32]
 800f122:	3304      	adds	r3, #4
 800f124:	617b      	str	r3, [r7, #20]
 800f126:	e00b      	b.n	800f140 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	3304      	adds	r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	429a      	cmp	r2, r3
 800f134:	d002      	beq.n	800f13c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f136:	f06f 0303 	mvn.w	r3, #3
 800f13a:	e00d      	b.n	800f158 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f140:	887a      	ldrh	r2, [r7, #2]
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	9300      	str	r3, [sp, #0]
 800f14a:	4613      	mov	r3, r2
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	68b9      	ldr	r1, [r7, #8]
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f000 f811 	bl	800f178 <udp_sendto_if_src>
 800f156:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3718      	adds	r7, #24
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	08014b48 	.word	0x08014b48
 800f164:	08014cbc 	.word	0x08014cbc
 800f168:	08014b9c 	.word	0x08014b9c
 800f16c:	08014cd8 	.word	0x08014cd8
 800f170:	08014cf4 	.word	0x08014cf4
 800f174:	08014d14 	.word	0x08014d14

0800f178 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08c      	sub	sp, #48	; 0x30
 800f17c:	af04      	add	r7, sp, #16
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d109      	bne.n	800f1a0 <udp_sendto_if_src+0x28>
 800f18c:	4b65      	ldr	r3, [pc, #404]	; (800f324 <udp_sendto_if_src+0x1ac>)
 800f18e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f192:	4965      	ldr	r1, [pc, #404]	; (800f328 <udp_sendto_if_src+0x1b0>)
 800f194:	4865      	ldr	r0, [pc, #404]	; (800f32c <udp_sendto_if_src+0x1b4>)
 800f196:	f002 fdc3 	bl	8011d20 <iprintf>
 800f19a:	f06f 030f 	mvn.w	r3, #15
 800f19e:	e0bc      	b.n	800f31a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d109      	bne.n	800f1ba <udp_sendto_if_src+0x42>
 800f1a6:	4b5f      	ldr	r3, [pc, #380]	; (800f324 <udp_sendto_if_src+0x1ac>)
 800f1a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f1ac:	4960      	ldr	r1, [pc, #384]	; (800f330 <udp_sendto_if_src+0x1b8>)
 800f1ae:	485f      	ldr	r0, [pc, #380]	; (800f32c <udp_sendto_if_src+0x1b4>)
 800f1b0:	f002 fdb6 	bl	8011d20 <iprintf>
 800f1b4:	f06f 030f 	mvn.w	r3, #15
 800f1b8:	e0af      	b.n	800f31a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d109      	bne.n	800f1d4 <udp_sendto_if_src+0x5c>
 800f1c0:	4b58      	ldr	r3, [pc, #352]	; (800f324 <udp_sendto_if_src+0x1ac>)
 800f1c2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f1c6:	495b      	ldr	r1, [pc, #364]	; (800f334 <udp_sendto_if_src+0x1bc>)
 800f1c8:	4858      	ldr	r0, [pc, #352]	; (800f32c <udp_sendto_if_src+0x1b4>)
 800f1ca:	f002 fda9 	bl	8011d20 <iprintf>
 800f1ce:	f06f 030f 	mvn.w	r3, #15
 800f1d2:	e0a2      	b.n	800f31a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d109      	bne.n	800f1ee <udp_sendto_if_src+0x76>
 800f1da:	4b52      	ldr	r3, [pc, #328]	; (800f324 <udp_sendto_if_src+0x1ac>)
 800f1dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f1e0:	4955      	ldr	r1, [pc, #340]	; (800f338 <udp_sendto_if_src+0x1c0>)
 800f1e2:	4852      	ldr	r0, [pc, #328]	; (800f32c <udp_sendto_if_src+0x1b4>)
 800f1e4:	f002 fd9c 	bl	8011d20 <iprintf>
 800f1e8:	f06f 030f 	mvn.w	r3, #15
 800f1ec:	e095      	b.n	800f31a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d109      	bne.n	800f208 <udp_sendto_if_src+0x90>
 800f1f4:	4b4b      	ldr	r3, [pc, #300]	; (800f324 <udp_sendto_if_src+0x1ac>)
 800f1f6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f1fa:	4950      	ldr	r1, [pc, #320]	; (800f33c <udp_sendto_if_src+0x1c4>)
 800f1fc:	484b      	ldr	r0, [pc, #300]	; (800f32c <udp_sendto_if_src+0x1b4>)
 800f1fe:	f002 fd8f 	bl	8011d20 <iprintf>
 800f202:	f06f 030f 	mvn.w	r3, #15
 800f206:	e088      	b.n	800f31a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	8a5b      	ldrh	r3, [r3, #18]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10f      	bne.n	800f230 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f210:	68f9      	ldr	r1, [r7, #12]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	8a5b      	ldrh	r3, [r3, #18]
 800f216:	461a      	mov	r2, r3
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f000 f893 	bl	800f344 <udp_bind>
 800f21e:	4603      	mov	r3, r0
 800f220:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f222:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d002      	beq.n	800f230 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f22a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f22e:	e074      	b.n	800f31a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	891b      	ldrh	r3, [r3, #8]
 800f234:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f238:	4293      	cmp	r3, r2
 800f23a:	d902      	bls.n	800f242 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	e06b      	b.n	800f31a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f242:	2108      	movs	r1, #8
 800f244:	68b8      	ldr	r0, [r7, #8]
 800f246:	f7f9 fe65 	bl	8008f14 <pbuf_add_header>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d015      	beq.n	800f27c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f250:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f254:	2108      	movs	r1, #8
 800f256:	20a4      	movs	r0, #164	; 0xa4
 800f258:	f7f9 fc12 	bl	8008a80 <pbuf_alloc>
 800f25c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	e057      	b.n	800f31a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	891b      	ldrh	r3, [r3, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d006      	beq.n	800f280 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f272:	68b9      	ldr	r1, [r7, #8]
 800f274:	69f8      	ldr	r0, [r7, #28]
 800f276:	f7f9 fffb 	bl	8009270 <pbuf_chain>
 800f27a:	e001      	b.n	800f280 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	895b      	ldrh	r3, [r3, #10]
 800f284:	2b07      	cmp	r3, #7
 800f286:	d806      	bhi.n	800f296 <udp_sendto_if_src+0x11e>
 800f288:	4b26      	ldr	r3, [pc, #152]	; (800f324 <udp_sendto_if_src+0x1ac>)
 800f28a:	f240 320e 	movw	r2, #782	; 0x30e
 800f28e:	492c      	ldr	r1, [pc, #176]	; (800f340 <udp_sendto_if_src+0x1c8>)
 800f290:	4826      	ldr	r0, [pc, #152]	; (800f32c <udp_sendto_if_src+0x1b4>)
 800f292:	f002 fd45 	bl	8011d20 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	8a5b      	ldrh	r3, [r3, #18]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7f8 faab 	bl	80077fc <lwip_htons>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f2ae:	887b      	ldrh	r3, [r7, #2]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7f8 faa3 	bl	80077fc <lwip_htons>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	719a      	strb	r2, [r3, #6]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	891b      	ldrh	r3, [r3, #8]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f8 fa95 	bl	80077fc <lwip_htons>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f2da:	2311      	movs	r3, #17
 800f2dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	7adb      	ldrb	r3, [r3, #11]
 800f2e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	7a9b      	ldrb	r3, [r3, #10]
 800f2e8:	7cb9      	ldrb	r1, [r7, #18]
 800f2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2ec:	9202      	str	r2, [sp, #8]
 800f2ee:	7cfa      	ldrb	r2, [r7, #19]
 800f2f0:	9201      	str	r2, [sp, #4]
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2fa:	69f8      	ldr	r0, [r7, #28]
 800f2fc:	f001 fcd0 	bl	8010ca0 <ip4_output_if_src>
 800f300:	4603      	mov	r3, r0
 800f302:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f304:	69fa      	ldr	r2, [r7, #28]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d004      	beq.n	800f316 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f30c:	69f8      	ldr	r0, [r7, #28]
 800f30e:	f7f9 fe97 	bl	8009040 <pbuf_free>
    q = NULL;
 800f312:	2300      	movs	r3, #0
 800f314:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f316:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	08014b48 	.word	0x08014b48
 800f328:	08014d34 	.word	0x08014d34
 800f32c:	08014b9c 	.word	0x08014b9c
 800f330:	08014d54 	.word	0x08014d54
 800f334:	08014d74 	.word	0x08014d74
 800f338:	08014d98 	.word	0x08014d98
 800f33c:	08014dbc 	.word	0x08014dbc
 800f340:	08014de0 	.word	0x08014de0

0800f344 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b086      	sub	sp, #24
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	4613      	mov	r3, r2
 800f350:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f358:	4b39      	ldr	r3, [pc, #228]	; (800f440 <udp_bind+0xfc>)
 800f35a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d109      	bne.n	800f376 <udp_bind+0x32>
 800f362:	4b38      	ldr	r3, [pc, #224]	; (800f444 <udp_bind+0x100>)
 800f364:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f368:	4937      	ldr	r1, [pc, #220]	; (800f448 <udp_bind+0x104>)
 800f36a:	4838      	ldr	r0, [pc, #224]	; (800f44c <udp_bind+0x108>)
 800f36c:	f002 fcd8 	bl	8011d20 <iprintf>
 800f370:	f06f 030f 	mvn.w	r3, #15
 800f374:	e060      	b.n	800f438 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f37a:	4b35      	ldr	r3, [pc, #212]	; (800f450 <udp_bind+0x10c>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	617b      	str	r3, [r7, #20]
 800f380:	e009      	b.n	800f396 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	429a      	cmp	r2, r3
 800f388:	d102      	bne.n	800f390 <udp_bind+0x4c>
      rebind = 1;
 800f38a:	2301      	movs	r3, #1
 800f38c:	74fb      	strb	r3, [r7, #19]
      break;
 800f38e:	e005      	b.n	800f39c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	617b      	str	r3, [r7, #20]
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1f2      	bne.n	800f382 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f39c:	88fb      	ldrh	r3, [r7, #6]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d109      	bne.n	800f3b6 <udp_bind+0x72>
    port = udp_new_port();
 800f3a2:	f7ff fc35 	bl	800ec10 <udp_new_port>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f3aa:	88fb      	ldrh	r3, [r7, #6]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d12c      	bne.n	800f40a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f3b0:	f06f 0307 	mvn.w	r3, #7
 800f3b4:	e040      	b.n	800f438 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f3b6:	4b26      	ldr	r3, [pc, #152]	; (800f450 <udp_bind+0x10c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	617b      	str	r3, [r7, #20]
 800f3bc:	e022      	b.n	800f404 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d01b      	beq.n	800f3fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	8a5b      	ldrh	r3, [r3, #18]
 800f3ca:	88fa      	ldrh	r2, [r7, #6]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d116      	bne.n	800f3fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d00d      	beq.n	800f3f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00a      	beq.n	800f3f8 <udp_bind+0xb4>
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d006      	beq.n	800f3f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f3ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d003      	beq.n	800f3f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d102      	bne.n	800f3fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f3f8:	f06f 0307 	mvn.w	r3, #7
 800f3fc:	e01c      	b.n	800f438 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	617b      	str	r3, [r7, #20]
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1d9      	bne.n	800f3be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <udp_bind+0xd2>
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	e000      	b.n	800f418 <udp_bind+0xd4>
 800f416:	2300      	movs	r3, #0
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	88fa      	ldrh	r2, [r7, #6]
 800f420:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f422:	7cfb      	ldrb	r3, [r7, #19]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f428:	4b09      	ldr	r3, [pc, #36]	; (800f450 <udp_bind+0x10c>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f430:	4a07      	ldr	r2, [pc, #28]	; (800f450 <udp_bind+0x10c>)
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	08015674 	.word	0x08015674
 800f444:	08014b48 	.word	0x08014b48
 800f448:	08014e10 	.word	0x08014e10
 800f44c:	08014b9c 	.word	0x08014b9c
 800f450:	24003428 	.word	0x24003428

0800f454 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	4613      	mov	r3, r2
 800f460:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d109      	bne.n	800f47c <udp_connect+0x28>
 800f468:	4b2c      	ldr	r3, [pc, #176]	; (800f51c <udp_connect+0xc8>)
 800f46a:	f240 4235 	movw	r2, #1077	; 0x435
 800f46e:	492c      	ldr	r1, [pc, #176]	; (800f520 <udp_connect+0xcc>)
 800f470:	482c      	ldr	r0, [pc, #176]	; (800f524 <udp_connect+0xd0>)
 800f472:	f002 fc55 	bl	8011d20 <iprintf>
 800f476:	f06f 030f 	mvn.w	r3, #15
 800f47a:	e04b      	b.n	800f514 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d109      	bne.n	800f496 <udp_connect+0x42>
 800f482:	4b26      	ldr	r3, [pc, #152]	; (800f51c <udp_connect+0xc8>)
 800f484:	f240 4236 	movw	r2, #1078	; 0x436
 800f488:	4927      	ldr	r1, [pc, #156]	; (800f528 <udp_connect+0xd4>)
 800f48a:	4826      	ldr	r0, [pc, #152]	; (800f524 <udp_connect+0xd0>)
 800f48c:	f002 fc48 	bl	8011d20 <iprintf>
 800f490:	f06f 030f 	mvn.w	r3, #15
 800f494:	e03e      	b.n	800f514 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	8a5b      	ldrh	r3, [r3, #18]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10f      	bne.n	800f4be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f49e:	68f9      	ldr	r1, [r7, #12]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	8a5b      	ldrh	r3, [r3, #18]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	68f8      	ldr	r0, [r7, #12]
 800f4a8:	f7ff ff4c 	bl	800f344 <udp_bind>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f4b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d002      	beq.n	800f4be <udp_connect+0x6a>
      return err;
 800f4b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4bc:	e02a      	b.n	800f514 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <udp_connect+0x76>
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	e000      	b.n	800f4cc <udp_connect+0x78>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	88fa      	ldrh	r2, [r7, #6]
 800f4d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	7c1b      	ldrb	r3, [r3, #16]
 800f4da:	f043 0304 	orr.w	r3, r3, #4
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4e4:	4b11      	ldr	r3, [pc, #68]	; (800f52c <udp_connect+0xd8>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	617b      	str	r3, [r7, #20]
 800f4ea:	e008      	b.n	800f4fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d101      	bne.n	800f4f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e00d      	b.n	800f514 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	617b      	str	r3, [r7, #20]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1f3      	bne.n	800f4ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f504:	4b09      	ldr	r3, [pc, #36]	; (800f52c <udp_connect+0xd8>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f50c:	4a07      	ldr	r2, [pc, #28]	; (800f52c <udp_connect+0xd8>)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3718      	adds	r7, #24
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	08014b48 	.word	0x08014b48
 800f520:	08014e28 	.word	0x08014e28
 800f524:	08014b9c 	.word	0x08014b9c
 800f528:	08014e44 	.word	0x08014e44
 800f52c:	24003428 	.word	0x24003428

0800f530 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d107      	bne.n	800f54e <udp_disconnect+0x1e>
 800f53e:	4b0d      	ldr	r3, [pc, #52]	; (800f574 <udp_disconnect+0x44>)
 800f540:	f240 426a 	movw	r2, #1130	; 0x46a
 800f544:	490c      	ldr	r1, [pc, #48]	; (800f578 <udp_disconnect+0x48>)
 800f546:	480d      	ldr	r0, [pc, #52]	; (800f57c <udp_disconnect+0x4c>)
 800f548:	f002 fbea 	bl	8011d20 <iprintf>
 800f54c:	e00f      	b.n	800f56e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	7c1b      	ldrb	r3, [r3, #16]
 800f564:	f023 0304 	bic.w	r3, r3, #4
 800f568:	b2da      	uxtb	r2, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	741a      	strb	r2, [r3, #16]
}
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	08014b48 	.word	0x08014b48
 800f578:	08014e60 	.word	0x08014e60
 800f57c:	08014b9c 	.word	0x08014b9c

0800f580 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d107      	bne.n	800f5a2 <udp_recv+0x22>
 800f592:	4b08      	ldr	r3, [pc, #32]	; (800f5b4 <udp_recv+0x34>)
 800f594:	f240 428a 	movw	r2, #1162	; 0x48a
 800f598:	4907      	ldr	r1, [pc, #28]	; (800f5b8 <udp_recv+0x38>)
 800f59a:	4808      	ldr	r0, [pc, #32]	; (800f5bc <udp_recv+0x3c>)
 800f59c:	f002 fbc0 	bl	8011d20 <iprintf>
 800f5a0:	e005      	b.n	800f5ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	61da      	str	r2, [r3, #28]
}
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	08014b48 	.word	0x08014b48
 800f5b8:	08014e7c 	.word	0x08014e7c
 800f5bc:	08014b9c 	.word	0x08014b9c

0800f5c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d107      	bne.n	800f5de <udp_remove+0x1e>
 800f5ce:	4b19      	ldr	r3, [pc, #100]	; (800f634 <udp_remove+0x74>)
 800f5d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f5d4:	4918      	ldr	r1, [pc, #96]	; (800f638 <udp_remove+0x78>)
 800f5d6:	4819      	ldr	r0, [pc, #100]	; (800f63c <udp_remove+0x7c>)
 800f5d8:	f002 fba2 	bl	8011d20 <iprintf>
 800f5dc:	e026      	b.n	800f62c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f5de:	4b18      	ldr	r3, [pc, #96]	; (800f640 <udp_remove+0x80>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d105      	bne.n	800f5f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f5e8:	4b15      	ldr	r3, [pc, #84]	; (800f640 <udp_remove+0x80>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	4a14      	ldr	r2, [pc, #80]	; (800f640 <udp_remove+0x80>)
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e017      	b.n	800f624 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f5f4:	4b12      	ldr	r3, [pc, #72]	; (800f640 <udp_remove+0x80>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	e010      	b.n	800f61e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d009      	beq.n	800f618 <udp_remove+0x58>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d104      	bne.n	800f618 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68da      	ldr	r2, [r3, #12]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	60da      	str	r2, [r3, #12]
        break;
 800f616:	e005      	b.n	800f624 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	60fb      	str	r3, [r7, #12]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1eb      	bne.n	800f5fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	2000      	movs	r0, #0
 800f628:	f7f8 fe98 	bl	800835c <memp_free>
}
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	08014b48 	.word	0x08014b48
 800f638:	08014e94 	.word	0x08014e94
 800f63c:	08014b9c 	.word	0x08014b9c
 800f640:	24003428 	.word	0x24003428

0800f644 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f64a:	2000      	movs	r0, #0
 800f64c:	f7f8 fe16 	bl	800827c <memp_malloc>
 800f650:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d007      	beq.n	800f668 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f658:	2220      	movs	r2, #32
 800f65a:	2100      	movs	r1, #0
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f002 fb57 	bl	8011d10 <memset>
    pcb->ttl = UDP_TTL;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	22ff      	movs	r2, #255	; 0xff
 800f666:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f668:	687b      	ldr	r3, [r7, #4]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
	...

0800f674 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f674:	b480      	push	{r7}
 800f676:	b085      	sub	sp, #20
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d01e      	beq.n	800f6c2 <udp_netif_ip_addr_changed+0x4e>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01a      	beq.n	800f6c2 <udp_netif_ip_addr_changed+0x4e>
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d017      	beq.n	800f6c2 <udp_netif_ip_addr_changed+0x4e>
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d013      	beq.n	800f6c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f69a:	4b0d      	ldr	r3, [pc, #52]	; (800f6d0 <udp_netif_ip_addr_changed+0x5c>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	60fb      	str	r3, [r7, #12]
 800f6a0:	e00c      	b.n	800f6bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d103      	bne.n	800f6b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	60fb      	str	r3, [r7, #12]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1ef      	bne.n	800f6a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f6c2:	bf00      	nop
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	24003428 	.word	0x24003428

0800f6d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f6dc:	4915      	ldr	r1, [pc, #84]	; (800f734 <etharp_free_entry+0x60>)
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	005b      	lsls	r3, r3, #1
 800f6e4:	4413      	add	r3, r2
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	440b      	add	r3, r1
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d013      	beq.n	800f718 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f6f0:	4910      	ldr	r1, [pc, #64]	; (800f734 <etharp_free_entry+0x60>)
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	4413      	add	r3, r2
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	440b      	add	r3, r1
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4618      	mov	r0, r3
 800f702:	f7f9 fc9d 	bl	8009040 <pbuf_free>
    arp_table[i].q = NULL;
 800f706:	490b      	ldr	r1, [pc, #44]	; (800f734 <etharp_free_entry+0x60>)
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	4613      	mov	r3, r2
 800f70c:	005b      	lsls	r3, r3, #1
 800f70e:	4413      	add	r3, r2
 800f710:	00db      	lsls	r3, r3, #3
 800f712:	440b      	add	r3, r1
 800f714:	2200      	movs	r2, #0
 800f716:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f718:	4906      	ldr	r1, [pc, #24]	; (800f734 <etharp_free_entry+0x60>)
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	4613      	mov	r3, r2
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	4413      	add	r3, r2
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	440b      	add	r3, r1
 800f726:	3314      	adds	r3, #20
 800f728:	2200      	movs	r2, #0
 800f72a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	24000130 	.word	0x24000130

0800f738 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f73e:	2300      	movs	r3, #0
 800f740:	607b      	str	r3, [r7, #4]
 800f742:	e096      	b.n	800f872 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f744:	494f      	ldr	r1, [pc, #316]	; (800f884 <etharp_tmr+0x14c>)
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	4613      	mov	r3, r2
 800f74a:	005b      	lsls	r3, r3, #1
 800f74c:	4413      	add	r3, r2
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	440b      	add	r3, r1
 800f752:	3314      	adds	r3, #20
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f758:	78fb      	ldrb	r3, [r7, #3]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f000 8086 	beq.w	800f86c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f760:	4948      	ldr	r1, [pc, #288]	; (800f884 <etharp_tmr+0x14c>)
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	4613      	mov	r3, r2
 800f766:	005b      	lsls	r3, r3, #1
 800f768:	4413      	add	r3, r2
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	440b      	add	r3, r1
 800f76e:	3312      	adds	r3, #18
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	b298      	uxth	r0, r3
 800f776:	4943      	ldr	r1, [pc, #268]	; (800f884 <etharp_tmr+0x14c>)
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	4613      	mov	r3, r2
 800f77c:	005b      	lsls	r3, r3, #1
 800f77e:	4413      	add	r3, r2
 800f780:	00db      	lsls	r3, r3, #3
 800f782:	440b      	add	r3, r1
 800f784:	3312      	adds	r3, #18
 800f786:	4602      	mov	r2, r0
 800f788:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f78a:	493e      	ldr	r1, [pc, #248]	; (800f884 <etharp_tmr+0x14c>)
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	4613      	mov	r3, r2
 800f790:	005b      	lsls	r3, r3, #1
 800f792:	4413      	add	r3, r2
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	440b      	add	r3, r1
 800f798:	3312      	adds	r3, #18
 800f79a:	881b      	ldrh	r3, [r3, #0]
 800f79c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f7a0:	d215      	bcs.n	800f7ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f7a2:	4938      	ldr	r1, [pc, #224]	; (800f884 <etharp_tmr+0x14c>)
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	4413      	add	r3, r2
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	440b      	add	r3, r1
 800f7b0:	3314      	adds	r3, #20
 800f7b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d10e      	bne.n	800f7d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f7b8:	4932      	ldr	r1, [pc, #200]	; (800f884 <etharp_tmr+0x14c>)
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	4613      	mov	r3, r2
 800f7be:	005b      	lsls	r3, r3, #1
 800f7c0:	4413      	add	r3, r2
 800f7c2:	00db      	lsls	r3, r3, #3
 800f7c4:	440b      	add	r3, r1
 800f7c6:	3312      	adds	r3, #18
 800f7c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f7ca:	2b04      	cmp	r3, #4
 800f7cc:	d903      	bls.n	800f7d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f7ff ff80 	bl	800f6d4 <etharp_free_entry>
 800f7d4:	e04a      	b.n	800f86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f7d6:	492b      	ldr	r1, [pc, #172]	; (800f884 <etharp_tmr+0x14c>)
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	005b      	lsls	r3, r3, #1
 800f7de:	4413      	add	r3, r2
 800f7e0:	00db      	lsls	r3, r3, #3
 800f7e2:	440b      	add	r3, r1
 800f7e4:	3314      	adds	r3, #20
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d10a      	bne.n	800f802 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f7ec:	4925      	ldr	r1, [pc, #148]	; (800f884 <etharp_tmr+0x14c>)
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	4413      	add	r3, r2
 800f7f6:	00db      	lsls	r3, r3, #3
 800f7f8:	440b      	add	r3, r1
 800f7fa:	3314      	adds	r3, #20
 800f7fc:	2204      	movs	r2, #4
 800f7fe:	701a      	strb	r2, [r3, #0]
 800f800:	e034      	b.n	800f86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f802:	4920      	ldr	r1, [pc, #128]	; (800f884 <etharp_tmr+0x14c>)
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	4613      	mov	r3, r2
 800f808:	005b      	lsls	r3, r3, #1
 800f80a:	4413      	add	r3, r2
 800f80c:	00db      	lsls	r3, r3, #3
 800f80e:	440b      	add	r3, r1
 800f810:	3314      	adds	r3, #20
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	2b04      	cmp	r3, #4
 800f816:	d10a      	bne.n	800f82e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f818:	491a      	ldr	r1, [pc, #104]	; (800f884 <etharp_tmr+0x14c>)
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	4613      	mov	r3, r2
 800f81e:	005b      	lsls	r3, r3, #1
 800f820:	4413      	add	r3, r2
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	440b      	add	r3, r1
 800f826:	3314      	adds	r3, #20
 800f828:	2202      	movs	r2, #2
 800f82a:	701a      	strb	r2, [r3, #0]
 800f82c:	e01e      	b.n	800f86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f82e:	4915      	ldr	r1, [pc, #84]	; (800f884 <etharp_tmr+0x14c>)
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	4613      	mov	r3, r2
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	4413      	add	r3, r2
 800f838:	00db      	lsls	r3, r3, #3
 800f83a:	440b      	add	r3, r1
 800f83c:	3314      	adds	r3, #20
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	2b01      	cmp	r3, #1
 800f842:	d113      	bne.n	800f86c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f844:	490f      	ldr	r1, [pc, #60]	; (800f884 <etharp_tmr+0x14c>)
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	4613      	mov	r3, r2
 800f84a:	005b      	lsls	r3, r3, #1
 800f84c:	4413      	add	r3, r2
 800f84e:	00db      	lsls	r3, r3, #3
 800f850:	440b      	add	r3, r1
 800f852:	3308      	adds	r3, #8
 800f854:	6818      	ldr	r0, [r3, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	4613      	mov	r3, r2
 800f85a:	005b      	lsls	r3, r3, #1
 800f85c:	4413      	add	r3, r2
 800f85e:	00db      	lsls	r3, r3, #3
 800f860:	4a08      	ldr	r2, [pc, #32]	; (800f884 <etharp_tmr+0x14c>)
 800f862:	4413      	add	r3, r2
 800f864:	3304      	adds	r3, #4
 800f866:	4619      	mov	r1, r3
 800f868:	f000 fe6e 	bl	8010548 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	3301      	adds	r3, #1
 800f870:	607b      	str	r3, [r7, #4]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b09      	cmp	r3, #9
 800f876:	f77f af65 	ble.w	800f744 <etharp_tmr+0xc>
      }
    }
  }
}
 800f87a:	bf00      	nop
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	24000130 	.word	0x24000130

0800f888 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08a      	sub	sp, #40	; 0x28
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	460b      	mov	r3, r1
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f896:	230a      	movs	r3, #10
 800f898:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f89a:	230a      	movs	r3, #10
 800f89c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f89e:	230a      	movs	r3, #10
 800f8a0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f8a6:	230a      	movs	r3, #10
 800f8a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	83bb      	strh	r3, [r7, #28]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	837b      	strh	r3, [r7, #26]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	843b      	strh	r3, [r7, #32]
 800f8ba:	e0ae      	b.n	800fa1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f8bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f8c0:	49a6      	ldr	r1, [pc, #664]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	005b      	lsls	r3, r3, #1
 800f8c6:	4413      	add	r3, r2
 800f8c8:	00db      	lsls	r3, r3, #3
 800f8ca:	440b      	add	r3, r1
 800f8cc:	3314      	adds	r3, #20
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f8d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f8d6:	2b0a      	cmp	r3, #10
 800f8d8:	d105      	bne.n	800f8e6 <etharp_find_entry+0x5e>
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f8e0:	8c3b      	ldrh	r3, [r7, #32]
 800f8e2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f8e4:	e095      	b.n	800fa12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f8e6:	7dfb      	ldrb	r3, [r7, #23]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 8092 	beq.w	800fa12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d009      	beq.n	800f908 <etharp_find_entry+0x80>
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d806      	bhi.n	800f908 <etharp_find_entry+0x80>
 800f8fa:	4b99      	ldr	r3, [pc, #612]	; (800fb60 <etharp_find_entry+0x2d8>)
 800f8fc:	f44f 7292 	mov.w	r2, #292	; 0x124
 800f900:	4998      	ldr	r1, [pc, #608]	; (800fb64 <etharp_find_entry+0x2dc>)
 800f902:	4899      	ldr	r0, [pc, #612]	; (800fb68 <etharp_find_entry+0x2e0>)
 800f904:	f002 fa0c 	bl	8011d20 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d020      	beq.n	800f950 <etharp_find_entry+0xc8>
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6819      	ldr	r1, [r3, #0]
 800f912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f916:	4891      	ldr	r0, [pc, #580]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f918:	4613      	mov	r3, r2
 800f91a:	005b      	lsls	r3, r3, #1
 800f91c:	4413      	add	r3, r2
 800f91e:	00db      	lsls	r3, r3, #3
 800f920:	4403      	add	r3, r0
 800f922:	3304      	adds	r3, #4
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4299      	cmp	r1, r3
 800f928:	d112      	bne.n	800f950 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d00c      	beq.n	800f94a <etharp_find_entry+0xc2>
 800f930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f934:	4989      	ldr	r1, [pc, #548]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f936:	4613      	mov	r3, r2
 800f938:	005b      	lsls	r3, r3, #1
 800f93a:	4413      	add	r3, r2
 800f93c:	00db      	lsls	r3, r3, #3
 800f93e:	440b      	add	r3, r1
 800f940:	3308      	adds	r3, #8
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	429a      	cmp	r2, r3
 800f948:	d102      	bne.n	800f950 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f94a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f94e:	e100      	b.n	800fb52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f950:	7dfb      	ldrb	r3, [r7, #23]
 800f952:	2b01      	cmp	r3, #1
 800f954:	d140      	bne.n	800f9d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f95a:	4980      	ldr	r1, [pc, #512]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f95c:	4613      	mov	r3, r2
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	4413      	add	r3, r2
 800f962:	00db      	lsls	r3, r3, #3
 800f964:	440b      	add	r3, r1
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d01a      	beq.n	800f9a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f96c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f970:	497a      	ldr	r1, [pc, #488]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f972:	4613      	mov	r3, r2
 800f974:	005b      	lsls	r3, r3, #1
 800f976:	4413      	add	r3, r2
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	440b      	add	r3, r1
 800f97c:	3312      	adds	r3, #18
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	8bba      	ldrh	r2, [r7, #28]
 800f982:	429a      	cmp	r2, r3
 800f984:	d845      	bhi.n	800fa12 <etharp_find_entry+0x18a>
            old_queue = i;
 800f986:	8c3b      	ldrh	r3, [r7, #32]
 800f988:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f98a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f98e:	4973      	ldr	r1, [pc, #460]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f990:	4613      	mov	r3, r2
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	4413      	add	r3, r2
 800f996:	00db      	lsls	r3, r3, #3
 800f998:	440b      	add	r3, r1
 800f99a:	3312      	adds	r3, #18
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	83bb      	strh	r3, [r7, #28]
 800f9a0:	e037      	b.n	800fa12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f9a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f9a6:	496d      	ldr	r1, [pc, #436]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	005b      	lsls	r3, r3, #1
 800f9ac:	4413      	add	r3, r2
 800f9ae:	00db      	lsls	r3, r3, #3
 800f9b0:	440b      	add	r3, r1
 800f9b2:	3312      	adds	r3, #18
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	8b7a      	ldrh	r2, [r7, #26]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d82a      	bhi.n	800fa12 <etharp_find_entry+0x18a>
            old_pending = i;
 800f9bc:	8c3b      	ldrh	r3, [r7, #32]
 800f9be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f9c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f9c4:	4965      	ldr	r1, [pc, #404]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	005b      	lsls	r3, r3, #1
 800f9ca:	4413      	add	r3, r2
 800f9cc:	00db      	lsls	r3, r3, #3
 800f9ce:	440b      	add	r3, r1
 800f9d0:	3312      	adds	r3, #18
 800f9d2:	881b      	ldrh	r3, [r3, #0]
 800f9d4:	837b      	strh	r3, [r7, #26]
 800f9d6:	e01c      	b.n	800fa12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d919      	bls.n	800fa12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f9de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f9e2:	495e      	ldr	r1, [pc, #376]	; (800fb5c <etharp_find_entry+0x2d4>)
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	005b      	lsls	r3, r3, #1
 800f9e8:	4413      	add	r3, r2
 800f9ea:	00db      	lsls	r3, r3, #3
 800f9ec:	440b      	add	r3, r1
 800f9ee:	3312      	adds	r3, #18
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	8b3a      	ldrh	r2, [r7, #24]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d80c      	bhi.n	800fa12 <etharp_find_entry+0x18a>
            old_stable = i;
 800f9f8:	8c3b      	ldrh	r3, [r7, #32]
 800f9fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f9fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa00:	4956      	ldr	r1, [pc, #344]	; (800fb5c <etharp_find_entry+0x2d4>)
 800fa02:	4613      	mov	r3, r2
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	4413      	add	r3, r2
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	440b      	add	r3, r1
 800fa0c:	3312      	adds	r3, #18
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa12:	8c3b      	ldrh	r3, [r7, #32]
 800fa14:	3301      	adds	r3, #1
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	843b      	strh	r3, [r7, #32]
 800fa1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fa1e:	2b09      	cmp	r3, #9
 800fa20:	f77f af4c 	ble.w	800f8bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fa24:	7afb      	ldrb	r3, [r7, #11]
 800fa26:	f003 0302 	and.w	r3, r3, #2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d108      	bne.n	800fa40 <etharp_find_entry+0x1b8>
 800fa2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fa32:	2b0a      	cmp	r3, #10
 800fa34:	d107      	bne.n	800fa46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fa36:	7afb      	ldrb	r3, [r7, #11]
 800fa38:	f003 0301 	and.w	r3, r3, #1
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d102      	bne.n	800fa46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fa40:	f04f 33ff 	mov.w	r3, #4294967295
 800fa44:	e085      	b.n	800fb52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fa46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fa4a:	2b09      	cmp	r3, #9
 800fa4c:	dc02      	bgt.n	800fa54 <etharp_find_entry+0x1cc>
    i = empty;
 800fa4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa50:	843b      	strh	r3, [r7, #32]
 800fa52:	e039      	b.n	800fac8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fa54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fa58:	2b09      	cmp	r3, #9
 800fa5a:	dc14      	bgt.n	800fa86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fa5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fa60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fa64:	493d      	ldr	r1, [pc, #244]	; (800fb5c <etharp_find_entry+0x2d4>)
 800fa66:	4613      	mov	r3, r2
 800fa68:	005b      	lsls	r3, r3, #1
 800fa6a:	4413      	add	r3, r2
 800fa6c:	00db      	lsls	r3, r3, #3
 800fa6e:	440b      	add	r3, r1
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d018      	beq.n	800faa8 <etharp_find_entry+0x220>
 800fa76:	4b3a      	ldr	r3, [pc, #232]	; (800fb60 <etharp_find_entry+0x2d8>)
 800fa78:	f240 126d 	movw	r2, #365	; 0x16d
 800fa7c:	493b      	ldr	r1, [pc, #236]	; (800fb6c <etharp_find_entry+0x2e4>)
 800fa7e:	483a      	ldr	r0, [pc, #232]	; (800fb68 <etharp_find_entry+0x2e0>)
 800fa80:	f002 f94e 	bl	8011d20 <iprintf>
 800fa84:	e010      	b.n	800faa8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fa86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fa8a:	2b09      	cmp	r3, #9
 800fa8c:	dc02      	bgt.n	800fa94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fa8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa90:	843b      	strh	r3, [r7, #32]
 800fa92:	e009      	b.n	800faa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fa94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fa98:	2b09      	cmp	r3, #9
 800fa9a:	dc02      	bgt.n	800faa2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fa9c:	8bfb      	ldrh	r3, [r7, #30]
 800fa9e:	843b      	strh	r3, [r7, #32]
 800faa0:	e002      	b.n	800faa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800faa2:	f04f 33ff 	mov.w	r3, #4294967295
 800faa6:	e054      	b.n	800fb52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800faa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800faac:	2b09      	cmp	r3, #9
 800faae:	dd06      	ble.n	800fabe <etharp_find_entry+0x236>
 800fab0:	4b2b      	ldr	r3, [pc, #172]	; (800fb60 <etharp_find_entry+0x2d8>)
 800fab2:	f240 127f 	movw	r2, #383	; 0x17f
 800fab6:	492e      	ldr	r1, [pc, #184]	; (800fb70 <etharp_find_entry+0x2e8>)
 800fab8:	482b      	ldr	r0, [pc, #172]	; (800fb68 <etharp_find_entry+0x2e0>)
 800faba:	f002 f931 	bl	8011d20 <iprintf>
    etharp_free_entry(i);
 800fabe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff fe06 	bl	800f6d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fac8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800facc:	2b09      	cmp	r3, #9
 800face:	dd06      	ble.n	800fade <etharp_find_entry+0x256>
 800fad0:	4b23      	ldr	r3, [pc, #140]	; (800fb60 <etharp_find_entry+0x2d8>)
 800fad2:	f240 1283 	movw	r2, #387	; 0x183
 800fad6:	4926      	ldr	r1, [pc, #152]	; (800fb70 <etharp_find_entry+0x2e8>)
 800fad8:	4823      	ldr	r0, [pc, #140]	; (800fb68 <etharp_find_entry+0x2e0>)
 800fada:	f002 f921 	bl	8011d20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fae2:	491e      	ldr	r1, [pc, #120]	; (800fb5c <etharp_find_entry+0x2d4>)
 800fae4:	4613      	mov	r3, r2
 800fae6:	005b      	lsls	r3, r3, #1
 800fae8:	4413      	add	r3, r2
 800faea:	00db      	lsls	r3, r3, #3
 800faec:	440b      	add	r3, r1
 800faee:	3314      	adds	r3, #20
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d006      	beq.n	800fb04 <etharp_find_entry+0x27c>
 800faf6:	4b1a      	ldr	r3, [pc, #104]	; (800fb60 <etharp_find_entry+0x2d8>)
 800faf8:	f240 1285 	movw	r2, #389	; 0x185
 800fafc:	491d      	ldr	r1, [pc, #116]	; (800fb74 <etharp_find_entry+0x2ec>)
 800fafe:	481a      	ldr	r0, [pc, #104]	; (800fb68 <etharp_find_entry+0x2e0>)
 800fb00:	f002 f90e 	bl	8011d20 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00b      	beq.n	800fb22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fb0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6819      	ldr	r1, [r3, #0]
 800fb12:	4812      	ldr	r0, [pc, #72]	; (800fb5c <etharp_find_entry+0x2d4>)
 800fb14:	4613      	mov	r3, r2
 800fb16:	005b      	lsls	r3, r3, #1
 800fb18:	4413      	add	r3, r2
 800fb1a:	00db      	lsls	r3, r3, #3
 800fb1c:	4403      	add	r3, r0
 800fb1e:	3304      	adds	r3, #4
 800fb20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fb22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb26:	490d      	ldr	r1, [pc, #52]	; (800fb5c <etharp_find_entry+0x2d4>)
 800fb28:	4613      	mov	r3, r2
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	4413      	add	r3, r2
 800fb2e:	00db      	lsls	r3, r3, #3
 800fb30:	440b      	add	r3, r1
 800fb32:	3312      	adds	r3, #18
 800fb34:	2200      	movs	r2, #0
 800fb36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fb38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb3c:	4907      	ldr	r1, [pc, #28]	; (800fb5c <etharp_find_entry+0x2d4>)
 800fb3e:	4613      	mov	r3, r2
 800fb40:	005b      	lsls	r3, r3, #1
 800fb42:	4413      	add	r3, r2
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	440b      	add	r3, r1
 800fb48:	3308      	adds	r3, #8
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fb4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3728      	adds	r7, #40	; 0x28
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	24000130 	.word	0x24000130
 800fb60:	08014eac 	.word	0x08014eac
 800fb64:	08014ee4 	.word	0x08014ee4
 800fb68:	08014f24 	.word	0x08014f24
 800fb6c:	08014f4c 	.word	0x08014f4c
 800fb70:	08014f64 	.word	0x08014f64
 800fb74:	08014f78 	.word	0x08014f78

0800fb78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b088      	sub	sp, #32
 800fb7c:	af02      	add	r7, sp, #8
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
 800fb84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb8c:	2b06      	cmp	r3, #6
 800fb8e:	d006      	beq.n	800fb9e <etharp_update_arp_entry+0x26>
 800fb90:	4b48      	ldr	r3, [pc, #288]	; (800fcb4 <etharp_update_arp_entry+0x13c>)
 800fb92:	f240 12a9 	movw	r2, #425	; 0x1a9
 800fb96:	4948      	ldr	r1, [pc, #288]	; (800fcb8 <etharp_update_arp_entry+0x140>)
 800fb98:	4848      	ldr	r0, [pc, #288]	; (800fcbc <etharp_update_arp_entry+0x144>)
 800fb9a:	f002 f8c1 	bl	8011d20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d012      	beq.n	800fbca <etharp_update_arp_entry+0x52>
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00e      	beq.n	800fbca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68f9      	ldr	r1, [r7, #12]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f001 f922 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 800fbb8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d105      	bne.n	800fbca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fbc6:	2be0      	cmp	r3, #224	; 0xe0
 800fbc8:	d102      	bne.n	800fbd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fbca:	f06f 030f 	mvn.w	r3, #15
 800fbce:	e06c      	b.n	800fcaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fbd0:	78fb      	ldrb	r3, [r7, #3]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	68b8      	ldr	r0, [r7, #8]
 800fbd8:	f7ff fe56 	bl	800f888 <etharp_find_entry>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fbe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	da02      	bge.n	800fbee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fbe8:	8afb      	ldrh	r3, [r7, #22]
 800fbea:	b25b      	sxtb	r3, r3
 800fbec:	e05d      	b.n	800fcaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fbee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fbf2:	4933      	ldr	r1, [pc, #204]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	4413      	add	r3, r2
 800fbfa:	00db      	lsls	r3, r3, #3
 800fbfc:	440b      	add	r3, r1
 800fbfe:	3314      	adds	r3, #20
 800fc00:	2202      	movs	r2, #2
 800fc02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fc04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc08:	492d      	ldr	r1, [pc, #180]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	005b      	lsls	r3, r3, #1
 800fc0e:	4413      	add	r3, r2
 800fc10:	00db      	lsls	r3, r3, #3
 800fc12:	440b      	add	r3, r1
 800fc14:	3308      	adds	r3, #8
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fc1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	4413      	add	r3, r2
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	3308      	adds	r3, #8
 800fc28:	4a25      	ldr	r2, [pc, #148]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fc2a:	4413      	add	r3, r2
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	2206      	movs	r2, #6
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f002 f861 	bl	8011cfa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fc38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc3c:	4920      	ldr	r1, [pc, #128]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fc3e:	4613      	mov	r3, r2
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	4413      	add	r3, r2
 800fc44:	00db      	lsls	r3, r3, #3
 800fc46:	440b      	add	r3, r1
 800fc48:	3312      	adds	r3, #18
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fc4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc52:	491b      	ldr	r1, [pc, #108]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fc54:	4613      	mov	r3, r2
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	4413      	add	r3, r2
 800fc5a:	00db      	lsls	r3, r3, #3
 800fc5c:	440b      	add	r3, r1
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d021      	beq.n	800fca8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fc64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc68:	4915      	ldr	r1, [pc, #84]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	005b      	lsls	r3, r3, #1
 800fc6e:	4413      	add	r3, r2
 800fc70:	00db      	lsls	r3, r3, #3
 800fc72:	440b      	add	r3, r1
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fc78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fc7c:	4910      	ldr	r1, [pc, #64]	; (800fcc0 <etharp_update_arp_entry+0x148>)
 800fc7e:	4613      	mov	r3, r2
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	4413      	add	r3, r2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	440b      	add	r3, r1
 800fc88:	2200      	movs	r2, #0
 800fc8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fc92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6939      	ldr	r1, [r7, #16]
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f001 ffb1 	bl	8011c04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fca2:	6938      	ldr	r0, [r7, #16]
 800fca4:	f7f9 f9cc 	bl	8009040 <pbuf_free>
  }
  return ERR_OK;
 800fca8:	2300      	movs	r3, #0
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3718      	adds	r7, #24
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	08014eac 	.word	0x08014eac
 800fcb8:	08014fa4 	.word	0x08014fa4
 800fcbc:	08014f24 	.word	0x08014f24
 800fcc0:	24000130 	.word	0x24000130

0800fcc4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fccc:	2300      	movs	r3, #0
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	e01e      	b.n	800fd10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fcd2:	4913      	ldr	r1, [pc, #76]	; (800fd20 <etharp_cleanup_netif+0x5c>)
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	4413      	add	r3, r2
 800fcdc:	00db      	lsls	r3, r3, #3
 800fcde:	440b      	add	r3, r1
 800fce0:	3314      	adds	r3, #20
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fce6:	7afb      	ldrb	r3, [r7, #11]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00e      	beq.n	800fd0a <etharp_cleanup_netif+0x46>
 800fcec:	490c      	ldr	r1, [pc, #48]	; (800fd20 <etharp_cleanup_netif+0x5c>)
 800fcee:	68fa      	ldr	r2, [r7, #12]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	4413      	add	r3, r2
 800fcf6:	00db      	lsls	r3, r3, #3
 800fcf8:	440b      	add	r3, r1
 800fcfa:	3308      	adds	r3, #8
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d102      	bne.n	800fd0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f7ff fce5 	bl	800f6d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b09      	cmp	r3, #9
 800fd14:	dddd      	ble.n	800fcd2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fd16:	bf00      	nop
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	24000130 	.word	0x24000130

0800fd24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fd24:	b5b0      	push	{r4, r5, r7, lr}
 800fd26:	b08a      	sub	sp, #40	; 0x28
 800fd28:	af04      	add	r7, sp, #16
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d107      	bne.n	800fd44 <etharp_input+0x20>
 800fd34:	4b3d      	ldr	r3, [pc, #244]	; (800fe2c <etharp_input+0x108>)
 800fd36:	f240 228a 	movw	r2, #650	; 0x28a
 800fd3a:	493d      	ldr	r1, [pc, #244]	; (800fe30 <etharp_input+0x10c>)
 800fd3c:	483d      	ldr	r0, [pc, #244]	; (800fe34 <etharp_input+0x110>)
 800fd3e:	f001 ffef 	bl	8011d20 <iprintf>
 800fd42:	e06f      	b.n	800fe24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd54:	d10c      	bne.n	800fd70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fd5a:	2b06      	cmp	r3, #6
 800fd5c:	d108      	bne.n	800fd70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fd62:	2b04      	cmp	r3, #4
 800fd64:	d104      	bne.n	800fd70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	885b      	ldrh	r3, [r3, #2]
 800fd6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fd6c:	2b08      	cmp	r3, #8
 800fd6e:	d003      	beq.n	800fd78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7f9 f965 	bl	8009040 <pbuf_free>
    return;
 800fd76:	e055      	b.n	800fe24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	330e      	adds	r3, #14
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	3318      	adds	r3, #24
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d102      	bne.n	800fd98 <etharp_input+0x74>
    for_us = 0;
 800fd92:	2300      	movs	r3, #0
 800fd94:	75fb      	strb	r3, [r7, #23]
 800fd96:	e009      	b.n	800fdac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	bf0c      	ite	eq
 800fda4:	2301      	moveq	r3, #1
 800fda6:	2300      	movne	r3, #0
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	f103 0208 	add.w	r2, r3, #8
 800fdb2:	7dfb      	ldrb	r3, [r7, #23]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d001      	beq.n	800fdbc <etharp_input+0x98>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e000      	b.n	800fdbe <etharp_input+0x9a>
 800fdbc:	2302      	movs	r3, #2
 800fdbe:	f107 010c 	add.w	r1, r7, #12
 800fdc2:	6838      	ldr	r0, [r7, #0]
 800fdc4:	f7ff fed8 	bl	800fb78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	88db      	ldrh	r3, [r3, #6]
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdd2:	d003      	beq.n	800fddc <etharp_input+0xb8>
 800fdd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdd8:	d01e      	beq.n	800fe18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fdda:	e020      	b.n	800fe1e <etharp_input+0xfa>
      if (for_us) {
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d01c      	beq.n	800fe1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fdfc:	2102      	movs	r1, #2
 800fdfe:	9103      	str	r1, [sp, #12]
 800fe00:	f107 010c 	add.w	r1, r7, #12
 800fe04:	9102      	str	r1, [sp, #8]
 800fe06:	9201      	str	r2, [sp, #4]
 800fe08:	9300      	str	r3, [sp, #0]
 800fe0a:	462b      	mov	r3, r5
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	4601      	mov	r1, r0
 800fe10:	6838      	ldr	r0, [r7, #0]
 800fe12:	f000 faeb 	bl	80103ec <etharp_raw>
      break;
 800fe16:	e001      	b.n	800fe1c <etharp_input+0xf8>
      break;
 800fe18:	bf00      	nop
 800fe1a:	e000      	b.n	800fe1e <etharp_input+0xfa>
      break;
 800fe1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7f9 f90e 	bl	8009040 <pbuf_free>
}
 800fe24:	3718      	adds	r7, #24
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bdb0      	pop	{r4, r5, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	08014eac 	.word	0x08014eac
 800fe30:	08014ffc 	.word	0x08014ffc
 800fe34:	08014f24 	.word	0x08014f24

0800fe38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af02      	add	r7, sp, #8
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	4613      	mov	r3, r2
 800fe44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fe46:	79fa      	ldrb	r2, [r7, #7]
 800fe48:	4944      	ldr	r1, [pc, #272]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	4413      	add	r3, r2
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	440b      	add	r3, r1
 800fe54:	3314      	adds	r3, #20
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d806      	bhi.n	800fe6a <etharp_output_to_arp_index+0x32>
 800fe5c:	4b40      	ldr	r3, [pc, #256]	; (800ff60 <etharp_output_to_arp_index+0x128>)
 800fe5e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800fe62:	4940      	ldr	r1, [pc, #256]	; (800ff64 <etharp_output_to_arp_index+0x12c>)
 800fe64:	4840      	ldr	r0, [pc, #256]	; (800ff68 <etharp_output_to_arp_index+0x130>)
 800fe66:	f001 ff5b 	bl	8011d20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fe6a:	79fa      	ldrb	r2, [r7, #7]
 800fe6c:	493b      	ldr	r1, [pc, #236]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800fe6e:	4613      	mov	r3, r2
 800fe70:	005b      	lsls	r3, r3, #1
 800fe72:	4413      	add	r3, r2
 800fe74:	00db      	lsls	r3, r3, #3
 800fe76:	440b      	add	r3, r1
 800fe78:	3314      	adds	r3, #20
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d153      	bne.n	800ff28 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fe80:	79fa      	ldrb	r2, [r7, #7]
 800fe82:	4936      	ldr	r1, [pc, #216]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800fe84:	4613      	mov	r3, r2
 800fe86:	005b      	lsls	r3, r3, #1
 800fe88:	4413      	add	r3, r2
 800fe8a:	00db      	lsls	r3, r3, #3
 800fe8c:	440b      	add	r3, r1
 800fe8e:	3312      	adds	r3, #18
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fe96:	d919      	bls.n	800fecc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fe98:	79fa      	ldrb	r2, [r7, #7]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	005b      	lsls	r3, r3, #1
 800fe9e:	4413      	add	r3, r2
 800fea0:	00db      	lsls	r3, r3, #3
 800fea2:	4a2e      	ldr	r2, [pc, #184]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800fea4:	4413      	add	r3, r2
 800fea6:	3304      	adds	r3, #4
 800fea8:	4619      	mov	r1, r3
 800feaa:	68f8      	ldr	r0, [r7, #12]
 800feac:	f000 fb4c 	bl	8010548 <etharp_request>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d138      	bne.n	800ff28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800feb6:	79fa      	ldrb	r2, [r7, #7]
 800feb8:	4928      	ldr	r1, [pc, #160]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800feba:	4613      	mov	r3, r2
 800febc:	005b      	lsls	r3, r3, #1
 800febe:	4413      	add	r3, r2
 800fec0:	00db      	lsls	r3, r3, #3
 800fec2:	440b      	add	r3, r1
 800fec4:	3314      	adds	r3, #20
 800fec6:	2203      	movs	r2, #3
 800fec8:	701a      	strb	r2, [r3, #0]
 800feca:	e02d      	b.n	800ff28 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fecc:	79fa      	ldrb	r2, [r7, #7]
 800fece:	4923      	ldr	r1, [pc, #140]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800fed0:	4613      	mov	r3, r2
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	4413      	add	r3, r2
 800fed6:	00db      	lsls	r3, r3, #3
 800fed8:	440b      	add	r3, r1
 800feda:	3312      	adds	r3, #18
 800fedc:	881b      	ldrh	r3, [r3, #0]
 800fede:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fee2:	d321      	bcc.n	800ff28 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fee4:	79fa      	ldrb	r2, [r7, #7]
 800fee6:	4613      	mov	r3, r2
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	4413      	add	r3, r2
 800feec:	00db      	lsls	r3, r3, #3
 800feee:	4a1b      	ldr	r2, [pc, #108]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800fef0:	4413      	add	r3, r2
 800fef2:	1d19      	adds	r1, r3, #4
 800fef4:	79fa      	ldrb	r2, [r7, #7]
 800fef6:	4613      	mov	r3, r2
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	4413      	add	r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	3308      	adds	r3, #8
 800ff00:	4a16      	ldr	r2, [pc, #88]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800ff02:	4413      	add	r3, r2
 800ff04:	3304      	adds	r3, #4
 800ff06:	461a      	mov	r2, r3
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f000 fafb 	bl	8010504 <etharp_request_dst>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d109      	bne.n	800ff28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ff14:	79fa      	ldrb	r2, [r7, #7]
 800ff16:	4911      	ldr	r1, [pc, #68]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800ff18:	4613      	mov	r3, r2
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	4413      	add	r3, r2
 800ff1e:	00db      	lsls	r3, r3, #3
 800ff20:	440b      	add	r3, r1
 800ff22:	3314      	adds	r3, #20
 800ff24:	2203      	movs	r2, #3
 800ff26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ff2e:	79fa      	ldrb	r2, [r7, #7]
 800ff30:	4613      	mov	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	4413      	add	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	3308      	adds	r3, #8
 800ff3a:	4a08      	ldr	r2, [pc, #32]	; (800ff5c <etharp_output_to_arp_index+0x124>)
 800ff3c:	4413      	add	r3, r2
 800ff3e:	1d1a      	adds	r2, r3, #4
 800ff40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	4613      	mov	r3, r2
 800ff48:	460a      	mov	r2, r1
 800ff4a:	68b9      	ldr	r1, [r7, #8]
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f001 fe59 	bl	8011c04 <ethernet_output>
 800ff52:	4603      	mov	r3, r0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3710      	adds	r7, #16
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	24000130 	.word	0x24000130
 800ff60:	08014eac 	.word	0x08014eac
 800ff64:	0801501c 	.word	0x0801501c
 800ff68:	08014f24 	.word	0x08014f24

0800ff6c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	; 0x28
 800ff70:	af02      	add	r7, sp, #8
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d106      	bne.n	800ff90 <etharp_output+0x24>
 800ff82:	4b73      	ldr	r3, [pc, #460]	; (8010150 <etharp_output+0x1e4>)
 800ff84:	f240 321e 	movw	r2, #798	; 0x31e
 800ff88:	4972      	ldr	r1, [pc, #456]	; (8010154 <etharp_output+0x1e8>)
 800ff8a:	4873      	ldr	r0, [pc, #460]	; (8010158 <etharp_output+0x1ec>)
 800ff8c:	f001 fec8 	bl	8011d20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d106      	bne.n	800ffa4 <etharp_output+0x38>
 800ff96:	4b6e      	ldr	r3, [pc, #440]	; (8010150 <etharp_output+0x1e4>)
 800ff98:	f240 321f 	movw	r2, #799	; 0x31f
 800ff9c:	496f      	ldr	r1, [pc, #444]	; (801015c <etharp_output+0x1f0>)
 800ff9e:	486e      	ldr	r0, [pc, #440]	; (8010158 <etharp_output+0x1ec>)
 800ffa0:	f001 febe 	bl	8011d20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d106      	bne.n	800ffb8 <etharp_output+0x4c>
 800ffaa:	4b69      	ldr	r3, [pc, #420]	; (8010150 <etharp_output+0x1e4>)
 800ffac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ffb0:	496b      	ldr	r1, [pc, #428]	; (8010160 <etharp_output+0x1f4>)
 800ffb2:	4869      	ldr	r0, [pc, #420]	; (8010158 <etharp_output+0x1ec>)
 800ffb4:	f001 feb4 	bl	8011d20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68f9      	ldr	r1, [r7, #12]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f000 ff1c 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d002      	beq.n	800ffd0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ffca:	4b66      	ldr	r3, [pc, #408]	; (8010164 <etharp_output+0x1f8>)
 800ffcc:	61fb      	str	r3, [r7, #28]
 800ffce:	e0af      	b.n	8010130 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffd8:	2be0      	cmp	r3, #224	; 0xe0
 800ffda:	d118      	bne.n	801000e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ffe4:	235e      	movs	r3, #94	; 0x5e
 800ffe6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	3301      	adds	r3, #1
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3302      	adds	r3, #2
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	3303      	adds	r3, #3
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010006:	f107 0310 	add.w	r3, r7, #16
 801000a:	61fb      	str	r3, [r7, #28]
 801000c:	e090      	b.n	8010130 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	3304      	adds	r3, #4
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	405a      	eors	r2, r3
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3308      	adds	r3, #8
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4013      	ands	r3, r2
 8010022:	2b00      	cmp	r3, #0
 8010024:	d012      	beq.n	801004c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801002c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010030:	4293      	cmp	r3, r2
 8010032:	d00b      	beq.n	801004c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	330c      	adds	r3, #12
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d003      	beq.n	8010046 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	330c      	adds	r3, #12
 8010042:	61bb      	str	r3, [r7, #24]
 8010044:	e002      	b.n	801004c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010046:	f06f 0303 	mvn.w	r3, #3
 801004a:	e07d      	b.n	8010148 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801004c:	4b46      	ldr	r3, [pc, #280]	; (8010168 <etharp_output+0x1fc>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	4619      	mov	r1, r3
 8010052:	4a46      	ldr	r2, [pc, #280]	; (801016c <etharp_output+0x200>)
 8010054:	460b      	mov	r3, r1
 8010056:	005b      	lsls	r3, r3, #1
 8010058:	440b      	add	r3, r1
 801005a:	00db      	lsls	r3, r3, #3
 801005c:	4413      	add	r3, r2
 801005e:	3314      	adds	r3, #20
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d925      	bls.n	80100b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010066:	4b40      	ldr	r3, [pc, #256]	; (8010168 <etharp_output+0x1fc>)
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	4619      	mov	r1, r3
 801006c:	4a3f      	ldr	r2, [pc, #252]	; (801016c <etharp_output+0x200>)
 801006e:	460b      	mov	r3, r1
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	440b      	add	r3, r1
 8010074:	00db      	lsls	r3, r3, #3
 8010076:	4413      	add	r3, r2
 8010078:	3308      	adds	r3, #8
 801007a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	429a      	cmp	r2, r3
 8010080:	d117      	bne.n	80100b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	4b38      	ldr	r3, [pc, #224]	; (8010168 <etharp_output+0x1fc>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	4618      	mov	r0, r3
 801008c:	4937      	ldr	r1, [pc, #220]	; (801016c <etharp_output+0x200>)
 801008e:	4603      	mov	r3, r0
 8010090:	005b      	lsls	r3, r3, #1
 8010092:	4403      	add	r3, r0
 8010094:	00db      	lsls	r3, r3, #3
 8010096:	440b      	add	r3, r1
 8010098:	3304      	adds	r3, #4
 801009a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801009c:	429a      	cmp	r2, r3
 801009e:	d108      	bne.n	80100b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80100a0:	4b31      	ldr	r3, [pc, #196]	; (8010168 <etharp_output+0x1fc>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	461a      	mov	r2, r3
 80100a6:	68b9      	ldr	r1, [r7, #8]
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f7ff fec5 	bl	800fe38 <etharp_output_to_arp_index>
 80100ae:	4603      	mov	r3, r0
 80100b0:	e04a      	b.n	8010148 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]
 80100b6:	e031      	b.n	801011c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80100b8:	7dfa      	ldrb	r2, [r7, #23]
 80100ba:	492c      	ldr	r1, [pc, #176]	; (801016c <etharp_output+0x200>)
 80100bc:	4613      	mov	r3, r2
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	00db      	lsls	r3, r3, #3
 80100c4:	440b      	add	r3, r1
 80100c6:	3314      	adds	r3, #20
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d923      	bls.n	8010116 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80100ce:	7dfa      	ldrb	r2, [r7, #23]
 80100d0:	4926      	ldr	r1, [pc, #152]	; (801016c <etharp_output+0x200>)
 80100d2:	4613      	mov	r3, r2
 80100d4:	005b      	lsls	r3, r3, #1
 80100d6:	4413      	add	r3, r2
 80100d8:	00db      	lsls	r3, r3, #3
 80100da:	440b      	add	r3, r1
 80100dc:	3308      	adds	r3, #8
 80100de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d117      	bne.n	8010116 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	6819      	ldr	r1, [r3, #0]
 80100ea:	7dfa      	ldrb	r2, [r7, #23]
 80100ec:	481f      	ldr	r0, [pc, #124]	; (801016c <etharp_output+0x200>)
 80100ee:	4613      	mov	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	4403      	add	r3, r0
 80100f8:	3304      	adds	r3, #4
 80100fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80100fc:	4299      	cmp	r1, r3
 80100fe:	d10a      	bne.n	8010116 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010100:	4a19      	ldr	r2, [pc, #100]	; (8010168 <etharp_output+0x1fc>)
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010106:	7dfb      	ldrb	r3, [r7, #23]
 8010108:	461a      	mov	r2, r3
 801010a:	68b9      	ldr	r1, [r7, #8]
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f7ff fe93 	bl	800fe38 <etharp_output_to_arp_index>
 8010112:	4603      	mov	r3, r0
 8010114:	e018      	b.n	8010148 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010116:	7dfb      	ldrb	r3, [r7, #23]
 8010118:	3301      	adds	r3, #1
 801011a:	75fb      	strb	r3, [r7, #23]
 801011c:	7dfb      	ldrb	r3, [r7, #23]
 801011e:	2b09      	cmp	r3, #9
 8010120:	d9ca      	bls.n	80100b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	69b9      	ldr	r1, [r7, #24]
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f000 f822 	bl	8010170 <etharp_query>
 801012c:	4603      	mov	r3, r0
 801012e:	e00b      	b.n	8010148 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	68b9      	ldr	r1, [r7, #8]
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f001 fd5f 	bl	8011c04 <ethernet_output>
 8010146:	4603      	mov	r3, r0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3720      	adds	r7, #32
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	08014eac 	.word	0x08014eac
 8010154:	08014ffc 	.word	0x08014ffc
 8010158:	08014f24 	.word	0x08014f24
 801015c:	0801504c 	.word	0x0801504c
 8010160:	08014fec 	.word	0x08014fec
 8010164:	08015678 	.word	0x08015678
 8010168:	24000220 	.word	0x24000220
 801016c:	24000130 	.word	0x24000130

08010170 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b08c      	sub	sp, #48	; 0x30
 8010174:	af02      	add	r7, sp, #8
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	3326      	adds	r3, #38	; 0x26
 8010180:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010182:	23ff      	movs	r3, #255	; 0xff
 8010184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	68f9      	ldr	r1, [r7, #12]
 8010192:	4618      	mov	r0, r3
 8010194:	f000 fe32 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d10c      	bne.n	80101b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80101a6:	2be0      	cmp	r3, #224	; 0xe0
 80101a8:	d006      	beq.n	80101b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d003      	beq.n	80101b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d102      	bne.n	80101be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80101b8:	f06f 030f 	mvn.w	r3, #15
 80101bc:	e102      	b.n	80103c4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	2101      	movs	r1, #1
 80101c2:	68b8      	ldr	r0, [r7, #8]
 80101c4:	f7ff fb60 	bl	800f888 <etharp_find_entry>
 80101c8:	4603      	mov	r3, r0
 80101ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80101cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	da02      	bge.n	80101da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80101d4:	8a7b      	ldrh	r3, [r7, #18]
 80101d6:	b25b      	sxtb	r3, r3
 80101d8:	e0f4      	b.n	80103c4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80101da:	8a7b      	ldrh	r3, [r7, #18]
 80101dc:	2b7e      	cmp	r3, #126	; 0x7e
 80101de:	d906      	bls.n	80101ee <etharp_query+0x7e>
 80101e0:	4b7a      	ldr	r3, [pc, #488]	; (80103cc <etharp_query+0x25c>)
 80101e2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80101e6:	497a      	ldr	r1, [pc, #488]	; (80103d0 <etharp_query+0x260>)
 80101e8:	487a      	ldr	r0, [pc, #488]	; (80103d4 <etharp_query+0x264>)
 80101ea:	f001 fd99 	bl	8011d20 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80101ee:	8a7b      	ldrh	r3, [r7, #18]
 80101f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80101f2:	7c7a      	ldrb	r2, [r7, #17]
 80101f4:	4978      	ldr	r1, [pc, #480]	; (80103d8 <etharp_query+0x268>)
 80101f6:	4613      	mov	r3, r2
 80101f8:	005b      	lsls	r3, r3, #1
 80101fa:	4413      	add	r3, r2
 80101fc:	00db      	lsls	r3, r3, #3
 80101fe:	440b      	add	r3, r1
 8010200:	3314      	adds	r3, #20
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d115      	bne.n	8010234 <etharp_query+0xc4>
    is_new_entry = 1;
 8010208:	2301      	movs	r3, #1
 801020a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801020c:	7c7a      	ldrb	r2, [r7, #17]
 801020e:	4972      	ldr	r1, [pc, #456]	; (80103d8 <etharp_query+0x268>)
 8010210:	4613      	mov	r3, r2
 8010212:	005b      	lsls	r3, r3, #1
 8010214:	4413      	add	r3, r2
 8010216:	00db      	lsls	r3, r3, #3
 8010218:	440b      	add	r3, r1
 801021a:	3314      	adds	r3, #20
 801021c:	2201      	movs	r2, #1
 801021e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010220:	7c7a      	ldrb	r2, [r7, #17]
 8010222:	496d      	ldr	r1, [pc, #436]	; (80103d8 <etharp_query+0x268>)
 8010224:	4613      	mov	r3, r2
 8010226:	005b      	lsls	r3, r3, #1
 8010228:	4413      	add	r3, r2
 801022a:	00db      	lsls	r3, r3, #3
 801022c:	440b      	add	r3, r1
 801022e:	3308      	adds	r3, #8
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010234:	7c7a      	ldrb	r2, [r7, #17]
 8010236:	4968      	ldr	r1, [pc, #416]	; (80103d8 <etharp_query+0x268>)
 8010238:	4613      	mov	r3, r2
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	4413      	add	r3, r2
 801023e:	00db      	lsls	r3, r3, #3
 8010240:	440b      	add	r3, r1
 8010242:	3314      	adds	r3, #20
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d011      	beq.n	801026e <etharp_query+0xfe>
 801024a:	7c7a      	ldrb	r2, [r7, #17]
 801024c:	4962      	ldr	r1, [pc, #392]	; (80103d8 <etharp_query+0x268>)
 801024e:	4613      	mov	r3, r2
 8010250:	005b      	lsls	r3, r3, #1
 8010252:	4413      	add	r3, r2
 8010254:	00db      	lsls	r3, r3, #3
 8010256:	440b      	add	r3, r1
 8010258:	3314      	adds	r3, #20
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d806      	bhi.n	801026e <etharp_query+0xfe>
 8010260:	4b5a      	ldr	r3, [pc, #360]	; (80103cc <etharp_query+0x25c>)
 8010262:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010266:	495d      	ldr	r1, [pc, #372]	; (80103dc <etharp_query+0x26c>)
 8010268:	485a      	ldr	r0, [pc, #360]	; (80103d4 <etharp_query+0x264>)
 801026a:	f001 fd59 	bl	8011d20 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801026e:	6a3b      	ldr	r3, [r7, #32]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d102      	bne.n	801027a <etharp_query+0x10a>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10c      	bne.n	8010294 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801027a:	68b9      	ldr	r1, [r7, #8]
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f000 f963 	bl	8010548 <etharp_request>
 8010282:	4603      	mov	r3, r0
 8010284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d102      	bne.n	8010294 <etharp_query+0x124>
      return result;
 801028e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010292:	e097      	b.n	80103c4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <etharp_query+0x138>
 801029a:	4b4c      	ldr	r3, [pc, #304]	; (80103cc <etharp_query+0x25c>)
 801029c:	f240 32e1 	movw	r2, #993	; 0x3e1
 80102a0:	494f      	ldr	r1, [pc, #316]	; (80103e0 <etharp_query+0x270>)
 80102a2:	484c      	ldr	r0, [pc, #304]	; (80103d4 <etharp_query+0x264>)
 80102a4:	f001 fd3c 	bl	8011d20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80102a8:	7c7a      	ldrb	r2, [r7, #17]
 80102aa:	494b      	ldr	r1, [pc, #300]	; (80103d8 <etharp_query+0x268>)
 80102ac:	4613      	mov	r3, r2
 80102ae:	005b      	lsls	r3, r3, #1
 80102b0:	4413      	add	r3, r2
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	440b      	add	r3, r1
 80102b6:	3314      	adds	r3, #20
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d918      	bls.n	80102f0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80102be:	4a49      	ldr	r2, [pc, #292]	; (80103e4 <etharp_query+0x274>)
 80102c0:	7c7b      	ldrb	r3, [r7, #17]
 80102c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80102c4:	7c7a      	ldrb	r2, [r7, #17]
 80102c6:	4613      	mov	r3, r2
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4413      	add	r3, r2
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	3308      	adds	r3, #8
 80102d0:	4a41      	ldr	r2, [pc, #260]	; (80103d8 <etharp_query+0x268>)
 80102d2:	4413      	add	r3, r2
 80102d4:	1d1a      	adds	r2, r3, #4
 80102d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	4613      	mov	r3, r2
 80102de:	697a      	ldr	r2, [r7, #20]
 80102e0:	6879      	ldr	r1, [r7, #4]
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f001 fc8e 	bl	8011c04 <ethernet_output>
 80102e8:	4603      	mov	r3, r0
 80102ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102ee:	e067      	b.n	80103c0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80102f0:	7c7a      	ldrb	r2, [r7, #17]
 80102f2:	4939      	ldr	r1, [pc, #228]	; (80103d8 <etharp_query+0x268>)
 80102f4:	4613      	mov	r3, r2
 80102f6:	005b      	lsls	r3, r3, #1
 80102f8:	4413      	add	r3, r2
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	440b      	add	r3, r1
 80102fe:	3314      	adds	r3, #20
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	2b01      	cmp	r3, #1
 8010304:	d15c      	bne.n	80103c0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010306:	2300      	movs	r3, #0
 8010308:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801030e:	e01c      	b.n	801034a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	895a      	ldrh	r2, [r3, #10]
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	891b      	ldrh	r3, [r3, #8]
 8010318:	429a      	cmp	r2, r3
 801031a:	d10a      	bne.n	8010332 <etharp_query+0x1c2>
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d006      	beq.n	8010332 <etharp_query+0x1c2>
 8010324:	4b29      	ldr	r3, [pc, #164]	; (80103cc <etharp_query+0x25c>)
 8010326:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801032a:	492f      	ldr	r1, [pc, #188]	; (80103e8 <etharp_query+0x278>)
 801032c:	4829      	ldr	r0, [pc, #164]	; (80103d4 <etharp_query+0x264>)
 801032e:	f001 fcf7 	bl	8011d20 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	7b1b      	ldrb	r3, [r3, #12]
 8010336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <etharp_query+0x1d4>
        copy_needed = 1;
 801033e:	2301      	movs	r3, #1
 8010340:	61bb      	str	r3, [r7, #24]
        break;
 8010342:	e005      	b.n	8010350 <etharp_query+0x1e0>
      }
      p = p->next;
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	61fb      	str	r3, [r7, #28]
    while (p) {
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1df      	bne.n	8010310 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d007      	beq.n	8010366 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	f44f 7120 	mov.w	r1, #640	; 0x280
 801035c:	200e      	movs	r0, #14
 801035e:	f7f9 f96d 	bl	800963c <pbuf_clone>
 8010362:	61f8      	str	r0, [r7, #28]
 8010364:	e004      	b.n	8010370 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801036a:	69f8      	ldr	r0, [r7, #28]
 801036c:	f7f8 ff08 	bl	8009180 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d021      	beq.n	80103ba <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010376:	7c7a      	ldrb	r2, [r7, #17]
 8010378:	4917      	ldr	r1, [pc, #92]	; (80103d8 <etharp_query+0x268>)
 801037a:	4613      	mov	r3, r2
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	4413      	add	r3, r2
 8010380:	00db      	lsls	r3, r3, #3
 8010382:	440b      	add	r3, r1
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00a      	beq.n	80103a0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801038a:	7c7a      	ldrb	r2, [r7, #17]
 801038c:	4912      	ldr	r1, [pc, #72]	; (80103d8 <etharp_query+0x268>)
 801038e:	4613      	mov	r3, r2
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	4413      	add	r3, r2
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	440b      	add	r3, r1
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4618      	mov	r0, r3
 801039c:	f7f8 fe50 	bl	8009040 <pbuf_free>
      }
      arp_table[i].q = p;
 80103a0:	7c7a      	ldrb	r2, [r7, #17]
 80103a2:	490d      	ldr	r1, [pc, #52]	; (80103d8 <etharp_query+0x268>)
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	440b      	add	r3, r1
 80103ae:	69fa      	ldr	r2, [r7, #28]
 80103b0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80103b2:	2300      	movs	r3, #0
 80103b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103b8:	e002      	b.n	80103c0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80103ba:	23ff      	movs	r3, #255	; 0xff
 80103bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80103c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3728      	adds	r7, #40	; 0x28
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	08014eac 	.word	0x08014eac
 80103d0:	08015058 	.word	0x08015058
 80103d4:	08014f24 	.word	0x08014f24
 80103d8:	24000130 	.word	0x24000130
 80103dc:	08015068 	.word	0x08015068
 80103e0:	0801504c 	.word	0x0801504c
 80103e4:	24000220 	.word	0x24000220
 80103e8:	08015090 	.word	0x08015090

080103ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b08a      	sub	sp, #40	; 0x28
 80103f0:	af02      	add	r7, sp, #8
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80103fa:	2300      	movs	r3, #0
 80103fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d106      	bne.n	8010412 <etharp_raw+0x26>
 8010404:	4b3a      	ldr	r3, [pc, #232]	; (80104f0 <etharp_raw+0x104>)
 8010406:	f240 4257 	movw	r2, #1111	; 0x457
 801040a:	493a      	ldr	r1, [pc, #232]	; (80104f4 <etharp_raw+0x108>)
 801040c:	483a      	ldr	r0, [pc, #232]	; (80104f8 <etharp_raw+0x10c>)
 801040e:	f001 fc87 	bl	8011d20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010412:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010416:	211c      	movs	r1, #28
 8010418:	200e      	movs	r0, #14
 801041a:	f7f8 fb31 	bl	8008a80 <pbuf_alloc>
 801041e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d102      	bne.n	801042c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010426:	f04f 33ff 	mov.w	r3, #4294967295
 801042a:	e05d      	b.n	80104e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	895b      	ldrh	r3, [r3, #10]
 8010430:	2b1b      	cmp	r3, #27
 8010432:	d806      	bhi.n	8010442 <etharp_raw+0x56>
 8010434:	4b2e      	ldr	r3, [pc, #184]	; (80104f0 <etharp_raw+0x104>)
 8010436:	f240 4263 	movw	r2, #1123	; 0x463
 801043a:	4930      	ldr	r1, [pc, #192]	; (80104fc <etharp_raw+0x110>)
 801043c:	482e      	ldr	r0, [pc, #184]	; (80104f8 <etharp_raw+0x10c>)
 801043e:	f001 fc6f 	bl	8011d20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010448:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801044a:	4618      	mov	r0, r3
 801044c:	f7f7 f9d6 	bl	80077fc <lwip_htons>
 8010450:	4603      	mov	r3, r0
 8010452:	461a      	mov	r2, r3
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801045e:	2b06      	cmp	r3, #6
 8010460:	d006      	beq.n	8010470 <etharp_raw+0x84>
 8010462:	4b23      	ldr	r3, [pc, #140]	; (80104f0 <etharp_raw+0x104>)
 8010464:	f240 426a 	movw	r2, #1130	; 0x46a
 8010468:	4925      	ldr	r1, [pc, #148]	; (8010500 <etharp_raw+0x114>)
 801046a:	4823      	ldr	r0, [pc, #140]	; (80104f8 <etharp_raw+0x10c>)
 801046c:	f001 fc58 	bl	8011d20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	3308      	adds	r3, #8
 8010474:	2206      	movs	r2, #6
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	4618      	mov	r0, r3
 801047a:	f001 fc3e 	bl	8011cfa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	3312      	adds	r3, #18
 8010482:	2206      	movs	r2, #6
 8010484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010486:	4618      	mov	r0, r3
 8010488:	f001 fc37 	bl	8011cfa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	330e      	adds	r3, #14
 8010490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010492:	6812      	ldr	r2, [r2, #0]
 8010494:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	3318      	adds	r3, #24
 801049a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801049c:	6812      	ldr	r2, [r2, #0]
 801049e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	2200      	movs	r2, #0
 80104a4:	701a      	strb	r2, [r3, #0]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f042 0201 	orr.w	r2, r2, #1
 80104ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f042 0208 	orr.w	r2, r2, #8
 80104b6:	709a      	strb	r2, [r3, #2]
 80104b8:	2200      	movs	r2, #0
 80104ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	2206      	movs	r2, #6
 80104c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	2204      	movs	r2, #4
 80104c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80104c8:	f640 0306 	movw	r3, #2054	; 0x806
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	69b9      	ldr	r1, [r7, #24]
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f001 fb95 	bl	8011c04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80104da:	69b8      	ldr	r0, [r7, #24]
 80104dc:	f7f8 fdb0 	bl	8009040 <pbuf_free>
  p = NULL;
 80104e0:	2300      	movs	r3, #0
 80104e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80104e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3720      	adds	r7, #32
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	08014eac 	.word	0x08014eac
 80104f4:	08014ffc 	.word	0x08014ffc
 80104f8:	08014f24 	.word	0x08014f24
 80104fc:	080150ac 	.word	0x080150ac
 8010500:	080150e0 	.word	0x080150e0

08010504 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b088      	sub	sp, #32
 8010508:	af04      	add	r7, sp, #16
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010520:	2201      	movs	r2, #1
 8010522:	9203      	str	r2, [sp, #12]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	9202      	str	r2, [sp, #8]
 8010528:	4a06      	ldr	r2, [pc, #24]	; (8010544 <etharp_request_dst+0x40>)
 801052a:	9201      	str	r2, [sp, #4]
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	4603      	mov	r3, r0
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f7ff ff5a 	bl	80103ec <etharp_raw>
 8010538:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801053a:	4618      	mov	r0, r3
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	08015680 	.word	0x08015680

08010548 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010552:	4a05      	ldr	r2, [pc, #20]	; (8010568 <etharp_request+0x20>)
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7ff ffd4 	bl	8010504 <etharp_request_dst>
 801055c:	4603      	mov	r3, r0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	08015678 	.word	0x08015678

0801056c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b08e      	sub	sp, #56	; 0x38
 8010570:	af04      	add	r7, sp, #16
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010576:	4b87      	ldr	r3, [pc, #540]	; (8010794 <icmp_input+0x228>)
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f003 030f 	and.w	r3, r3, #15
 8010584:	b2db      	uxtb	r3, r3
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	b2db      	uxtb	r3, r3
 801058a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801058c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801058e:	2b13      	cmp	r3, #19
 8010590:	f240 80e8 	bls.w	8010764 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	895b      	ldrh	r3, [r3, #10]
 8010598:	2b03      	cmp	r3, #3
 801059a:	f240 80e5 	bls.w	8010768 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80105a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 80d2 	beq.w	8010756 <icmp_input+0x1ea>
 80105b2:	2b08      	cmp	r3, #8
 80105b4:	f040 80d2 	bne.w	801075c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80105b8:	4b77      	ldr	r3, [pc, #476]	; (8010798 <icmp_input+0x22c>)
 80105ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80105bc:	4b75      	ldr	r3, [pc, #468]	; (8010794 <icmp_input+0x228>)
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105c4:	2be0      	cmp	r3, #224	; 0xe0
 80105c6:	f000 80d6 	beq.w	8010776 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80105ca:	4b72      	ldr	r3, [pc, #456]	; (8010794 <icmp_input+0x228>)
 80105cc:	695a      	ldr	r2, [r3, #20]
 80105ce:	4b71      	ldr	r3, [pc, #452]	; (8010794 <icmp_input+0x228>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4619      	mov	r1, r3
 80105d4:	4610      	mov	r0, r2
 80105d6:	f000 fc11 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f040 80cc 	bne.w	801077a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	891b      	ldrh	r3, [r3, #8]
 80105e6:	2b07      	cmp	r3, #7
 80105e8:	f240 80c0 	bls.w	801076c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7f7 f9a2 	bl	8007936 <inet_chksum_pbuf>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d003      	beq.n	8010600 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7f8 fd21 	bl	8009040 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80105fe:	e0c5      	b.n	801078c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010602:	330e      	adds	r3, #14
 8010604:	4619      	mov	r1, r3
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f7f8 fc84 	bl	8008f14 <pbuf_add_header>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d04b      	beq.n	80106aa <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	891a      	ldrh	r2, [r3, #8]
 8010616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010618:	4413      	add	r3, r2
 801061a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	891b      	ldrh	r3, [r3, #8]
 8010620:	8b7a      	ldrh	r2, [r7, #26]
 8010622:	429a      	cmp	r2, r3
 8010624:	f0c0 80ab 	bcc.w	801077e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010628:	8b7b      	ldrh	r3, [r7, #26]
 801062a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801062e:	4619      	mov	r1, r3
 8010630:	200e      	movs	r0, #14
 8010632:	f7f8 fa25 	bl	8008a80 <pbuf_alloc>
 8010636:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	f000 80a1 	beq.w	8010782 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	895b      	ldrh	r3, [r3, #10]
 8010644:	461a      	mov	r2, r3
 8010646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010648:	3308      	adds	r3, #8
 801064a:	429a      	cmp	r2, r3
 801064c:	d203      	bcs.n	8010656 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801064e:	6978      	ldr	r0, [r7, #20]
 8010650:	f7f8 fcf6 	bl	8009040 <pbuf_free>
          goto icmperr;
 8010654:	e096      	b.n	8010784 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801065c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801065e:	4618      	mov	r0, r3
 8010660:	f001 fb4b 	bl	8011cfa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010666:	4619      	mov	r1, r3
 8010668:	6978      	ldr	r0, [r7, #20]
 801066a:	f7f8 fc63 	bl	8008f34 <pbuf_remove_header>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d009      	beq.n	8010688 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010674:	4b49      	ldr	r3, [pc, #292]	; (801079c <icmp_input+0x230>)
 8010676:	22b6      	movs	r2, #182	; 0xb6
 8010678:	4949      	ldr	r1, [pc, #292]	; (80107a0 <icmp_input+0x234>)
 801067a:	484a      	ldr	r0, [pc, #296]	; (80107a4 <icmp_input+0x238>)
 801067c:	f001 fb50 	bl	8011d20 <iprintf>
          pbuf_free(r);
 8010680:	6978      	ldr	r0, [r7, #20]
 8010682:	f7f8 fcdd 	bl	8009040 <pbuf_free>
          goto icmperr;
 8010686:	e07d      	b.n	8010784 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	6978      	ldr	r0, [r7, #20]
 801068c:	f7f8 fe00 	bl	8009290 <pbuf_copy>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d003      	beq.n	801069e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010696:	6978      	ldr	r0, [r7, #20]
 8010698:	f7f8 fcd2 	bl	8009040 <pbuf_free>
          goto icmperr;
 801069c:	e072      	b.n	8010784 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f7f8 fcce 	bl	8009040 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	607b      	str	r3, [r7, #4]
 80106a8:	e00f      	b.n	80106ca <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80106aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106ac:	330e      	adds	r3, #14
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7f8 fc3f 	bl	8008f34 <pbuf_remove_header>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d006      	beq.n	80106ca <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80106bc:	4b37      	ldr	r3, [pc, #220]	; (801079c <icmp_input+0x230>)
 80106be:	22c7      	movs	r2, #199	; 0xc7
 80106c0:	4939      	ldr	r1, [pc, #228]	; (80107a8 <icmp_input+0x23c>)
 80106c2:	4838      	ldr	r0, [pc, #224]	; (80107a4 <icmp_input+0x238>)
 80106c4:	f001 fb2c 	bl	8011d20 <iprintf>
          goto icmperr;
 80106c8:	e05c      	b.n	8010784 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80106d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106d2:	4619      	mov	r1, r3
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7f8 fc1d 	bl	8008f14 <pbuf_add_header>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d13c      	bne.n	801075a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80106ee:	4b29      	ldr	r3, [pc, #164]	; (8010794 <icmp_input+0x228>)
 80106f0:	691a      	ldr	r2, [r3, #16]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2200      	movs	r2, #0
 80106fa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	885b      	ldrh	r3, [r3, #2]
 8010700:	b29b      	uxth	r3, r3
 8010702:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010706:	4293      	cmp	r3, r2
 8010708:	d907      	bls.n	801071a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	885b      	ldrh	r3, [r3, #2]
 801070e:	b29b      	uxth	r3, r3
 8010710:	3309      	adds	r3, #9
 8010712:	b29a      	uxth	r2, r3
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	805a      	strh	r2, [r3, #2]
 8010718:	e006      	b.n	8010728 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	885b      	ldrh	r3, [r3, #2]
 801071e:	b29b      	uxth	r3, r3
 8010720:	3308      	adds	r3, #8
 8010722:	b29a      	uxth	r2, r3
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	22ff      	movs	r2, #255	; 0xff
 801072c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	729a      	strb	r2, [r3, #10]
 8010734:	2200      	movs	r2, #0
 8010736:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	9302      	str	r3, [sp, #8]
 801073c:	2301      	movs	r3, #1
 801073e:	9301      	str	r3, [sp, #4]
 8010740:	2300      	movs	r3, #0
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	23ff      	movs	r3, #255	; 0xff
 8010746:	2200      	movs	r2, #0
 8010748:	69f9      	ldr	r1, [r7, #28]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fa7e 	bl	8010c4c <ip4_output_if>
 8010750:	4603      	mov	r3, r0
 8010752:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010754:	e001      	b.n	801075a <icmp_input+0x1ee>
      break;
 8010756:	bf00      	nop
 8010758:	e000      	b.n	801075c <icmp_input+0x1f0>
      break;
 801075a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f7f8 fc6f 	bl	8009040 <pbuf_free>
  return;
 8010762:	e013      	b.n	801078c <icmp_input+0x220>
    goto lenerr;
 8010764:	bf00      	nop
 8010766:	e002      	b.n	801076e <icmp_input+0x202>
    goto lenerr;
 8010768:	bf00      	nop
 801076a:	e000      	b.n	801076e <icmp_input+0x202>
        goto lenerr;
 801076c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7f8 fc66 	bl	8009040 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010774:	e00a      	b.n	801078c <icmp_input+0x220>
        goto icmperr;
 8010776:	bf00      	nop
 8010778:	e004      	b.n	8010784 <icmp_input+0x218>
        goto icmperr;
 801077a:	bf00      	nop
 801077c:	e002      	b.n	8010784 <icmp_input+0x218>
          goto icmperr;
 801077e:	bf00      	nop
 8010780:	e000      	b.n	8010784 <icmp_input+0x218>
          goto icmperr;
 8010782:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7f8 fc5b 	bl	8009040 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801078a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801078c:	3728      	adds	r7, #40	; 0x28
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	24000520 	.word	0x24000520
 8010798:	24000534 	.word	0x24000534
 801079c:	08015124 	.word	0x08015124
 80107a0:	0801515c 	.word	0x0801515c
 80107a4:	08015194 	.word	0x08015194
 80107a8:	080151bc 	.word	0x080151bc

080107ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	460b      	mov	r3, r1
 80107b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80107b8:	78fb      	ldrb	r3, [r7, #3]
 80107ba:	461a      	mov	r2, r3
 80107bc:	2103      	movs	r1, #3
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f814 	bl	80107ec <icmp_send_response>
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80107d8:	78fb      	ldrb	r3, [r7, #3]
 80107da:	461a      	mov	r2, r3
 80107dc:	210b      	movs	r1, #11
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f804 	bl	80107ec <icmp_send_response>
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08c      	sub	sp, #48	; 0x30
 80107f0:	af04      	add	r7, sp, #16
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	460b      	mov	r3, r1
 80107f6:	70fb      	strb	r3, [r7, #3]
 80107f8:	4613      	mov	r3, r2
 80107fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80107fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010800:	2124      	movs	r1, #36	; 0x24
 8010802:	20a4      	movs	r0, #164	; 0xa4
 8010804:	f7f8 f93c 	bl	8008a80 <pbuf_alloc>
 8010808:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d056      	beq.n	80108be <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	895b      	ldrh	r3, [r3, #10]
 8010814:	2b23      	cmp	r3, #35	; 0x23
 8010816:	d806      	bhi.n	8010826 <icmp_send_response+0x3a>
 8010818:	4b2b      	ldr	r3, [pc, #172]	; (80108c8 <icmp_send_response+0xdc>)
 801081a:	f240 1269 	movw	r2, #361	; 0x169
 801081e:	492b      	ldr	r1, [pc, #172]	; (80108cc <icmp_send_response+0xe0>)
 8010820:	482b      	ldr	r0, [pc, #172]	; (80108d0 <icmp_send_response+0xe4>)
 8010822:	f001 fa7d 	bl	8011d20 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	78fa      	ldrb	r2, [r7, #3]
 8010836:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	78ba      	ldrb	r2, [r7, #2]
 801083c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2200      	movs	r2, #0
 8010842:	711a      	strb	r2, [r3, #4]
 8010844:	2200      	movs	r2, #0
 8010846:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	2200      	movs	r2, #0
 801084c:	719a      	strb	r2, [r3, #6]
 801084e:	2200      	movs	r2, #0
 8010850:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	f103 0008 	add.w	r0, r3, #8
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	221c      	movs	r2, #28
 8010860:	4619      	mov	r1, r3
 8010862:	f001 fa4a 	bl	8011cfa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801086c:	f107 030c 	add.w	r3, r7, #12
 8010870:	4618      	mov	r0, r3
 8010872:	f000 f82f 	bl	80108d4 <ip4_route>
 8010876:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d01b      	beq.n	80108b6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2200      	movs	r2, #0
 8010882:	709a      	strb	r2, [r3, #2]
 8010884:	2200      	movs	r2, #0
 8010886:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	895b      	ldrh	r3, [r3, #10]
 801088c:	4619      	mov	r1, r3
 801088e:	6978      	ldr	r0, [r7, #20]
 8010890:	f7f7 f83f 	bl	8007912 <inet_chksum>
 8010894:	4603      	mov	r3, r0
 8010896:	461a      	mov	r2, r3
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801089c:	f107 020c 	add.w	r2, r7, #12
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	9302      	str	r3, [sp, #8]
 80108a4:	2301      	movs	r3, #1
 80108a6:	9301      	str	r3, [sp, #4]
 80108a8:	2300      	movs	r3, #0
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	23ff      	movs	r3, #255	; 0xff
 80108ae:	2100      	movs	r1, #0
 80108b0:	69f8      	ldr	r0, [r7, #28]
 80108b2:	f000 f9cb 	bl	8010c4c <ip4_output_if>
  }
  pbuf_free(q);
 80108b6:	69f8      	ldr	r0, [r7, #28]
 80108b8:	f7f8 fbc2 	bl	8009040 <pbuf_free>
 80108bc:	e000      	b.n	80108c0 <icmp_send_response+0xd4>
    return;
 80108be:	bf00      	nop
}
 80108c0:	3720      	adds	r7, #32
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	08015124 	.word	0x08015124
 80108cc:	080151f0 	.word	0x080151f0
 80108d0:	08015194 	.word	0x08015194

080108d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80108dc:	4b33      	ldr	r3, [pc, #204]	; (80109ac <ip4_route+0xd8>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	e036      	b.n	8010952 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108ea:	f003 0301 	and.w	r3, r3, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d02b      	beq.n	801094c <ip4_route+0x78>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108fa:	089b      	lsrs	r3, r3, #2
 80108fc:	f003 0301 	and.w	r3, r3, #1
 8010900:	b2db      	uxtb	r3, r3
 8010902:	2b00      	cmp	r3, #0
 8010904:	d022      	beq.n	801094c <ip4_route+0x78>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	3304      	adds	r3, #4
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d01d      	beq.n	801094c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	3304      	adds	r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	405a      	eors	r2, r3
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	3308      	adds	r3, #8
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4013      	ands	r3, r2
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	e038      	b.n	801099e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010932:	f003 0302 	and.w	r3, r3, #2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d108      	bne.n	801094c <ip4_route+0x78>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	330c      	adds	r3, #12
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	429a      	cmp	r2, r3
 8010946:	d101      	bne.n	801094c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	e028      	b.n	801099e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	60fb      	str	r3, [r7, #12]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1c5      	bne.n	80108e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010958:	4b15      	ldr	r3, [pc, #84]	; (80109b0 <ip4_route+0xdc>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01a      	beq.n	8010996 <ip4_route+0xc2>
 8010960:	4b13      	ldr	r3, [pc, #76]	; (80109b0 <ip4_route+0xdc>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010968:	f003 0301 	and.w	r3, r3, #1
 801096c:	2b00      	cmp	r3, #0
 801096e:	d012      	beq.n	8010996 <ip4_route+0xc2>
 8010970:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <ip4_route+0xdc>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010978:	f003 0304 	and.w	r3, r3, #4
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00a      	beq.n	8010996 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010980:	4b0b      	ldr	r3, [pc, #44]	; (80109b0 <ip4_route+0xdc>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3304      	adds	r3, #4
 8010986:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010988:	2b00      	cmp	r3, #0
 801098a:	d004      	beq.n	8010996 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	b2db      	uxtb	r3, r3
 8010992:	2b7f      	cmp	r3, #127	; 0x7f
 8010994:	d101      	bne.n	801099a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010996:	2300      	movs	r3, #0
 8010998:	e001      	b.n	801099e <ip4_route+0xca>
  }

  return netif_default;
 801099a:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <ip4_route+0xdc>)
 801099c:	681b      	ldr	r3, [r3, #0]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3714      	adds	r7, #20
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	24003400 	.word	0x24003400
 80109b0:	24003404 	.word	0x24003404

080109b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109c2:	f003 0301 	and.w	r3, r3, #1
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d016      	beq.n	80109fa <ip4_input_accept+0x46>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3304      	adds	r3, #4
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d011      	beq.n	80109fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80109d6:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <ip4_input_accept+0x50>)
 80109d8:	695a      	ldr	r2, [r3, #20]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	3304      	adds	r3, #4
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d008      	beq.n	80109f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80109e4:	4b07      	ldr	r3, [pc, #28]	; (8010a04 <ip4_input_accept+0x50>)
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	6879      	ldr	r1, [r7, #4]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f000 fa06 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 80109f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d001      	beq.n	80109fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80109f6:	2301      	movs	r3, #1
 80109f8:	e000      	b.n	80109fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	24000520 	.word	0x24000520

08010a08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b086      	sub	sp, #24
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	091b      	lsrs	r3, r3, #4
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b04      	cmp	r3, #4
 8010a22:	d004      	beq.n	8010a2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7f8 fb0b 	bl	8009040 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	e105      	b.n	8010c3a <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	f003 030f 	and.w	r3, r3, #15
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	885b      	ldrh	r3, [r3, #2]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7f6 fed9 	bl	80077fc <lwip_htons>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	891b      	ldrh	r3, [r3, #8]
 8010a52:	89ba      	ldrh	r2, [r7, #12]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d204      	bcs.n	8010a62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010a58:	89bb      	ldrh	r3, [r7, #12]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7f8 f969 	bl	8008d34 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	895b      	ldrh	r3, [r3, #10]
 8010a66:	89fa      	ldrh	r2, [r7, #14]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d807      	bhi.n	8010a7c <ip4_input+0x74>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	891b      	ldrh	r3, [r3, #8]
 8010a70:	89ba      	ldrh	r2, [r7, #12]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d802      	bhi.n	8010a7c <ip4_input+0x74>
 8010a76:	89fb      	ldrh	r3, [r7, #14]
 8010a78:	2b13      	cmp	r3, #19
 8010a7a:	d804      	bhi.n	8010a86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f7f8 fadf 	bl	8009040 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	e0d9      	b.n	8010c3a <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	4a6e      	ldr	r2, [pc, #440]	; (8010c44 <ip4_input+0x23c>)
 8010a8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	4a6c      	ldr	r2, [pc, #432]	; (8010c44 <ip4_input+0x23c>)
 8010a94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010a96:	4b6b      	ldr	r3, [pc, #428]	; (8010c44 <ip4_input+0x23c>)
 8010a98:	695b      	ldr	r3, [r3, #20]
 8010a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a9e:	2be0      	cmp	r3, #224	; 0xe0
 8010aa0:	d112      	bne.n	8010ac8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d007      	beq.n	8010ac2 <ip4_input+0xba>
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d002      	beq.n	8010ac2 <ip4_input+0xba>
      netif = inp;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	613b      	str	r3, [r7, #16]
 8010ac0:	e02a      	b.n	8010b18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	613b      	str	r3, [r7, #16]
 8010ac6:	e027      	b.n	8010b18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010ac8:	6838      	ldr	r0, [r7, #0]
 8010aca:	f7ff ff73 	bl	80109b4 <ip4_input_accept>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d002      	beq.n	8010ada <ip4_input+0xd2>
      netif = inp;
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	613b      	str	r3, [r7, #16]
 8010ad8:	e01e      	b.n	8010b18 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010ade:	4b59      	ldr	r3, [pc, #356]	; (8010c44 <ip4_input+0x23c>)
 8010ae0:	695b      	ldr	r3, [r3, #20]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8010ae6:	d017      	beq.n	8010b18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010ae8:	4b57      	ldr	r3, [pc, #348]	; (8010c48 <ip4_input+0x240>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	613b      	str	r3, [r7, #16]
 8010aee:	e00e      	b.n	8010b0e <ip4_input+0x106>
          if (netif == inp) {
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d006      	beq.n	8010b06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010af8:	6938      	ldr	r0, [r7, #16]
 8010afa:	f7ff ff5b 	bl	80109b4 <ip4_input_accept>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d108      	bne.n	8010b16 <ip4_input+0x10e>
 8010b04:	e000      	b.n	8010b08 <ip4_input+0x100>
            continue;
 8010b06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	613b      	str	r3, [r7, #16]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1ed      	bne.n	8010af0 <ip4_input+0xe8>
 8010b14:	e000      	b.n	8010b18 <ip4_input+0x110>
            break;
 8010b16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010b18:	4b4a      	ldr	r3, [pc, #296]	; (8010c44 <ip4_input+0x23c>)
 8010b1a:	691b      	ldr	r3, [r3, #16]
 8010b1c:	6839      	ldr	r1, [r7, #0]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f000 f96c 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d105      	bne.n	8010b36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010b2a:	4b46      	ldr	r3, [pc, #280]	; (8010c44 <ip4_input+0x23c>)
 8010b2c:	691b      	ldr	r3, [r3, #16]
 8010b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010b32:	2be0      	cmp	r3, #224	; 0xe0
 8010b34:	d104      	bne.n	8010b40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7f8 fa82 	bl	8009040 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	e07c      	b.n	8010c3a <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d104      	bne.n	8010b50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f7f8 fa7a 	bl	8009040 <pbuf_free>
    return ERR_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	e074      	b.n	8010c3a <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	88db      	ldrh	r3, [r3, #6]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	461a      	mov	r2, r3
 8010b58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00b      	beq.n	8010b7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 fc90 	bl	8011488 <ip4_reass>
 8010b68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d101      	bne.n	8010b74 <ip4_input+0x16c>
      return ERR_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	e062      	b.n	8010c3a <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010b7a:	4a32      	ldr	r2, [pc, #200]	; (8010c44 <ip4_input+0x23c>)
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010b80:	4a30      	ldr	r2, [pc, #192]	; (8010c44 <ip4_input+0x23c>)
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010b86:	4a2f      	ldr	r2, [pc, #188]	; (8010c44 <ip4_input+0x23c>)
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	f003 030f 	and.w	r3, r3, #15
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	4b29      	ldr	r3, [pc, #164]	; (8010c44 <ip4_input+0x23c>)
 8010b9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010ba0:	89fb      	ldrh	r3, [r7, #14]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7f8 f9c5 	bl	8008f34 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	7a5b      	ldrb	r3, [r3, #9]
 8010bae:	2b06      	cmp	r3, #6
 8010bb0:	d009      	beq.n	8010bc6 <ip4_input+0x1be>
 8010bb2:	2b11      	cmp	r3, #17
 8010bb4:	d002      	beq.n	8010bbc <ip4_input+0x1b4>
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d00a      	beq.n	8010bd0 <ip4_input+0x1c8>
 8010bba:	e00e      	b.n	8010bda <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010bbc:	6839      	ldr	r1, [r7, #0]
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7fe f8c2 	bl	800ed48 <udp_input>
        break;
 8010bc4:	e026      	b.n	8010c14 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7fa f8f7 	bl	800adbc <tcp_input>
        break;
 8010bce:	e021      	b.n	8010c14 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010bd0:	6839      	ldr	r1, [r7, #0]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff fcca 	bl	801056c <icmp_input>
        break;
 8010bd8:	e01c      	b.n	8010c14 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010bda:	4b1a      	ldr	r3, [pc, #104]	; (8010c44 <ip4_input+0x23c>)
 8010bdc:	695b      	ldr	r3, [r3, #20]
 8010bde:	6939      	ldr	r1, [r7, #16]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f90b 	bl	8010dfc <ip4_addr_isbroadcast_u32>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10f      	bne.n	8010c0c <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010bec:	4b15      	ldr	r3, [pc, #84]	; (8010c44 <ip4_input+0x23c>)
 8010bee:	695b      	ldr	r3, [r3, #20]
 8010bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010bf4:	2be0      	cmp	r3, #224	; 0xe0
 8010bf6:	d009      	beq.n	8010c0c <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7f8 fa0b 	bl	800901a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010c04:	2102      	movs	r1, #2
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7ff fdd0 	bl	80107ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7f8 fa17 	bl	8009040 <pbuf_free>
        break;
 8010c12:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010c14:	4b0b      	ldr	r3, [pc, #44]	; (8010c44 <ip4_input+0x23c>)
 8010c16:	2200      	movs	r2, #0
 8010c18:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010c1a:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <ip4_input+0x23c>)
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010c20:	4b08      	ldr	r3, [pc, #32]	; (8010c44 <ip4_input+0x23c>)
 8010c22:	2200      	movs	r2, #0
 8010c24:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010c26:	4b07      	ldr	r3, [pc, #28]	; (8010c44 <ip4_input+0x23c>)
 8010c28:	2200      	movs	r2, #0
 8010c2a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010c2c:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <ip4_input+0x23c>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010c32:	4b04      	ldr	r3, [pc, #16]	; (8010c44 <ip4_input+0x23c>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010c38:	2300      	movs	r3, #0
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	24000520 	.word	0x24000520
 8010c48:	24003400 	.word	0x24003400

08010c4c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b08a      	sub	sp, #40	; 0x28
 8010c50:	af04      	add	r7, sp, #16
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	607a      	str	r2, [r7, #4]
 8010c58:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d009      	beq.n	8010c78 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <ip4_output_if+0x26>
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d102      	bne.n	8010c78 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c74:	3304      	adds	r3, #4
 8010c76:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010c78:	78fa      	ldrb	r2, [r7, #3]
 8010c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7c:	9302      	str	r3, [sp, #8]
 8010c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c82:	9301      	str	r3, [sp, #4]
 8010c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	6979      	ldr	r1, [r7, #20]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f000 f805 	bl	8010ca0 <ip4_output_if_src>
 8010c96:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	7b9b      	ldrb	r3, [r3, #14]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d006      	beq.n	8010cc4 <ip4_output_if_src+0x24>
 8010cb6:	4b4b      	ldr	r3, [pc, #300]	; (8010de4 <ip4_output_if_src+0x144>)
 8010cb8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010cbc:	494a      	ldr	r1, [pc, #296]	; (8010de8 <ip4_output_if_src+0x148>)
 8010cbe:	484b      	ldr	r0, [pc, #300]	; (8010dec <ip4_output_if_src+0x14c>)
 8010cc0:	f001 f82e 	bl	8011d20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d060      	beq.n	8010d8c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010cca:	2314      	movs	r3, #20
 8010ccc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010cce:	2114      	movs	r1, #20
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f7f8 f91f 	bl	8008f14 <pbuf_add_header>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d002      	beq.n	8010ce2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010cdc:	f06f 0301 	mvn.w	r3, #1
 8010ce0:	e07c      	b.n	8010ddc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	895b      	ldrh	r3, [r3, #10]
 8010cec:	2b13      	cmp	r3, #19
 8010cee:	d806      	bhi.n	8010cfe <ip4_output_if_src+0x5e>
 8010cf0:	4b3c      	ldr	r3, [pc, #240]	; (8010de4 <ip4_output_if_src+0x144>)
 8010cf2:	f240 3289 	movw	r2, #905	; 0x389
 8010cf6:	493e      	ldr	r1, [pc, #248]	; (8010df0 <ip4_output_if_src+0x150>)
 8010cf8:	483c      	ldr	r0, [pc, #240]	; (8010dec <ip4_output_if_src+0x14c>)
 8010cfa:	f001 f811 	bl	8011d20 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	78fa      	ldrb	r2, [r7, #3]
 8010d02:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010d0a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010d14:	8b7b      	ldrh	r3, [r7, #26]
 8010d16:	089b      	lsrs	r3, r3, #2
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d20:	b2da      	uxtb	r2, r3
 8010d22:	69fb      	ldr	r3, [r7, #28]
 8010d24:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010d2c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	891b      	ldrh	r3, [r3, #8]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7f6 fd62 	bl	80077fc <lwip_htons>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	2200      	movs	r2, #0
 8010d44:	719a      	strb	r2, [r3, #6]
 8010d46:	2200      	movs	r2, #0
 8010d48:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010d4a:	4b2a      	ldr	r3, [pc, #168]	; (8010df4 <ip4_output_if_src+0x154>)
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7f6 fd54 	bl	80077fc <lwip_htons>
 8010d54:	4603      	mov	r3, r0
 8010d56:	461a      	mov	r2, r3
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010d5c:	4b25      	ldr	r3, [pc, #148]	; (8010df4 <ip4_output_if_src+0x154>)
 8010d5e:	881b      	ldrh	r3, [r3, #0]
 8010d60:	3301      	adds	r3, #1
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	4b23      	ldr	r3, [pc, #140]	; (8010df4 <ip4_output_if_src+0x154>)
 8010d66:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d104      	bne.n	8010d78 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010d6e:	4b22      	ldr	r3, [pc, #136]	; (8010df8 <ip4_output_if_src+0x158>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	60da      	str	r2, [r3, #12]
 8010d76:	e003      	b.n	8010d80 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	2200      	movs	r2, #0
 8010d84:	729a      	strb	r2, [r3, #10]
 8010d86:	2200      	movs	r2, #0
 8010d88:	72da      	strb	r2, [r3, #11]
 8010d8a:	e00f      	b.n	8010dac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	895b      	ldrh	r3, [r3, #10]
 8010d90:	2b13      	cmp	r3, #19
 8010d92:	d802      	bhi.n	8010d9a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010d94:	f06f 0301 	mvn.w	r3, #1
 8010d98:	e020      	b.n	8010ddc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	691b      	ldr	r3, [r3, #16]
 8010da4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010da6:	f107 0314 	add.w	r3, r7, #20
 8010daa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d00c      	beq.n	8010dce <ip4_output_if_src+0x12e>
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	891a      	ldrh	r2, [r3, #8]
 8010db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d906      	bls.n	8010dce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f000 fd4b 	bl	8011860 <ip4_frag>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	e006      	b.n	8010ddc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd0:	695b      	ldr	r3, [r3, #20]
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	68f9      	ldr	r1, [r7, #12]
 8010dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd8:	4798      	blx	r3
 8010dda:	4603      	mov	r3, r0
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3720      	adds	r7, #32
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	0801521c 	.word	0x0801521c
 8010de8:	08015250 	.word	0x08015250
 8010dec:	0801525c 	.word	0x0801525c
 8010df0:	08015284 	.word	0x08015284
 8010df4:	24000222 	.word	0x24000222
 8010df8:	08015674 	.word	0x08015674

08010dfc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e10:	d002      	beq.n	8010e18 <ip4_addr_isbroadcast_u32+0x1c>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d101      	bne.n	8010e1c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e02a      	b.n	8010e72 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e22:	f003 0302 	and.w	r3, r3, #2
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d101      	bne.n	8010e2e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	e021      	b.n	8010e72 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	3304      	adds	r3, #4
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d101      	bne.n	8010e3e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	e019      	b.n	8010e72 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	3304      	adds	r3, #4
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	405a      	eors	r2, r3
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	3308      	adds	r3, #8
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4013      	ands	r3, r2
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d10d      	bne.n	8010e70 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	3308      	adds	r3, #8
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	43da      	mvns	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	3308      	adds	r3, #8
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d101      	bne.n	8010e70 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	e000      	b.n	8010e72 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010e70:	2300      	movs	r3, #0
  }
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
	...

08010e80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010e8a:	4b12      	ldr	r3, [pc, #72]	; (8010ed4 <ip_reass_tmr+0x54>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010e90:	e018      	b.n	8010ec4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	7fdb      	ldrb	r3, [r3, #31]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00b      	beq.n	8010eb2 <ip_reass_tmr+0x32>
      r->timer--;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	7fdb      	ldrb	r3, [r3, #31]
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	b2da      	uxtb	r2, r3
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	60fb      	str	r3, [r7, #12]
 8010eb0:	e008      	b.n	8010ec4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010ebc:	68b9      	ldr	r1, [r7, #8]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f80a 	bl	8010ed8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1e3      	bne.n	8010e92 <ip_reass_tmr+0x12>
    }
  }
}
 8010eca:	bf00      	nop
 8010ecc:	3710      	adds	r7, #16
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	24000224 	.word	0x24000224

08010ed8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b088      	sub	sp, #32
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d105      	bne.n	8010efa <ip_reass_free_complete_datagram+0x22>
 8010eee:	4b45      	ldr	r3, [pc, #276]	; (8011004 <ip_reass_free_complete_datagram+0x12c>)
 8010ef0:	22ab      	movs	r2, #171	; 0xab
 8010ef2:	4945      	ldr	r1, [pc, #276]	; (8011008 <ip_reass_free_complete_datagram+0x130>)
 8010ef4:	4845      	ldr	r0, [pc, #276]	; (801100c <ip_reass_free_complete_datagram+0x134>)
 8010ef6:	f000 ff13 	bl	8011d20 <iprintf>
  if (prev != NULL) {
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00a      	beq.n	8010f16 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d005      	beq.n	8010f16 <ip_reass_free_complete_datagram+0x3e>
 8010f0a:	4b3e      	ldr	r3, [pc, #248]	; (8011004 <ip_reass_free_complete_datagram+0x12c>)
 8010f0c:	22ad      	movs	r2, #173	; 0xad
 8010f0e:	4940      	ldr	r1, [pc, #256]	; (8011010 <ip_reass_free_complete_datagram+0x138>)
 8010f10:	483e      	ldr	r0, [pc, #248]	; (801100c <ip_reass_free_complete_datagram+0x134>)
 8010f12:	f000 ff05 	bl	8011d20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	889b      	ldrh	r3, [r3, #4]
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d12a      	bne.n	8010f7e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	6858      	ldr	r0, [r3, #4]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	3308      	adds	r3, #8
 8010f3e:	2214      	movs	r2, #20
 8010f40:	4619      	mov	r1, r3
 8010f42:	f000 feda 	bl	8011cfa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010f46:	2101      	movs	r1, #1
 8010f48:	69b8      	ldr	r0, [r7, #24]
 8010f4a:	f7ff fc3f 	bl	80107cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010f4e:	69b8      	ldr	r0, [r7, #24]
 8010f50:	f7f8 f8fe 	bl	8009150 <pbuf_clen>
 8010f54:	4603      	mov	r3, r0
 8010f56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010f58:	8bfa      	ldrh	r2, [r7, #30]
 8010f5a:	8a7b      	ldrh	r3, [r7, #18]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f62:	db05      	blt.n	8010f70 <ip_reass_free_complete_datagram+0x98>
 8010f64:	4b27      	ldr	r3, [pc, #156]	; (8011004 <ip_reass_free_complete_datagram+0x12c>)
 8010f66:	22bc      	movs	r2, #188	; 0xbc
 8010f68:	492a      	ldr	r1, [pc, #168]	; (8011014 <ip_reass_free_complete_datagram+0x13c>)
 8010f6a:	4828      	ldr	r0, [pc, #160]	; (801100c <ip_reass_free_complete_datagram+0x134>)
 8010f6c:	f000 fed8 	bl	8011d20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010f70:	8bfa      	ldrh	r2, [r7, #30]
 8010f72:	8a7b      	ldrh	r3, [r7, #18]
 8010f74:	4413      	add	r3, r2
 8010f76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010f78:	69b8      	ldr	r0, [r7, #24]
 8010f7a:	f7f8 f861 	bl	8009040 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010f84:	e01f      	b.n	8010fc6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f7f8 f8da 	bl	8009150 <pbuf_clen>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010fa0:	8bfa      	ldrh	r2, [r7, #30]
 8010fa2:	8a7b      	ldrh	r3, [r7, #18]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010faa:	db05      	blt.n	8010fb8 <ip_reass_free_complete_datagram+0xe0>
 8010fac:	4b15      	ldr	r3, [pc, #84]	; (8011004 <ip_reass_free_complete_datagram+0x12c>)
 8010fae:	22cc      	movs	r2, #204	; 0xcc
 8010fb0:	4918      	ldr	r1, [pc, #96]	; (8011014 <ip_reass_free_complete_datagram+0x13c>)
 8010fb2:	4816      	ldr	r0, [pc, #88]	; (801100c <ip_reass_free_complete_datagram+0x134>)
 8010fb4:	f000 feb4 	bl	8011d20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010fb8:	8bfa      	ldrh	r2, [r7, #30]
 8010fba:	8a7b      	ldrh	r3, [r7, #18]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7f8 f83d 	bl	8009040 <pbuf_free>
  while (p != NULL) {
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1dc      	bne.n	8010f86 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f8c2 	bl	8011158 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010fd4:	4b10      	ldr	r3, [pc, #64]	; (8011018 <ip_reass_free_complete_datagram+0x140>)
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	8bfa      	ldrh	r2, [r7, #30]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d905      	bls.n	8010fea <ip_reass_free_complete_datagram+0x112>
 8010fde:	4b09      	ldr	r3, [pc, #36]	; (8011004 <ip_reass_free_complete_datagram+0x12c>)
 8010fe0:	22d2      	movs	r2, #210	; 0xd2
 8010fe2:	490e      	ldr	r1, [pc, #56]	; (801101c <ip_reass_free_complete_datagram+0x144>)
 8010fe4:	4809      	ldr	r0, [pc, #36]	; (801100c <ip_reass_free_complete_datagram+0x134>)
 8010fe6:	f000 fe9b 	bl	8011d20 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010fea:	4b0b      	ldr	r3, [pc, #44]	; (8011018 <ip_reass_free_complete_datagram+0x140>)
 8010fec:	881a      	ldrh	r2, [r3, #0]
 8010fee:	8bfb      	ldrh	r3, [r7, #30]
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	4b08      	ldr	r3, [pc, #32]	; (8011018 <ip_reass_free_complete_datagram+0x140>)
 8010ff6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010ff8:	8bfb      	ldrh	r3, [r7, #30]
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3720      	adds	r7, #32
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	080152b4 	.word	0x080152b4
 8011008:	080152f0 	.word	0x080152f0
 801100c:	080152fc 	.word	0x080152fc
 8011010:	08015324 	.word	0x08015324
 8011014:	08015338 	.word	0x08015338
 8011018:	24000228 	.word	0x24000228
 801101c:	08015358 	.word	0x08015358

08011020 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b08a      	sub	sp, #40	; 0x28
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801102a:	2300      	movs	r3, #0
 801102c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801102e:	2300      	movs	r3, #0
 8011030:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011032:	2300      	movs	r3, #0
 8011034:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011036:	2300      	movs	r3, #0
 8011038:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801103e:	4b28      	ldr	r3, [pc, #160]	; (80110e0 <ip_reass_remove_oldest_datagram+0xc0>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011044:	e030      	b.n	80110a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011048:	695a      	ldr	r2, [r3, #20]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	429a      	cmp	r2, r3
 8011050:	d10c      	bne.n	801106c <ip_reass_remove_oldest_datagram+0x4c>
 8011052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011054:	699a      	ldr	r2, [r3, #24]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	429a      	cmp	r2, r3
 801105c:	d106      	bne.n	801106c <ip_reass_remove_oldest_datagram+0x4c>
 801105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011060:	899a      	ldrh	r2, [r3, #12]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	889b      	ldrh	r3, [r3, #4]
 8011066:	b29b      	uxth	r3, r3
 8011068:	429a      	cmp	r2, r3
 801106a:	d014      	beq.n	8011096 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	3301      	adds	r3, #1
 8011070:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011072:	6a3b      	ldr	r3, [r7, #32]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d104      	bne.n	8011082 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	61bb      	str	r3, [r7, #24]
 8011080:	e009      	b.n	8011096 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011084:	7fda      	ldrb	r2, [r3, #31]
 8011086:	6a3b      	ldr	r3, [r7, #32]
 8011088:	7fdb      	ldrb	r3, [r3, #31]
 801108a:	429a      	cmp	r2, r3
 801108c:	d803      	bhi.n	8011096 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011090:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80110a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1cb      	bne.n	8011046 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80110ae:	6a3b      	ldr	r3, [r7, #32]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d008      	beq.n	80110c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80110b4:	69b9      	ldr	r1, [r7, #24]
 80110b6:	6a38      	ldr	r0, [r7, #32]
 80110b8:	f7ff ff0e 	bl	8010ed8 <ip_reass_free_complete_datagram>
 80110bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80110be:	697a      	ldr	r2, [r7, #20]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	4413      	add	r3, r2
 80110c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80110c6:	697a      	ldr	r2, [r7, #20]
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	da02      	bge.n	80110d4 <ip_reass_remove_oldest_datagram+0xb4>
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	dcac      	bgt.n	801102e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80110d4:	697b      	ldr	r3, [r7, #20]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3728      	adds	r7, #40	; 0x28
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	24000224 	.word	0x24000224

080110e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80110ee:	2004      	movs	r0, #4
 80110f0:	f7f7 f8c4 	bl	800827c <memp_malloc>
 80110f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d110      	bne.n	801111e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80110fc:	6839      	ldr	r1, [r7, #0]
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7ff ff8e 	bl	8011020 <ip_reass_remove_oldest_datagram>
 8011104:	4602      	mov	r2, r0
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	4293      	cmp	r3, r2
 801110a:	dc03      	bgt.n	8011114 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801110c:	2004      	movs	r0, #4
 801110e:	f7f7 f8b5 	bl	800827c <memp_malloc>
 8011112:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801111a:	2300      	movs	r3, #0
 801111c:	e016      	b.n	801114c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801111e:	2220      	movs	r2, #32
 8011120:	2100      	movs	r1, #0
 8011122:	68f8      	ldr	r0, [r7, #12]
 8011124:	f000 fdf4 	bl	8011d10 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	220f      	movs	r2, #15
 801112c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801112e:	4b09      	ldr	r3, [pc, #36]	; (8011154 <ip_reass_enqueue_new_datagram+0x70>)
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011136:	4a07      	ldr	r2, [pc, #28]	; (8011154 <ip_reass_enqueue_new_datagram+0x70>)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	3308      	adds	r3, #8
 8011140:	2214      	movs	r2, #20
 8011142:	6879      	ldr	r1, [r7, #4]
 8011144:	4618      	mov	r0, r3
 8011146:	f000 fdd8 	bl	8011cfa <memcpy>
  return ipr;
 801114a:	68fb      	ldr	r3, [r7, #12]
}
 801114c:	4618      	mov	r0, r3
 801114e:	3710      	adds	r7, #16
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	24000224 	.word	0x24000224

08011158 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011162:	4b10      	ldr	r3, [pc, #64]	; (80111a4 <ip_reass_dequeue_datagram+0x4c>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	429a      	cmp	r2, r3
 801116a:	d104      	bne.n	8011176 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4a0c      	ldr	r2, [pc, #48]	; (80111a4 <ip_reass_dequeue_datagram+0x4c>)
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	e00d      	b.n	8011192 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d106      	bne.n	801118a <ip_reass_dequeue_datagram+0x32>
 801117c:	4b0a      	ldr	r3, [pc, #40]	; (80111a8 <ip_reass_dequeue_datagram+0x50>)
 801117e:	f240 1245 	movw	r2, #325	; 0x145
 8011182:	490a      	ldr	r1, [pc, #40]	; (80111ac <ip_reass_dequeue_datagram+0x54>)
 8011184:	480a      	ldr	r0, [pc, #40]	; (80111b0 <ip_reass_dequeue_datagram+0x58>)
 8011186:	f000 fdcb 	bl	8011d20 <iprintf>
    prev->next = ipr->next;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011192:	6879      	ldr	r1, [r7, #4]
 8011194:	2004      	movs	r0, #4
 8011196:	f7f7 f8e1 	bl	800835c <memp_free>
}
 801119a:	bf00      	nop
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	24000224 	.word	0x24000224
 80111a8:	080152b4 	.word	0x080152b4
 80111ac:	0801537c 	.word	0x0801537c
 80111b0:	080152fc 	.word	0x080152fc

080111b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b08c      	sub	sp, #48	; 0x30
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80111c4:	2301      	movs	r3, #1
 80111c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	885b      	ldrh	r3, [r3, #2]
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f6 fb11 	bl	80077fc <lwip_htons>
 80111da:	4603      	mov	r3, r0
 80111dc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	f003 030f 	and.w	r3, r3, #15
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80111ec:	7e7b      	ldrb	r3, [r7, #25]
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	8b7a      	ldrh	r2, [r7, #26]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d202      	bcs.n	80111fc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80111f6:	f04f 33ff 	mov.w	r3, #4294967295
 80111fa:	e135      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80111fc:	7e7b      	ldrb	r3, [r7, #25]
 80111fe:	b29b      	uxth	r3, r3
 8011200:	8b7a      	ldrh	r2, [r7, #26]
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	88db      	ldrh	r3, [r3, #6]
 801120a:	b29b      	uxth	r3, r3
 801120c:	4618      	mov	r0, r3
 801120e:	f7f6 faf5 	bl	80077fc <lwip_htons>
 8011212:	4603      	mov	r3, r0
 8011214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011218:	b29b      	uxth	r3, r3
 801121a:	00db      	lsls	r3, r3, #3
 801121c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	2200      	movs	r2, #0
 8011228:	701a      	strb	r2, [r3, #0]
 801122a:	2200      	movs	r2, #0
 801122c:	705a      	strb	r2, [r3, #1]
 801122e:	2200      	movs	r2, #0
 8011230:	709a      	strb	r2, [r3, #2]
 8011232:	2200      	movs	r2, #0
 8011234:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	8afa      	ldrh	r2, [r7, #22]
 801123a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801123c:	8afa      	ldrh	r2, [r7, #22]
 801123e:	8b7b      	ldrh	r3, [r7, #26]
 8011240:	4413      	add	r3, r2
 8011242:	b29a      	uxth	r2, r3
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	88db      	ldrh	r3, [r3, #6]
 801124c:	b29b      	uxth	r3, r3
 801124e:	8afa      	ldrh	r2, [r7, #22]
 8011250:	429a      	cmp	r2, r3
 8011252:	d902      	bls.n	801125a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011254:	f04f 33ff 	mov.w	r3, #4294967295
 8011258:	e106      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	627b      	str	r3, [r7, #36]	; 0x24
 8011260:	e068      	b.n	8011334 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126a:	889b      	ldrh	r3, [r3, #4]
 801126c:	b29a      	uxth	r2, r3
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	889b      	ldrh	r3, [r3, #4]
 8011272:	b29b      	uxth	r3, r3
 8011274:	429a      	cmp	r2, r3
 8011276:	d235      	bcs.n	80112e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011280:	2b00      	cmp	r3, #0
 8011282:	d020      	beq.n	80112c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	889b      	ldrh	r3, [r3, #4]
 8011288:	b29a      	uxth	r2, r3
 801128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128c:	88db      	ldrh	r3, [r3, #6]
 801128e:	b29b      	uxth	r3, r3
 8011290:	429a      	cmp	r2, r3
 8011292:	d307      	bcc.n	80112a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011296:	88db      	ldrh	r3, [r3, #6]
 8011298:	b29a      	uxth	r2, r3
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	889b      	ldrh	r3, [r3, #4]
 801129e:	b29b      	uxth	r3, r3
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d902      	bls.n	80112aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80112a4:	f04f 33ff 	mov.w	r3, #4294967295
 80112a8:	e0de      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	68ba      	ldr	r2, [r7, #8]
 80112ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80112b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b2:	88db      	ldrh	r3, [r3, #6]
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b8:	889b      	ldrh	r3, [r3, #4]
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	429a      	cmp	r2, r3
 80112be:	d03d      	beq.n	801133c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80112c0:	2300      	movs	r3, #0
 80112c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80112c4:	e03a      	b.n	801133c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c8:	88db      	ldrh	r3, [r3, #6]
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	889b      	ldrh	r3, [r3, #4]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d902      	bls.n	80112dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80112d6:	f04f 33ff 	mov.w	r3, #4294967295
 80112da:	e0c5      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	605a      	str	r2, [r3, #4]
      break;
 80112e2:	e02b      	b.n	801133c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80112e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e6:	889b      	ldrh	r3, [r3, #4]
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	889b      	ldrh	r3, [r3, #4]
 80112ee:	b29b      	uxth	r3, r3
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d102      	bne.n	80112fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80112f4:	f04f 33ff 	mov.w	r3, #4294967295
 80112f8:	e0b6      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80112fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fc:	889b      	ldrh	r3, [r3, #4]
 80112fe:	b29a      	uxth	r2, r3
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	88db      	ldrh	r3, [r3, #6]
 8011304:	b29b      	uxth	r3, r3
 8011306:	429a      	cmp	r2, r3
 8011308:	d202      	bcs.n	8011310 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801130a:	f04f 33ff 	mov.w	r3, #4294967295
 801130e:	e0ab      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011312:	2b00      	cmp	r3, #0
 8011314:	d009      	beq.n	801132a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011318:	88db      	ldrh	r3, [r3, #6]
 801131a:	b29a      	uxth	r2, r3
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	889b      	ldrh	r3, [r3, #4]
 8011320:	b29b      	uxth	r3, r3
 8011322:	429a      	cmp	r2, r3
 8011324:	d001      	beq.n	801132a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011326:	2300      	movs	r3, #0
 8011328:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	2b00      	cmp	r3, #0
 8011338:	d193      	bne.n	8011262 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801133a:	e000      	b.n	801133e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801133c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	2b00      	cmp	r3, #0
 8011342:	d12d      	bne.n	80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	2b00      	cmp	r3, #0
 8011348:	d01c      	beq.n	8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134c:	88db      	ldrh	r3, [r3, #6]
 801134e:	b29a      	uxth	r2, r3
 8011350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011352:	889b      	ldrh	r3, [r3, #4]
 8011354:	b29b      	uxth	r3, r3
 8011356:	429a      	cmp	r2, r3
 8011358:	d906      	bls.n	8011368 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801135a:	4b45      	ldr	r3, [pc, #276]	; (8011470 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801135c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011360:	4944      	ldr	r1, [pc, #272]	; (8011474 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011362:	4845      	ldr	r0, [pc, #276]	; (8011478 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011364:	f000 fcdc 	bl	8011d20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011370:	88db      	ldrh	r3, [r3, #6]
 8011372:	b29a      	uxth	r2, r3
 8011374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011376:	889b      	ldrh	r3, [r3, #4]
 8011378:	b29b      	uxth	r3, r3
 801137a:	429a      	cmp	r2, r3
 801137c:	d010      	beq.n	80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801137e:	2300      	movs	r3, #0
 8011380:	623b      	str	r3, [r7, #32]
 8011382:	e00d      	b.n	80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d006      	beq.n	801139a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801138c:	4b38      	ldr	r3, [pc, #224]	; (8011470 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801138e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8011392:	493a      	ldr	r1, [pc, #232]	; (801147c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011394:	4838      	ldr	r0, [pc, #224]	; (8011478 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011396:	f000 fcc3 	bl	8011d20 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d105      	bne.n	80113b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	7f9b      	ldrb	r3, [r3, #30]
 80113aa:	f003 0301 	and.w	r3, r3, #1
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d059      	beq.n	8011466 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80113b2:	6a3b      	ldr	r3, [r7, #32]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d04f      	beq.n	8011458 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d006      	beq.n	80113ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	889b      	ldrh	r3, [r3, #4]
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80113ce:	2300      	movs	r3, #0
 80113d0:	623b      	str	r3, [r7, #32]
 80113d2:	e041      	b.n	8011458 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80113de:	e012      	b.n	8011406 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	88db      	ldrh	r3, [r3, #6]
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ee:	889b      	ldrh	r3, [r3, #4]
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d002      	beq.n	80113fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	623b      	str	r3, [r7, #32]
            break;
 80113fa:	e007      	b.n	801140c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80113fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1e9      	bne.n	80113e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801140c:	6a3b      	ldr	r3, [r7, #32]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d022      	beq.n	8011458 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d106      	bne.n	8011428 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801141a:	4b15      	ldr	r3, [pc, #84]	; (8011470 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801141c:	f240 12df 	movw	r2, #479	; 0x1df
 8011420:	4917      	ldr	r1, [pc, #92]	; (8011480 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011422:	4815      	ldr	r0, [pc, #84]	; (8011478 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011424:	f000 fc7c 	bl	8011d20 <iprintf>
          LWIP_ASSERT("sanity check",
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011430:	429a      	cmp	r2, r3
 8011432:	d106      	bne.n	8011442 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011434:	4b0e      	ldr	r3, [pc, #56]	; (8011470 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011436:	f240 12e1 	movw	r2, #481	; 0x1e1
 801143a:	4911      	ldr	r1, [pc, #68]	; (8011480 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801143c:	480e      	ldr	r0, [pc, #56]	; (8011478 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801143e:	f000 fc6f 	bl	8011d20 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d006      	beq.n	8011458 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801144a:	4b09      	ldr	r3, [pc, #36]	; (8011470 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801144c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011450:	490c      	ldr	r1, [pc, #48]	; (8011484 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011452:	4809      	ldr	r0, [pc, #36]	; (8011478 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011454:	f000 fc64 	bl	8011d20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011458:	6a3b      	ldr	r3, [r7, #32]
 801145a:	2b00      	cmp	r3, #0
 801145c:	bf14      	ite	ne
 801145e:	2301      	movne	r3, #1
 8011460:	2300      	moveq	r3, #0
 8011462:	b2db      	uxtb	r3, r3
 8011464:	e000      	b.n	8011468 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011466:	2300      	movs	r3, #0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3730      	adds	r7, #48	; 0x30
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	080152b4 	.word	0x080152b4
 8011474:	08015398 	.word	0x08015398
 8011478:	080152fc 	.word	0x080152fc
 801147c:	080153b8 	.word	0x080153b8
 8011480:	080153f0 	.word	0x080153f0
 8011484:	08015400 	.word	0x08015400

08011488 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b08e      	sub	sp, #56	; 0x38
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	f003 030f 	and.w	r3, r3, #15
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b14      	cmp	r3, #20
 80114a6:	f040 8167 	bne.w	8011778 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80114aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ac:	88db      	ldrh	r3, [r3, #6]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f6 f9a3 	bl	80077fc <lwip_htons>
 80114b6:	4603      	mov	r3, r0
 80114b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114bc:	b29b      	uxth	r3, r3
 80114be:	00db      	lsls	r3, r3, #3
 80114c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80114c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c4:	885b      	ldrh	r3, [r3, #2]
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f6 f997 	bl	80077fc <lwip_htons>
 80114ce:	4603      	mov	r3, r0
 80114d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80114d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	f003 030f 	and.w	r3, r3, #15
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80114e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80114ea:	429a      	cmp	r2, r3
 80114ec:	f0c0 8146 	bcc.w	801177c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80114f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7f7 fe27 	bl	8009150 <pbuf_clen>
 8011502:	4603      	mov	r3, r0
 8011504:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011506:	4ba3      	ldr	r3, [pc, #652]	; (8011794 <ip4_reass+0x30c>)
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	461a      	mov	r2, r3
 801150c:	8c3b      	ldrh	r3, [r7, #32]
 801150e:	4413      	add	r3, r2
 8011510:	2b0a      	cmp	r3, #10
 8011512:	dd10      	ble.n	8011536 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011514:	8c3b      	ldrh	r3, [r7, #32]
 8011516:	4619      	mov	r1, r3
 8011518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801151a:	f7ff fd81 	bl	8011020 <ip_reass_remove_oldest_datagram>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	f000 812d 	beq.w	8011780 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011526:	4b9b      	ldr	r3, [pc, #620]	; (8011794 <ip4_reass+0x30c>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	8c3b      	ldrh	r3, [r7, #32]
 801152e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011530:	2b0a      	cmp	r3, #10
 8011532:	f300 8125 	bgt.w	8011780 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011536:	4b98      	ldr	r3, [pc, #608]	; (8011798 <ip4_reass+0x310>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	633b      	str	r3, [r7, #48]	; 0x30
 801153c:	e015      	b.n	801156a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011540:	695a      	ldr	r2, [r3, #20]
 8011542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	429a      	cmp	r2, r3
 8011548:	d10c      	bne.n	8011564 <ip4_reass+0xdc>
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	699a      	ldr	r2, [r3, #24]
 801154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011550:	691b      	ldr	r3, [r3, #16]
 8011552:	429a      	cmp	r2, r3
 8011554:	d106      	bne.n	8011564 <ip4_reass+0xdc>
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	899a      	ldrh	r2, [r3, #12]
 801155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155c:	889b      	ldrh	r3, [r3, #4]
 801155e:	b29b      	uxth	r3, r3
 8011560:	429a      	cmp	r2, r3
 8011562:	d006      	beq.n	8011572 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	633b      	str	r3, [r7, #48]	; 0x30
 801156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1e6      	bne.n	801153e <ip4_reass+0xb6>
 8011570:	e000      	b.n	8011574 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011572:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011576:	2b00      	cmp	r3, #0
 8011578:	d109      	bne.n	801158e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801157a:	8c3b      	ldrh	r3, [r7, #32]
 801157c:	4619      	mov	r1, r3
 801157e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011580:	f7ff fdb0 	bl	80110e4 <ip_reass_enqueue_new_datagram>
 8011584:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	2b00      	cmp	r3, #0
 801158a:	d11c      	bne.n	80115c6 <ip4_reass+0x13e>
      goto nullreturn;
 801158c:	e0f9      	b.n	8011782 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011590:	88db      	ldrh	r3, [r3, #6]
 8011592:	b29b      	uxth	r3, r3
 8011594:	4618      	mov	r0, r3
 8011596:	f7f6 f931 	bl	80077fc <lwip_htons>
 801159a:	4603      	mov	r3, r0
 801159c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d110      	bne.n	80115c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80115a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a6:	89db      	ldrh	r3, [r3, #14]
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7f6 f927 	bl	80077fc <lwip_htons>
 80115ae:	4603      	mov	r3, r0
 80115b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d006      	beq.n	80115c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80115b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ba:	3308      	adds	r3, #8
 80115bc:	2214      	movs	r2, #20
 80115be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 fb9a 	bl	8011cfa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80115c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c8:	88db      	ldrh	r3, [r3, #6]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	f003 0320 	and.w	r3, r3, #32
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bf0c      	ite	eq
 80115d4:	2301      	moveq	r3, #1
 80115d6:	2300      	movne	r3, #0
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d00e      	beq.n	8011600 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80115e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80115e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80115e6:	4413      	add	r3, r2
 80115e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80115ea:	8b7a      	ldrh	r2, [r7, #26]
 80115ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80115ee:	429a      	cmp	r2, r3
 80115f0:	f0c0 80a0 	bcc.w	8011734 <ip4_reass+0x2ac>
 80115f4:	8b7b      	ldrh	r3, [r7, #26]
 80115f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80115fa:	4293      	cmp	r3, r2
 80115fc:	f200 809a 	bhi.w	8011734 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011600:	69fa      	ldr	r2, [r7, #28]
 8011602:	6879      	ldr	r1, [r7, #4]
 8011604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011606:	f7ff fdd5 	bl	80111b4 <ip_reass_chain_frag_into_datagram_and_validate>
 801160a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011612:	f000 8091 	beq.w	8011738 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011616:	4b5f      	ldr	r3, [pc, #380]	; (8011794 <ip4_reass+0x30c>)
 8011618:	881a      	ldrh	r2, [r3, #0]
 801161a:	8c3b      	ldrh	r3, [r7, #32]
 801161c:	4413      	add	r3, r2
 801161e:	b29a      	uxth	r2, r3
 8011620:	4b5c      	ldr	r3, [pc, #368]	; (8011794 <ip4_reass+0x30c>)
 8011622:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d00d      	beq.n	8011646 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801162a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801162c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801162e:	4413      	add	r3, r2
 8011630:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011634:	8a7a      	ldrh	r2, [r7, #18]
 8011636:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801163a:	7f9b      	ldrb	r3, [r3, #30]
 801163c:	f043 0301 	orr.w	r3, r3, #1
 8011640:	b2da      	uxtb	r2, r3
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d171      	bne.n	8011730 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164e:	8b9b      	ldrh	r3, [r3, #28]
 8011650:	3314      	adds	r3, #20
 8011652:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011668:	3308      	adds	r3, #8
 801166a:	2214      	movs	r2, #20
 801166c:	4619      	mov	r1, r3
 801166e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011670:	f000 fb43 	bl	8011cfa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011674:	8a3b      	ldrh	r3, [r7, #16]
 8011676:	4618      	mov	r0, r3
 8011678:	f7f6 f8c0 	bl	80077fc <lwip_htons>
 801167c:	4603      	mov	r3, r0
 801167e:	461a      	mov	r2, r3
 8011680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011682:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011686:	2200      	movs	r2, #0
 8011688:	719a      	strb	r2, [r3, #6]
 801168a:	2200      	movs	r2, #0
 801168c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011690:	2200      	movs	r2, #0
 8011692:	729a      	strb	r2, [r3, #10]
 8011694:	2200      	movs	r2, #0
 8011696:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801169e:	e00d      	b.n	80116bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80116a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80116a6:	2114      	movs	r1, #20
 80116a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80116aa:	f7f7 fc43 	bl	8008f34 <pbuf_remove_header>
      pbuf_cat(p, r);
 80116ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7f7 fd87 	bl	80091c4 <pbuf_cat>
      r = iprh->next_pbuf;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80116bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1ee      	bne.n	80116a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80116c2:	4b35      	ldr	r3, [pc, #212]	; (8011798 <ip4_reass+0x310>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d102      	bne.n	80116d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80116cc:	2300      	movs	r3, #0
 80116ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116d0:	e010      	b.n	80116f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80116d2:	4b31      	ldr	r3, [pc, #196]	; (8011798 <ip4_reass+0x310>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116d8:	e007      	b.n	80116ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d006      	beq.n	80116f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80116e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1f4      	bne.n	80116da <ip4_reass+0x252>
 80116f0:	e000      	b.n	80116f4 <ip4_reass+0x26c>
          break;
 80116f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80116f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116f8:	f7ff fd2e 	bl	8011158 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7f7 fd27 	bl	8009150 <pbuf_clen>
 8011702:	4603      	mov	r3, r0
 8011704:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011706:	4b23      	ldr	r3, [pc, #140]	; (8011794 <ip4_reass+0x30c>)
 8011708:	881b      	ldrh	r3, [r3, #0]
 801170a:	8c3a      	ldrh	r2, [r7, #32]
 801170c:	429a      	cmp	r2, r3
 801170e:	d906      	bls.n	801171e <ip4_reass+0x296>
 8011710:	4b22      	ldr	r3, [pc, #136]	; (801179c <ip4_reass+0x314>)
 8011712:	f240 229b 	movw	r2, #667	; 0x29b
 8011716:	4922      	ldr	r1, [pc, #136]	; (80117a0 <ip4_reass+0x318>)
 8011718:	4822      	ldr	r0, [pc, #136]	; (80117a4 <ip4_reass+0x31c>)
 801171a:	f000 fb01 	bl	8011d20 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801171e:	4b1d      	ldr	r3, [pc, #116]	; (8011794 <ip4_reass+0x30c>)
 8011720:	881a      	ldrh	r2, [r3, #0]
 8011722:	8c3b      	ldrh	r3, [r7, #32]
 8011724:	1ad3      	subs	r3, r2, r3
 8011726:	b29a      	uxth	r2, r3
 8011728:	4b1a      	ldr	r3, [pc, #104]	; (8011794 <ip4_reass+0x30c>)
 801172a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	e02c      	b.n	801178a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011730:	2300      	movs	r3, #0
 8011732:	e02a      	b.n	801178a <ip4_reass+0x302>

nullreturn_ipr:
 8011734:	bf00      	nop
 8011736:	e000      	b.n	801173a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011738:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173c:	2b00      	cmp	r3, #0
 801173e:	d106      	bne.n	801174e <ip4_reass+0x2c6>
 8011740:	4b16      	ldr	r3, [pc, #88]	; (801179c <ip4_reass+0x314>)
 8011742:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011746:	4918      	ldr	r1, [pc, #96]	; (80117a8 <ip4_reass+0x320>)
 8011748:	4816      	ldr	r0, [pc, #88]	; (80117a4 <ip4_reass+0x31c>)
 801174a:	f000 fae9 	bl	8011d20 <iprintf>
  if (ipr->p == NULL) {
 801174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d114      	bne.n	8011780 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011756:	4b10      	ldr	r3, [pc, #64]	; (8011798 <ip4_reass+0x310>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801175c:	429a      	cmp	r2, r3
 801175e:	d006      	beq.n	801176e <ip4_reass+0x2e6>
 8011760:	4b0e      	ldr	r3, [pc, #56]	; (801179c <ip4_reass+0x314>)
 8011762:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011766:	4911      	ldr	r1, [pc, #68]	; (80117ac <ip4_reass+0x324>)
 8011768:	480e      	ldr	r0, [pc, #56]	; (80117a4 <ip4_reass+0x31c>)
 801176a:	f000 fad9 	bl	8011d20 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801176e:	2100      	movs	r1, #0
 8011770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011772:	f7ff fcf1 	bl	8011158 <ip_reass_dequeue_datagram>
 8011776:	e004      	b.n	8011782 <ip4_reass+0x2fa>
    goto nullreturn;
 8011778:	bf00      	nop
 801177a:	e002      	b.n	8011782 <ip4_reass+0x2fa>
    goto nullreturn;
 801177c:	bf00      	nop
 801177e:	e000      	b.n	8011782 <ip4_reass+0x2fa>
  }

nullreturn:
 8011780:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f7f7 fc5c 	bl	8009040 <pbuf_free>
  return NULL;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3738      	adds	r7, #56	; 0x38
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	24000228 	.word	0x24000228
 8011798:	24000224 	.word	0x24000224
 801179c:	080152b4 	.word	0x080152b4
 80117a0:	08015424 	.word	0x08015424
 80117a4:	080152fc 	.word	0x080152fc
 80117a8:	08015440 	.word	0x08015440
 80117ac:	0801544c 	.word	0x0801544c

080117b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80117b4:	2005      	movs	r0, #5
 80117b6:	f7f6 fd61 	bl	800827c <memp_malloc>
 80117ba:	4603      	mov	r3, r0
}
 80117bc:	4618      	mov	r0, r3
 80117be:	bd80      	pop	{r7, pc}

080117c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d106      	bne.n	80117dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80117ce:	4b07      	ldr	r3, [pc, #28]	; (80117ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80117d0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80117d4:	4906      	ldr	r1, [pc, #24]	; (80117f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80117d6:	4807      	ldr	r0, [pc, #28]	; (80117f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80117d8:	f000 faa2 	bl	8011d20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80117dc:	6879      	ldr	r1, [r7, #4]
 80117de:	2005      	movs	r0, #5
 80117e0:	f7f6 fdbc 	bl	800835c <memp_free>
}
 80117e4:	bf00      	nop
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	080152b4 	.word	0x080152b4
 80117f0:	0801546c 	.word	0x0801546c
 80117f4:	080152fc 	.word	0x080152fc

080117f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d106      	bne.n	8011818 <ipfrag_free_pbuf_custom+0x20>
 801180a:	4b11      	ldr	r3, [pc, #68]	; (8011850 <ipfrag_free_pbuf_custom+0x58>)
 801180c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011810:	4910      	ldr	r1, [pc, #64]	; (8011854 <ipfrag_free_pbuf_custom+0x5c>)
 8011812:	4811      	ldr	r0, [pc, #68]	; (8011858 <ipfrag_free_pbuf_custom+0x60>)
 8011814:	f000 fa84 	bl	8011d20 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	429a      	cmp	r2, r3
 801181e:	d006      	beq.n	801182e <ipfrag_free_pbuf_custom+0x36>
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <ipfrag_free_pbuf_custom+0x58>)
 8011822:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011826:	490d      	ldr	r1, [pc, #52]	; (801185c <ipfrag_free_pbuf_custom+0x64>)
 8011828:	480b      	ldr	r0, [pc, #44]	; (8011858 <ipfrag_free_pbuf_custom+0x60>)
 801182a:	f000 fa79 	bl	8011d20 <iprintf>
  if (pcr->original != NULL) {
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	695b      	ldr	r3, [r3, #20]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d004      	beq.n	8011840 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	695b      	ldr	r3, [r3, #20]
 801183a:	4618      	mov	r0, r3
 801183c:	f7f7 fc00 	bl	8009040 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f7ff ffbd 	bl	80117c0 <ip_frag_free_pbuf_custom_ref>
}
 8011846:	bf00      	nop
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	080152b4 	.word	0x080152b4
 8011854:	08015478 	.word	0x08015478
 8011858:	080152fc 	.word	0x080152fc
 801185c:	08015484 	.word	0x08015484

08011860 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b094      	sub	sp, #80	; 0x50
 8011864:	af02      	add	r7, sp, #8
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801186c:	2300      	movs	r3, #0
 801186e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011876:	3b14      	subs	r3, #20
 8011878:	2b00      	cmp	r3, #0
 801187a:	da00      	bge.n	801187e <ip4_frag+0x1e>
 801187c:	3307      	adds	r3, #7
 801187e:	10db      	asrs	r3, r3, #3
 8011880:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011882:	2314      	movs	r3, #20
 8011884:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801188e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	f003 030f 	and.w	r3, r3, #15
 8011898:	b2db      	uxtb	r3, r3
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	b2db      	uxtb	r3, r3
 801189e:	2b14      	cmp	r3, #20
 80118a0:	d002      	beq.n	80118a8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80118a2:	f06f 0305 	mvn.w	r3, #5
 80118a6:	e10f      	b.n	8011ac8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	895b      	ldrh	r3, [r3, #10]
 80118ac:	2b13      	cmp	r3, #19
 80118ae:	d809      	bhi.n	80118c4 <ip4_frag+0x64>
 80118b0:	4b87      	ldr	r3, [pc, #540]	; (8011ad0 <ip4_frag+0x270>)
 80118b2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80118b6:	4987      	ldr	r1, [pc, #540]	; (8011ad4 <ip4_frag+0x274>)
 80118b8:	4887      	ldr	r0, [pc, #540]	; (8011ad8 <ip4_frag+0x278>)
 80118ba:	f000 fa31 	bl	8011d20 <iprintf>
 80118be:	f06f 0305 	mvn.w	r3, #5
 80118c2:	e101      	b.n	8011ac8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80118c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c6:	88db      	ldrh	r3, [r3, #6]
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7f5 ff96 	bl	80077fc <lwip_htons>
 80118d0:	4603      	mov	r3, r0
 80118d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80118d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80118de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80118e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	891b      	ldrh	r3, [r3, #8]
 80118ea:	3b14      	subs	r3, #20
 80118ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80118f0:	e0e0      	b.n	8011ab4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80118f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80118f4:	00db      	lsls	r3, r3, #3
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118fc:	4293      	cmp	r3, r2
 80118fe:	bf28      	it	cs
 8011900:	4613      	movcs	r3, r2
 8011902:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011904:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011908:	2114      	movs	r1, #20
 801190a:	200e      	movs	r0, #14
 801190c:	f7f7 f8b8 	bl	8008a80 <pbuf_alloc>
 8011910:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011914:	2b00      	cmp	r3, #0
 8011916:	f000 80d4 	beq.w	8011ac2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191c:	895b      	ldrh	r3, [r3, #10]
 801191e:	2b13      	cmp	r3, #19
 8011920:	d806      	bhi.n	8011930 <ip4_frag+0xd0>
 8011922:	4b6b      	ldr	r3, [pc, #428]	; (8011ad0 <ip4_frag+0x270>)
 8011924:	f240 3225 	movw	r2, #805	; 0x325
 8011928:	496c      	ldr	r1, [pc, #432]	; (8011adc <ip4_frag+0x27c>)
 801192a:	486b      	ldr	r0, [pc, #428]	; (8011ad8 <ip4_frag+0x278>)
 801192c:	f000 f9f8 	bl	8011d20 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	2214      	movs	r2, #20
 8011936:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011938:	4618      	mov	r0, r3
 801193a:	f000 f9de 	bl	8011cfa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011946:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801194a:	e064      	b.n	8011a16 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	895a      	ldrh	r2, [r3, #10]
 8011950:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	895b      	ldrh	r3, [r3, #10]
 801195a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801195c:	429a      	cmp	r2, r3
 801195e:	d906      	bls.n	801196e <ip4_frag+0x10e>
 8011960:	4b5b      	ldr	r3, [pc, #364]	; (8011ad0 <ip4_frag+0x270>)
 8011962:	f240 322d 	movw	r2, #813	; 0x32d
 8011966:	495e      	ldr	r1, [pc, #376]	; (8011ae0 <ip4_frag+0x280>)
 8011968:	485b      	ldr	r0, [pc, #364]	; (8011ad8 <ip4_frag+0x278>)
 801196a:	f000 f9d9 	bl	8011d20 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801196e:	8bfa      	ldrh	r2, [r7, #30]
 8011970:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011974:	4293      	cmp	r3, r2
 8011976:	bf28      	it	cs
 8011978:	4613      	movcs	r3, r2
 801197a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801197e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011982:	2b00      	cmp	r3, #0
 8011984:	d105      	bne.n	8011992 <ip4_frag+0x132>
        poff = 0;
 8011986:	2300      	movs	r3, #0
 8011988:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	60fb      	str	r3, [r7, #12]
        continue;
 8011990:	e041      	b.n	8011a16 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011992:	f7ff ff0d 	bl	80117b0 <ip_frag_alloc_pbuf_custom_ref>
 8011996:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d103      	bne.n	80119a6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801199e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119a0:	f7f7 fb4e 	bl	8009040 <pbuf_free>
        goto memerr;
 80119a4:	e08e      	b.n	8011ac4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80119a6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80119ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119ae:	4413      	add	r3, r2
 80119b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80119b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80119b8:	9201      	str	r2, [sp, #4]
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	4603      	mov	r3, r0
 80119be:	2241      	movs	r2, #65	; 0x41
 80119c0:	2000      	movs	r0, #0
 80119c2:	f7f7 f983 	bl	8008ccc <pbuf_alloced_custom>
 80119c6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d106      	bne.n	80119dc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80119ce:	69b8      	ldr	r0, [r7, #24]
 80119d0:	f7ff fef6 	bl	80117c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80119d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119d6:	f7f7 fb33 	bl	8009040 <pbuf_free>
        goto memerr;
 80119da:	e073      	b.n	8011ac4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	f7f7 fbcf 	bl	8009180 <pbuf_ref>
      pcr->original = p;
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	4a3e      	ldr	r2, [pc, #248]	; (8011ae4 <ip4_frag+0x284>)
 80119ec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80119ee:	6979      	ldr	r1, [r7, #20]
 80119f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119f2:	f7f7 fbe7 	bl	80091c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80119f6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80119fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011a04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d004      	beq.n	8011a16 <ip4_frag+0x1b6>
        poff = 0;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011a16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d196      	bne.n	801194c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011a1e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011a20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011a24:	4413      	add	r3, r2
 8011a26:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011a28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011a30:	3b14      	subs	r3, #20
 8011a32:	429a      	cmp	r2, r3
 8011a34:	bfd4      	ite	le
 8011a36:	2301      	movle	r3, #1
 8011a38:	2300      	movgt	r3, #0
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a46:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011a48:	6a3b      	ldr	r3, [r7, #32]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d002      	beq.n	8011a54 <ip4_frag+0x1f4>
 8011a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d003      	beq.n	8011a5c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011a54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011a5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011a5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7f5 fecc 	bl	80077fc <lwip_htons>
 8011a64:	4603      	mov	r3, r0
 8011a66:	461a      	mov	r2, r3
 8011a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011a6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a6e:	3314      	adds	r3, #20
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7f5 fec2 	bl	80077fc <lwip_htons>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a82:	2200      	movs	r2, #0
 8011a84:	729a      	strb	r2, [r3, #10]
 8011a86:	2200      	movs	r2, #0
 8011a88:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	695b      	ldr	r3, [r3, #20]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a92:	68b8      	ldr	r0, [r7, #8]
 8011a94:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a98:	f7f7 fad2 	bl	8009040 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011a9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011aa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011aa2:	1ad3      	subs	r3, r2, r3
 8011aa4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011aa8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011aac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011aae:	4413      	add	r3, r2
 8011ab0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f47f af1a 	bne.w	80118f2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	e002      	b.n	8011ac8 <ip4_frag+0x268>
      goto memerr;
 8011ac2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3748      	adds	r7, #72	; 0x48
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	080152b4 	.word	0x080152b4
 8011ad4:	08015490 	.word	0x08015490
 8011ad8:	080152fc 	.word	0x080152fc
 8011adc:	080154ac 	.word	0x080154ac
 8011ae0:	080154cc 	.word	0x080154cc
 8011ae4:	080117f9 	.word	0x080117f9

08011ae8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011af2:	230e      	movs	r3, #14
 8011af4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	895b      	ldrh	r3, [r3, #10]
 8011afa:	2b0e      	cmp	r3, #14
 8011afc:	d96e      	bls.n	8011bdc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7bdb      	ldrb	r3, [r3, #15]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	b2da      	uxtb	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	7b1a      	ldrb	r2, [r3, #12]
 8011b1e:	7b5b      	ldrb	r3, [r3, #13]
 8011b20:	021b      	lsls	r3, r3, #8
 8011b22:	4313      	orrs	r3, r2
 8011b24:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d023      	beq.n	8011b7a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d10f      	bne.n	8011b5a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	785b      	ldrb	r3, [r3, #1]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d11b      	bne.n	8011b7a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011b46:	2b5e      	cmp	r3, #94	; 0x5e
 8011b48:	d117      	bne.n	8011b7a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	7b5b      	ldrb	r3, [r3, #13]
 8011b4e:	f043 0310 	orr.w	r3, r3, #16
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	735a      	strb	r2, [r3, #13]
 8011b58:	e00f      	b.n	8011b7a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	2206      	movs	r2, #6
 8011b5e:	4928      	ldr	r1, [pc, #160]	; (8011c00 <ethernet_input+0x118>)
 8011b60:	4618      	mov	r0, r3
 8011b62:	f000 f8bb 	bl	8011cdc <memcmp>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d106      	bne.n	8011b7a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	7b5b      	ldrb	r3, [r3, #13]
 8011b70:	f043 0308 	orr.w	r3, r3, #8
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011b7a:	89fb      	ldrh	r3, [r7, #14]
 8011b7c:	2b08      	cmp	r3, #8
 8011b7e:	d003      	beq.n	8011b88 <ethernet_input+0xa0>
 8011b80:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011b84:	d014      	beq.n	8011bb0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011b86:	e032      	b.n	8011bee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b8e:	f003 0308 	and.w	r3, r3, #8
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d024      	beq.n	8011be0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011b96:	8afb      	ldrh	r3, [r7, #22]
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7f7 f9ca 	bl	8008f34 <pbuf_remove_header>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d11e      	bne.n	8011be4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7fe ff2d 	bl	8010a08 <ip4_input>
      break;
 8011bae:	e013      	b.n	8011bd8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bb6:	f003 0308 	and.w	r3, r3, #8
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d014      	beq.n	8011be8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011bbe:	8afb      	ldrh	r3, [r7, #22]
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7f7 f9b6 	bl	8008f34 <pbuf_remove_header>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10e      	bne.n	8011bec <ethernet_input+0x104>
        etharp_input(p, netif);
 8011bce:	6839      	ldr	r1, [r7, #0]
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7fe f8a7 	bl	800fd24 <etharp_input>
      break;
 8011bd6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	e00c      	b.n	8011bf6 <ethernet_input+0x10e>
    goto free_and_return;
 8011bdc:	bf00      	nop
 8011bde:	e006      	b.n	8011bee <ethernet_input+0x106>
        goto free_and_return;
 8011be0:	bf00      	nop
 8011be2:	e004      	b.n	8011bee <ethernet_input+0x106>
        goto free_and_return;
 8011be4:	bf00      	nop
 8011be6:	e002      	b.n	8011bee <ethernet_input+0x106>
        goto free_and_return;
 8011be8:	bf00      	nop
 8011bea:	e000      	b.n	8011bee <ethernet_input+0x106>
        goto free_and_return;
 8011bec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f7f7 fa26 	bl	8009040 <pbuf_free>
  return ERR_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3718      	adds	r7, #24
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	08015678 	.word	0x08015678

08011c04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b086      	sub	sp, #24
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011c12:	8c3b      	ldrh	r3, [r7, #32]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f5 fdf1 	bl	80077fc <lwip_htons>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011c1e:	210e      	movs	r1, #14
 8011c20:	68b8      	ldr	r0, [r7, #8]
 8011c22:	f7f7 f977 	bl	8008f14 <pbuf_add_header>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d125      	bne.n	8011c78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	8afa      	ldrh	r2, [r7, #22]
 8011c36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	2206      	movs	r2, #6
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 f85b 	bl	8011cfa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	3306      	adds	r3, #6
 8011c48:	2206      	movs	r2, #6
 8011c4a:	6879      	ldr	r1, [r7, #4]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f000 f854 	bl	8011cfa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c58:	2b06      	cmp	r3, #6
 8011c5a:	d006      	beq.n	8011c6a <ethernet_output+0x66>
 8011c5c:	4b0a      	ldr	r3, [pc, #40]	; (8011c88 <ethernet_output+0x84>)
 8011c5e:	f240 1233 	movw	r2, #307	; 0x133
 8011c62:	490a      	ldr	r1, [pc, #40]	; (8011c8c <ethernet_output+0x88>)
 8011c64:	480a      	ldr	r0, [pc, #40]	; (8011c90 <ethernet_output+0x8c>)
 8011c66:	f000 f85b 	bl	8011d20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	68b9      	ldr	r1, [r7, #8]
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	4798      	blx	r3
 8011c74:	4603      	mov	r3, r0
 8011c76:	e002      	b.n	8011c7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011c78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011c7a:	f06f 0301 	mvn.w	r3, #1
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	080154dc 	.word	0x080154dc
 8011c8c:	08015514 	.word	0x08015514
 8011c90:	08015548 	.word	0x08015548

08011c94 <__libc_init_array>:
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	4e0d      	ldr	r6, [pc, #52]	; (8011ccc <__libc_init_array+0x38>)
 8011c98:	4c0d      	ldr	r4, [pc, #52]	; (8011cd0 <__libc_init_array+0x3c>)
 8011c9a:	1ba4      	subs	r4, r4, r6
 8011c9c:	10a4      	asrs	r4, r4, #2
 8011c9e:	2500      	movs	r5, #0
 8011ca0:	42a5      	cmp	r5, r4
 8011ca2:	d109      	bne.n	8011cb8 <__libc_init_array+0x24>
 8011ca4:	4e0b      	ldr	r6, [pc, #44]	; (8011cd4 <__libc_init_array+0x40>)
 8011ca6:	4c0c      	ldr	r4, [pc, #48]	; (8011cd8 <__libc_init_array+0x44>)
 8011ca8:	f000 ff5a 	bl	8012b60 <_init>
 8011cac:	1ba4      	subs	r4, r4, r6
 8011cae:	10a4      	asrs	r4, r4, #2
 8011cb0:	2500      	movs	r5, #0
 8011cb2:	42a5      	cmp	r5, r4
 8011cb4:	d105      	bne.n	8011cc2 <__libc_init_array+0x2e>
 8011cb6:	bd70      	pop	{r4, r5, r6, pc}
 8011cb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011cbc:	4798      	blx	r3
 8011cbe:	3501      	adds	r5, #1
 8011cc0:	e7ee      	b.n	8011ca0 <__libc_init_array+0xc>
 8011cc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011cc6:	4798      	blx	r3
 8011cc8:	3501      	adds	r5, #1
 8011cca:	e7f2      	b.n	8011cb2 <__libc_init_array+0x1e>
 8011ccc:	08015728 	.word	0x08015728
 8011cd0:	08015728 	.word	0x08015728
 8011cd4:	08015728 	.word	0x08015728
 8011cd8:	0801572c 	.word	0x0801572c

08011cdc <memcmp>:
 8011cdc:	b530      	push	{r4, r5, lr}
 8011cde:	2400      	movs	r4, #0
 8011ce0:	42a2      	cmp	r2, r4
 8011ce2:	d101      	bne.n	8011ce8 <memcmp+0xc>
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	e007      	b.n	8011cf8 <memcmp+0x1c>
 8011ce8:	5d03      	ldrb	r3, [r0, r4]
 8011cea:	3401      	adds	r4, #1
 8011cec:	190d      	adds	r5, r1, r4
 8011cee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011cf2:	42ab      	cmp	r3, r5
 8011cf4:	d0f4      	beq.n	8011ce0 <memcmp+0x4>
 8011cf6:	1b58      	subs	r0, r3, r5
 8011cf8:	bd30      	pop	{r4, r5, pc}

08011cfa <memcpy>:
 8011cfa:	b510      	push	{r4, lr}
 8011cfc:	1e43      	subs	r3, r0, #1
 8011cfe:	440a      	add	r2, r1
 8011d00:	4291      	cmp	r1, r2
 8011d02:	d100      	bne.n	8011d06 <memcpy+0xc>
 8011d04:	bd10      	pop	{r4, pc}
 8011d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d0e:	e7f7      	b.n	8011d00 <memcpy+0x6>

08011d10 <memset>:
 8011d10:	4402      	add	r2, r0
 8011d12:	4603      	mov	r3, r0
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d100      	bne.n	8011d1a <memset+0xa>
 8011d18:	4770      	bx	lr
 8011d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d1e:	e7f9      	b.n	8011d14 <memset+0x4>

08011d20 <iprintf>:
 8011d20:	b40f      	push	{r0, r1, r2, r3}
 8011d22:	4b0a      	ldr	r3, [pc, #40]	; (8011d4c <iprintf+0x2c>)
 8011d24:	b513      	push	{r0, r1, r4, lr}
 8011d26:	681c      	ldr	r4, [r3, #0]
 8011d28:	b124      	cbz	r4, 8011d34 <iprintf+0x14>
 8011d2a:	69a3      	ldr	r3, [r4, #24]
 8011d2c:	b913      	cbnz	r3, 8011d34 <iprintf+0x14>
 8011d2e:	4620      	mov	r0, r4
 8011d30:	f000 f882 	bl	8011e38 <__sinit>
 8011d34:	ab05      	add	r3, sp, #20
 8011d36:	9a04      	ldr	r2, [sp, #16]
 8011d38:	68a1      	ldr	r1, [r4, #8]
 8011d3a:	9301      	str	r3, [sp, #4]
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f000 f9df 	bl	8012100 <_vfiprintf_r>
 8011d42:	b002      	add	sp, #8
 8011d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d48:	b004      	add	sp, #16
 8011d4a:	4770      	bx	lr
 8011d4c:	24000030 	.word	0x24000030

08011d50 <rand>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	4b13      	ldr	r3, [pc, #76]	; (8011da0 <rand+0x50>)
 8011d54:	681c      	ldr	r4, [r3, #0]
 8011d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011d58:	b97b      	cbnz	r3, 8011d7a <rand+0x2a>
 8011d5a:	2018      	movs	r0, #24
 8011d5c:	f000 f8f6 	bl	8011f4c <malloc>
 8011d60:	4a10      	ldr	r2, [pc, #64]	; (8011da4 <rand+0x54>)
 8011d62:	4b11      	ldr	r3, [pc, #68]	; (8011da8 <rand+0x58>)
 8011d64:	63a0      	str	r0, [r4, #56]	; 0x38
 8011d66:	e9c0 2300 	strd	r2, r3, [r0]
 8011d6a:	4b10      	ldr	r3, [pc, #64]	; (8011dac <rand+0x5c>)
 8011d6c:	6083      	str	r3, [r0, #8]
 8011d6e:	230b      	movs	r3, #11
 8011d70:	8183      	strh	r3, [r0, #12]
 8011d72:	2201      	movs	r2, #1
 8011d74:	2300      	movs	r3, #0
 8011d76:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011d7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d7c:	480c      	ldr	r0, [pc, #48]	; (8011db0 <rand+0x60>)
 8011d7e:	690a      	ldr	r2, [r1, #16]
 8011d80:	694b      	ldr	r3, [r1, #20]
 8011d82:	4c0c      	ldr	r4, [pc, #48]	; (8011db4 <rand+0x64>)
 8011d84:	4350      	muls	r0, r2
 8011d86:	fb04 0003 	mla	r0, r4, r3, r0
 8011d8a:	fba2 2304 	umull	r2, r3, r2, r4
 8011d8e:	4403      	add	r3, r0
 8011d90:	1c54      	adds	r4, r2, #1
 8011d92:	f143 0500 	adc.w	r5, r3, #0
 8011d96:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8011d9a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8011d9e:	bd38      	pop	{r3, r4, r5, pc}
 8011da0:	24000030 	.word	0x24000030
 8011da4:	abcd330e 	.word	0xabcd330e
 8011da8:	e66d1234 	.word	0xe66d1234
 8011dac:	0005deec 	.word	0x0005deec
 8011db0:	5851f42d 	.word	0x5851f42d
 8011db4:	4c957f2d 	.word	0x4c957f2d

08011db8 <std>:
 8011db8:	2300      	movs	r3, #0
 8011dba:	b510      	push	{r4, lr}
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8011dc2:	6083      	str	r3, [r0, #8]
 8011dc4:	8181      	strh	r1, [r0, #12]
 8011dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8011dc8:	81c2      	strh	r2, [r0, #14]
 8011dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011dce:	6183      	str	r3, [r0, #24]
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	2208      	movs	r2, #8
 8011dd4:	305c      	adds	r0, #92	; 0x5c
 8011dd6:	f7ff ff9b 	bl	8011d10 <memset>
 8011dda:	4b05      	ldr	r3, [pc, #20]	; (8011df0 <std+0x38>)
 8011ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8011dde:	4b05      	ldr	r3, [pc, #20]	; (8011df4 <std+0x3c>)
 8011de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011de2:	4b05      	ldr	r3, [pc, #20]	; (8011df8 <std+0x40>)
 8011de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011de6:	4b05      	ldr	r3, [pc, #20]	; (8011dfc <std+0x44>)
 8011de8:	6224      	str	r4, [r4, #32]
 8011dea:	6323      	str	r3, [r4, #48]	; 0x30
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	bf00      	nop
 8011df0:	0801265d 	.word	0x0801265d
 8011df4:	0801267f 	.word	0x0801267f
 8011df8:	080126b7 	.word	0x080126b7
 8011dfc:	080126db 	.word	0x080126db

08011e00 <_cleanup_r>:
 8011e00:	4901      	ldr	r1, [pc, #4]	; (8011e08 <_cleanup_r+0x8>)
 8011e02:	f000 b885 	b.w	8011f10 <_fwalk_reent>
 8011e06:	bf00      	nop
 8011e08:	080129b5 	.word	0x080129b5

08011e0c <__sfmoreglue>:
 8011e0c:	b570      	push	{r4, r5, r6, lr}
 8011e0e:	1e4a      	subs	r2, r1, #1
 8011e10:	2568      	movs	r5, #104	; 0x68
 8011e12:	4355      	muls	r5, r2
 8011e14:	460e      	mov	r6, r1
 8011e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011e1a:	f000 f8ed 	bl	8011ff8 <_malloc_r>
 8011e1e:	4604      	mov	r4, r0
 8011e20:	b140      	cbz	r0, 8011e34 <__sfmoreglue+0x28>
 8011e22:	2100      	movs	r1, #0
 8011e24:	e9c0 1600 	strd	r1, r6, [r0]
 8011e28:	300c      	adds	r0, #12
 8011e2a:	60a0      	str	r0, [r4, #8]
 8011e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011e30:	f7ff ff6e 	bl	8011d10 <memset>
 8011e34:	4620      	mov	r0, r4
 8011e36:	bd70      	pop	{r4, r5, r6, pc}

08011e38 <__sinit>:
 8011e38:	6983      	ldr	r3, [r0, #24]
 8011e3a:	b510      	push	{r4, lr}
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	bb33      	cbnz	r3, 8011e8e <__sinit+0x56>
 8011e40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011e44:	6503      	str	r3, [r0, #80]	; 0x50
 8011e46:	4b12      	ldr	r3, [pc, #72]	; (8011e90 <__sinit+0x58>)
 8011e48:	4a12      	ldr	r2, [pc, #72]	; (8011e94 <__sinit+0x5c>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	6282      	str	r2, [r0, #40]	; 0x28
 8011e4e:	4298      	cmp	r0, r3
 8011e50:	bf04      	itt	eq
 8011e52:	2301      	moveq	r3, #1
 8011e54:	6183      	streq	r3, [r0, #24]
 8011e56:	f000 f81f 	bl	8011e98 <__sfp>
 8011e5a:	6060      	str	r0, [r4, #4]
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 f81b 	bl	8011e98 <__sfp>
 8011e62:	60a0      	str	r0, [r4, #8]
 8011e64:	4620      	mov	r0, r4
 8011e66:	f000 f817 	bl	8011e98 <__sfp>
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	60e0      	str	r0, [r4, #12]
 8011e6e:	2104      	movs	r1, #4
 8011e70:	6860      	ldr	r0, [r4, #4]
 8011e72:	f7ff ffa1 	bl	8011db8 <std>
 8011e76:	2201      	movs	r2, #1
 8011e78:	2109      	movs	r1, #9
 8011e7a:	68a0      	ldr	r0, [r4, #8]
 8011e7c:	f7ff ff9c 	bl	8011db8 <std>
 8011e80:	2202      	movs	r2, #2
 8011e82:	2112      	movs	r1, #18
 8011e84:	68e0      	ldr	r0, [r4, #12]
 8011e86:	f7ff ff97 	bl	8011db8 <std>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	61a3      	str	r3, [r4, #24]
 8011e8e:	bd10      	pop	{r4, pc}
 8011e90:	08015688 	.word	0x08015688
 8011e94:	08011e01 	.word	0x08011e01

08011e98 <__sfp>:
 8011e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e9a:	4b1b      	ldr	r3, [pc, #108]	; (8011f08 <__sfp+0x70>)
 8011e9c:	681e      	ldr	r6, [r3, #0]
 8011e9e:	69b3      	ldr	r3, [r6, #24]
 8011ea0:	4607      	mov	r7, r0
 8011ea2:	b913      	cbnz	r3, 8011eaa <__sfp+0x12>
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	f7ff ffc7 	bl	8011e38 <__sinit>
 8011eaa:	3648      	adds	r6, #72	; 0x48
 8011eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	d503      	bpl.n	8011ebc <__sfp+0x24>
 8011eb4:	6833      	ldr	r3, [r6, #0]
 8011eb6:	b133      	cbz	r3, 8011ec6 <__sfp+0x2e>
 8011eb8:	6836      	ldr	r6, [r6, #0]
 8011eba:	e7f7      	b.n	8011eac <__sfp+0x14>
 8011ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ec0:	b16d      	cbz	r5, 8011ede <__sfp+0x46>
 8011ec2:	3468      	adds	r4, #104	; 0x68
 8011ec4:	e7f4      	b.n	8011eb0 <__sfp+0x18>
 8011ec6:	2104      	movs	r1, #4
 8011ec8:	4638      	mov	r0, r7
 8011eca:	f7ff ff9f 	bl	8011e0c <__sfmoreglue>
 8011ece:	6030      	str	r0, [r6, #0]
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d1f1      	bne.n	8011eb8 <__sfp+0x20>
 8011ed4:	230c      	movs	r3, #12
 8011ed6:	603b      	str	r3, [r7, #0]
 8011ed8:	4604      	mov	r4, r0
 8011eda:	4620      	mov	r0, r4
 8011edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <__sfp+0x74>)
 8011ee0:	6665      	str	r5, [r4, #100]	; 0x64
 8011ee2:	e9c4 5500 	strd	r5, r5, [r4]
 8011ee6:	60a5      	str	r5, [r4, #8]
 8011ee8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011eec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011ef0:	2208      	movs	r2, #8
 8011ef2:	4629      	mov	r1, r5
 8011ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ef8:	f7ff ff0a 	bl	8011d10 <memset>
 8011efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011f04:	e7e9      	b.n	8011eda <__sfp+0x42>
 8011f06:	bf00      	nop
 8011f08:	08015688 	.word	0x08015688
 8011f0c:	ffff0001 	.word	0xffff0001

08011f10 <_fwalk_reent>:
 8011f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f14:	4680      	mov	r8, r0
 8011f16:	4689      	mov	r9, r1
 8011f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011f1c:	2600      	movs	r6, #0
 8011f1e:	b914      	cbnz	r4, 8011f26 <_fwalk_reent+0x16>
 8011f20:	4630      	mov	r0, r6
 8011f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011f2a:	3f01      	subs	r7, #1
 8011f2c:	d501      	bpl.n	8011f32 <_fwalk_reent+0x22>
 8011f2e:	6824      	ldr	r4, [r4, #0]
 8011f30:	e7f5      	b.n	8011f1e <_fwalk_reent+0xe>
 8011f32:	89ab      	ldrh	r3, [r5, #12]
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d907      	bls.n	8011f48 <_fwalk_reent+0x38>
 8011f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	d003      	beq.n	8011f48 <_fwalk_reent+0x38>
 8011f40:	4629      	mov	r1, r5
 8011f42:	4640      	mov	r0, r8
 8011f44:	47c8      	blx	r9
 8011f46:	4306      	orrs	r6, r0
 8011f48:	3568      	adds	r5, #104	; 0x68
 8011f4a:	e7ee      	b.n	8011f2a <_fwalk_reent+0x1a>

08011f4c <malloc>:
 8011f4c:	4b02      	ldr	r3, [pc, #8]	; (8011f58 <malloc+0xc>)
 8011f4e:	4601      	mov	r1, r0
 8011f50:	6818      	ldr	r0, [r3, #0]
 8011f52:	f000 b851 	b.w	8011ff8 <_malloc_r>
 8011f56:	bf00      	nop
 8011f58:	24000030 	.word	0x24000030

08011f5c <_free_r>:
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4605      	mov	r5, r0
 8011f60:	2900      	cmp	r1, #0
 8011f62:	d045      	beq.n	8011ff0 <_free_r+0x94>
 8011f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f68:	1f0c      	subs	r4, r1, #4
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bfb8      	it	lt
 8011f6e:	18e4      	addlt	r4, r4, r3
 8011f70:	f000 fdc0 	bl	8012af4 <__malloc_lock>
 8011f74:	4a1f      	ldr	r2, [pc, #124]	; (8011ff4 <_free_r+0x98>)
 8011f76:	6813      	ldr	r3, [r2, #0]
 8011f78:	4610      	mov	r0, r2
 8011f7a:	b933      	cbnz	r3, 8011f8a <_free_r+0x2e>
 8011f7c:	6063      	str	r3, [r4, #4]
 8011f7e:	6014      	str	r4, [r2, #0]
 8011f80:	4628      	mov	r0, r5
 8011f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f86:	f000 bdb6 	b.w	8012af6 <__malloc_unlock>
 8011f8a:	42a3      	cmp	r3, r4
 8011f8c:	d90c      	bls.n	8011fa8 <_free_r+0x4c>
 8011f8e:	6821      	ldr	r1, [r4, #0]
 8011f90:	1862      	adds	r2, r4, r1
 8011f92:	4293      	cmp	r3, r2
 8011f94:	bf04      	itt	eq
 8011f96:	681a      	ldreq	r2, [r3, #0]
 8011f98:	685b      	ldreq	r3, [r3, #4]
 8011f9a:	6063      	str	r3, [r4, #4]
 8011f9c:	bf04      	itt	eq
 8011f9e:	1852      	addeq	r2, r2, r1
 8011fa0:	6022      	streq	r2, [r4, #0]
 8011fa2:	6004      	str	r4, [r0, #0]
 8011fa4:	e7ec      	b.n	8011f80 <_free_r+0x24>
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	b10a      	cbz	r2, 8011fb0 <_free_r+0x54>
 8011fac:	42a2      	cmp	r2, r4
 8011fae:	d9fa      	bls.n	8011fa6 <_free_r+0x4a>
 8011fb0:	6819      	ldr	r1, [r3, #0]
 8011fb2:	1858      	adds	r0, r3, r1
 8011fb4:	42a0      	cmp	r0, r4
 8011fb6:	d10b      	bne.n	8011fd0 <_free_r+0x74>
 8011fb8:	6820      	ldr	r0, [r4, #0]
 8011fba:	4401      	add	r1, r0
 8011fbc:	1858      	adds	r0, r3, r1
 8011fbe:	4282      	cmp	r2, r0
 8011fc0:	6019      	str	r1, [r3, #0]
 8011fc2:	d1dd      	bne.n	8011f80 <_free_r+0x24>
 8011fc4:	6810      	ldr	r0, [r2, #0]
 8011fc6:	6852      	ldr	r2, [r2, #4]
 8011fc8:	605a      	str	r2, [r3, #4]
 8011fca:	4401      	add	r1, r0
 8011fcc:	6019      	str	r1, [r3, #0]
 8011fce:	e7d7      	b.n	8011f80 <_free_r+0x24>
 8011fd0:	d902      	bls.n	8011fd8 <_free_r+0x7c>
 8011fd2:	230c      	movs	r3, #12
 8011fd4:	602b      	str	r3, [r5, #0]
 8011fd6:	e7d3      	b.n	8011f80 <_free_r+0x24>
 8011fd8:	6820      	ldr	r0, [r4, #0]
 8011fda:	1821      	adds	r1, r4, r0
 8011fdc:	428a      	cmp	r2, r1
 8011fde:	bf04      	itt	eq
 8011fe0:	6811      	ldreq	r1, [r2, #0]
 8011fe2:	6852      	ldreq	r2, [r2, #4]
 8011fe4:	6062      	str	r2, [r4, #4]
 8011fe6:	bf04      	itt	eq
 8011fe8:	1809      	addeq	r1, r1, r0
 8011fea:	6021      	streq	r1, [r4, #0]
 8011fec:	605c      	str	r4, [r3, #4]
 8011fee:	e7c7      	b.n	8011f80 <_free_r+0x24>
 8011ff0:	bd38      	pop	{r3, r4, r5, pc}
 8011ff2:	bf00      	nop
 8011ff4:	2400022c 	.word	0x2400022c

08011ff8 <_malloc_r>:
 8011ff8:	b570      	push	{r4, r5, r6, lr}
 8011ffa:	1ccd      	adds	r5, r1, #3
 8011ffc:	f025 0503 	bic.w	r5, r5, #3
 8012000:	3508      	adds	r5, #8
 8012002:	2d0c      	cmp	r5, #12
 8012004:	bf38      	it	cc
 8012006:	250c      	movcc	r5, #12
 8012008:	2d00      	cmp	r5, #0
 801200a:	4606      	mov	r6, r0
 801200c:	db01      	blt.n	8012012 <_malloc_r+0x1a>
 801200e:	42a9      	cmp	r1, r5
 8012010:	d903      	bls.n	801201a <_malloc_r+0x22>
 8012012:	230c      	movs	r3, #12
 8012014:	6033      	str	r3, [r6, #0]
 8012016:	2000      	movs	r0, #0
 8012018:	bd70      	pop	{r4, r5, r6, pc}
 801201a:	f000 fd6b 	bl	8012af4 <__malloc_lock>
 801201e:	4a21      	ldr	r2, [pc, #132]	; (80120a4 <_malloc_r+0xac>)
 8012020:	6814      	ldr	r4, [r2, #0]
 8012022:	4621      	mov	r1, r4
 8012024:	b991      	cbnz	r1, 801204c <_malloc_r+0x54>
 8012026:	4c20      	ldr	r4, [pc, #128]	; (80120a8 <_malloc_r+0xb0>)
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	b91b      	cbnz	r3, 8012034 <_malloc_r+0x3c>
 801202c:	4630      	mov	r0, r6
 801202e:	f000 fb05 	bl	801263c <_sbrk_r>
 8012032:	6020      	str	r0, [r4, #0]
 8012034:	4629      	mov	r1, r5
 8012036:	4630      	mov	r0, r6
 8012038:	f000 fb00 	bl	801263c <_sbrk_r>
 801203c:	1c43      	adds	r3, r0, #1
 801203e:	d124      	bne.n	801208a <_malloc_r+0x92>
 8012040:	230c      	movs	r3, #12
 8012042:	6033      	str	r3, [r6, #0]
 8012044:	4630      	mov	r0, r6
 8012046:	f000 fd56 	bl	8012af6 <__malloc_unlock>
 801204a:	e7e4      	b.n	8012016 <_malloc_r+0x1e>
 801204c:	680b      	ldr	r3, [r1, #0]
 801204e:	1b5b      	subs	r3, r3, r5
 8012050:	d418      	bmi.n	8012084 <_malloc_r+0x8c>
 8012052:	2b0b      	cmp	r3, #11
 8012054:	d90f      	bls.n	8012076 <_malloc_r+0x7e>
 8012056:	600b      	str	r3, [r1, #0]
 8012058:	50cd      	str	r5, [r1, r3]
 801205a:	18cc      	adds	r4, r1, r3
 801205c:	4630      	mov	r0, r6
 801205e:	f000 fd4a 	bl	8012af6 <__malloc_unlock>
 8012062:	f104 000b 	add.w	r0, r4, #11
 8012066:	1d23      	adds	r3, r4, #4
 8012068:	f020 0007 	bic.w	r0, r0, #7
 801206c:	1ac3      	subs	r3, r0, r3
 801206e:	d0d3      	beq.n	8012018 <_malloc_r+0x20>
 8012070:	425a      	negs	r2, r3
 8012072:	50e2      	str	r2, [r4, r3]
 8012074:	e7d0      	b.n	8012018 <_malloc_r+0x20>
 8012076:	428c      	cmp	r4, r1
 8012078:	684b      	ldr	r3, [r1, #4]
 801207a:	bf16      	itet	ne
 801207c:	6063      	strne	r3, [r4, #4]
 801207e:	6013      	streq	r3, [r2, #0]
 8012080:	460c      	movne	r4, r1
 8012082:	e7eb      	b.n	801205c <_malloc_r+0x64>
 8012084:	460c      	mov	r4, r1
 8012086:	6849      	ldr	r1, [r1, #4]
 8012088:	e7cc      	b.n	8012024 <_malloc_r+0x2c>
 801208a:	1cc4      	adds	r4, r0, #3
 801208c:	f024 0403 	bic.w	r4, r4, #3
 8012090:	42a0      	cmp	r0, r4
 8012092:	d005      	beq.n	80120a0 <_malloc_r+0xa8>
 8012094:	1a21      	subs	r1, r4, r0
 8012096:	4630      	mov	r0, r6
 8012098:	f000 fad0 	bl	801263c <_sbrk_r>
 801209c:	3001      	adds	r0, #1
 801209e:	d0cf      	beq.n	8012040 <_malloc_r+0x48>
 80120a0:	6025      	str	r5, [r4, #0]
 80120a2:	e7db      	b.n	801205c <_malloc_r+0x64>
 80120a4:	2400022c 	.word	0x2400022c
 80120a8:	24000230 	.word	0x24000230

080120ac <__sfputc_r>:
 80120ac:	6893      	ldr	r3, [r2, #8]
 80120ae:	3b01      	subs	r3, #1
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	b410      	push	{r4}
 80120b4:	6093      	str	r3, [r2, #8]
 80120b6:	da08      	bge.n	80120ca <__sfputc_r+0x1e>
 80120b8:	6994      	ldr	r4, [r2, #24]
 80120ba:	42a3      	cmp	r3, r4
 80120bc:	db01      	blt.n	80120c2 <__sfputc_r+0x16>
 80120be:	290a      	cmp	r1, #10
 80120c0:	d103      	bne.n	80120ca <__sfputc_r+0x1e>
 80120c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120c6:	f000 bb0d 	b.w	80126e4 <__swbuf_r>
 80120ca:	6813      	ldr	r3, [r2, #0]
 80120cc:	1c58      	adds	r0, r3, #1
 80120ce:	6010      	str	r0, [r2, #0]
 80120d0:	7019      	strb	r1, [r3, #0]
 80120d2:	4608      	mov	r0, r1
 80120d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d8:	4770      	bx	lr

080120da <__sfputs_r>:
 80120da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120dc:	4606      	mov	r6, r0
 80120de:	460f      	mov	r7, r1
 80120e0:	4614      	mov	r4, r2
 80120e2:	18d5      	adds	r5, r2, r3
 80120e4:	42ac      	cmp	r4, r5
 80120e6:	d101      	bne.n	80120ec <__sfputs_r+0x12>
 80120e8:	2000      	movs	r0, #0
 80120ea:	e007      	b.n	80120fc <__sfputs_r+0x22>
 80120ec:	463a      	mov	r2, r7
 80120ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f2:	4630      	mov	r0, r6
 80120f4:	f7ff ffda 	bl	80120ac <__sfputc_r>
 80120f8:	1c43      	adds	r3, r0, #1
 80120fa:	d1f3      	bne.n	80120e4 <__sfputs_r+0xa>
 80120fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012100 <_vfiprintf_r>:
 8012100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	460c      	mov	r4, r1
 8012106:	b09d      	sub	sp, #116	; 0x74
 8012108:	4617      	mov	r7, r2
 801210a:	461d      	mov	r5, r3
 801210c:	4606      	mov	r6, r0
 801210e:	b118      	cbz	r0, 8012118 <_vfiprintf_r+0x18>
 8012110:	6983      	ldr	r3, [r0, #24]
 8012112:	b90b      	cbnz	r3, 8012118 <_vfiprintf_r+0x18>
 8012114:	f7ff fe90 	bl	8011e38 <__sinit>
 8012118:	4b7c      	ldr	r3, [pc, #496]	; (801230c <_vfiprintf_r+0x20c>)
 801211a:	429c      	cmp	r4, r3
 801211c:	d158      	bne.n	80121d0 <_vfiprintf_r+0xd0>
 801211e:	6874      	ldr	r4, [r6, #4]
 8012120:	89a3      	ldrh	r3, [r4, #12]
 8012122:	0718      	lsls	r0, r3, #28
 8012124:	d55e      	bpl.n	80121e4 <_vfiprintf_r+0xe4>
 8012126:	6923      	ldr	r3, [r4, #16]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d05b      	beq.n	80121e4 <_vfiprintf_r+0xe4>
 801212c:	2300      	movs	r3, #0
 801212e:	9309      	str	r3, [sp, #36]	; 0x24
 8012130:	2320      	movs	r3, #32
 8012132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012136:	2330      	movs	r3, #48	; 0x30
 8012138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801213c:	9503      	str	r5, [sp, #12]
 801213e:	f04f 0b01 	mov.w	fp, #1
 8012142:	46b8      	mov	r8, r7
 8012144:	4645      	mov	r5, r8
 8012146:	f815 3b01 	ldrb.w	r3, [r5], #1
 801214a:	b10b      	cbz	r3, 8012150 <_vfiprintf_r+0x50>
 801214c:	2b25      	cmp	r3, #37	; 0x25
 801214e:	d154      	bne.n	80121fa <_vfiprintf_r+0xfa>
 8012150:	ebb8 0a07 	subs.w	sl, r8, r7
 8012154:	d00b      	beq.n	801216e <_vfiprintf_r+0x6e>
 8012156:	4653      	mov	r3, sl
 8012158:	463a      	mov	r2, r7
 801215a:	4621      	mov	r1, r4
 801215c:	4630      	mov	r0, r6
 801215e:	f7ff ffbc 	bl	80120da <__sfputs_r>
 8012162:	3001      	adds	r0, #1
 8012164:	f000 80c2 	beq.w	80122ec <_vfiprintf_r+0x1ec>
 8012168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801216a:	4453      	add	r3, sl
 801216c:	9309      	str	r3, [sp, #36]	; 0x24
 801216e:	f898 3000 	ldrb.w	r3, [r8]
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 80ba 	beq.w	80122ec <_vfiprintf_r+0x1ec>
 8012178:	2300      	movs	r3, #0
 801217a:	f04f 32ff 	mov.w	r2, #4294967295
 801217e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012182:	9304      	str	r3, [sp, #16]
 8012184:	9307      	str	r3, [sp, #28]
 8012186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801218a:	931a      	str	r3, [sp, #104]	; 0x68
 801218c:	46a8      	mov	r8, r5
 801218e:	2205      	movs	r2, #5
 8012190:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012194:	485e      	ldr	r0, [pc, #376]	; (8012310 <_vfiprintf_r+0x210>)
 8012196:	f7ee f8ab 	bl	80002f0 <memchr>
 801219a:	9b04      	ldr	r3, [sp, #16]
 801219c:	bb78      	cbnz	r0, 80121fe <_vfiprintf_r+0xfe>
 801219e:	06d9      	lsls	r1, r3, #27
 80121a0:	bf44      	itt	mi
 80121a2:	2220      	movmi	r2, #32
 80121a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121a8:	071a      	lsls	r2, r3, #28
 80121aa:	bf44      	itt	mi
 80121ac:	222b      	movmi	r2, #43	; 0x2b
 80121ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121b2:	782a      	ldrb	r2, [r5, #0]
 80121b4:	2a2a      	cmp	r2, #42	; 0x2a
 80121b6:	d02a      	beq.n	801220e <_vfiprintf_r+0x10e>
 80121b8:	9a07      	ldr	r2, [sp, #28]
 80121ba:	46a8      	mov	r8, r5
 80121bc:	2000      	movs	r0, #0
 80121be:	250a      	movs	r5, #10
 80121c0:	4641      	mov	r1, r8
 80121c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121c6:	3b30      	subs	r3, #48	; 0x30
 80121c8:	2b09      	cmp	r3, #9
 80121ca:	d969      	bls.n	80122a0 <_vfiprintf_r+0x1a0>
 80121cc:	b360      	cbz	r0, 8012228 <_vfiprintf_r+0x128>
 80121ce:	e024      	b.n	801221a <_vfiprintf_r+0x11a>
 80121d0:	4b50      	ldr	r3, [pc, #320]	; (8012314 <_vfiprintf_r+0x214>)
 80121d2:	429c      	cmp	r4, r3
 80121d4:	d101      	bne.n	80121da <_vfiprintf_r+0xda>
 80121d6:	68b4      	ldr	r4, [r6, #8]
 80121d8:	e7a2      	b.n	8012120 <_vfiprintf_r+0x20>
 80121da:	4b4f      	ldr	r3, [pc, #316]	; (8012318 <_vfiprintf_r+0x218>)
 80121dc:	429c      	cmp	r4, r3
 80121de:	bf08      	it	eq
 80121e0:	68f4      	ldreq	r4, [r6, #12]
 80121e2:	e79d      	b.n	8012120 <_vfiprintf_r+0x20>
 80121e4:	4621      	mov	r1, r4
 80121e6:	4630      	mov	r0, r6
 80121e8:	f000 fae0 	bl	80127ac <__swsetup_r>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d09d      	beq.n	801212c <_vfiprintf_r+0x2c>
 80121f0:	f04f 30ff 	mov.w	r0, #4294967295
 80121f4:	b01d      	add	sp, #116	; 0x74
 80121f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fa:	46a8      	mov	r8, r5
 80121fc:	e7a2      	b.n	8012144 <_vfiprintf_r+0x44>
 80121fe:	4a44      	ldr	r2, [pc, #272]	; (8012310 <_vfiprintf_r+0x210>)
 8012200:	1a80      	subs	r0, r0, r2
 8012202:	fa0b f000 	lsl.w	r0, fp, r0
 8012206:	4318      	orrs	r0, r3
 8012208:	9004      	str	r0, [sp, #16]
 801220a:	4645      	mov	r5, r8
 801220c:	e7be      	b.n	801218c <_vfiprintf_r+0x8c>
 801220e:	9a03      	ldr	r2, [sp, #12]
 8012210:	1d11      	adds	r1, r2, #4
 8012212:	6812      	ldr	r2, [r2, #0]
 8012214:	9103      	str	r1, [sp, #12]
 8012216:	2a00      	cmp	r2, #0
 8012218:	db01      	blt.n	801221e <_vfiprintf_r+0x11e>
 801221a:	9207      	str	r2, [sp, #28]
 801221c:	e004      	b.n	8012228 <_vfiprintf_r+0x128>
 801221e:	4252      	negs	r2, r2
 8012220:	f043 0302 	orr.w	r3, r3, #2
 8012224:	9207      	str	r2, [sp, #28]
 8012226:	9304      	str	r3, [sp, #16]
 8012228:	f898 3000 	ldrb.w	r3, [r8]
 801222c:	2b2e      	cmp	r3, #46	; 0x2e
 801222e:	d10e      	bne.n	801224e <_vfiprintf_r+0x14e>
 8012230:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012234:	2b2a      	cmp	r3, #42	; 0x2a
 8012236:	d138      	bne.n	80122aa <_vfiprintf_r+0x1aa>
 8012238:	9b03      	ldr	r3, [sp, #12]
 801223a:	1d1a      	adds	r2, r3, #4
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	9203      	str	r2, [sp, #12]
 8012240:	2b00      	cmp	r3, #0
 8012242:	bfb8      	it	lt
 8012244:	f04f 33ff 	movlt.w	r3, #4294967295
 8012248:	f108 0802 	add.w	r8, r8, #2
 801224c:	9305      	str	r3, [sp, #20]
 801224e:	4d33      	ldr	r5, [pc, #204]	; (801231c <_vfiprintf_r+0x21c>)
 8012250:	f898 1000 	ldrb.w	r1, [r8]
 8012254:	2203      	movs	r2, #3
 8012256:	4628      	mov	r0, r5
 8012258:	f7ee f84a 	bl	80002f0 <memchr>
 801225c:	b140      	cbz	r0, 8012270 <_vfiprintf_r+0x170>
 801225e:	2340      	movs	r3, #64	; 0x40
 8012260:	1b40      	subs	r0, r0, r5
 8012262:	fa03 f000 	lsl.w	r0, r3, r0
 8012266:	9b04      	ldr	r3, [sp, #16]
 8012268:	4303      	orrs	r3, r0
 801226a:	f108 0801 	add.w	r8, r8, #1
 801226e:	9304      	str	r3, [sp, #16]
 8012270:	f898 1000 	ldrb.w	r1, [r8]
 8012274:	482a      	ldr	r0, [pc, #168]	; (8012320 <_vfiprintf_r+0x220>)
 8012276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801227a:	2206      	movs	r2, #6
 801227c:	f108 0701 	add.w	r7, r8, #1
 8012280:	f7ee f836 	bl	80002f0 <memchr>
 8012284:	2800      	cmp	r0, #0
 8012286:	d037      	beq.n	80122f8 <_vfiprintf_r+0x1f8>
 8012288:	4b26      	ldr	r3, [pc, #152]	; (8012324 <_vfiprintf_r+0x224>)
 801228a:	bb1b      	cbnz	r3, 80122d4 <_vfiprintf_r+0x1d4>
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	3307      	adds	r3, #7
 8012290:	f023 0307 	bic.w	r3, r3, #7
 8012294:	3308      	adds	r3, #8
 8012296:	9303      	str	r3, [sp, #12]
 8012298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801229a:	444b      	add	r3, r9
 801229c:	9309      	str	r3, [sp, #36]	; 0x24
 801229e:	e750      	b.n	8012142 <_vfiprintf_r+0x42>
 80122a0:	fb05 3202 	mla	r2, r5, r2, r3
 80122a4:	2001      	movs	r0, #1
 80122a6:	4688      	mov	r8, r1
 80122a8:	e78a      	b.n	80121c0 <_vfiprintf_r+0xc0>
 80122aa:	2300      	movs	r3, #0
 80122ac:	f108 0801 	add.w	r8, r8, #1
 80122b0:	9305      	str	r3, [sp, #20]
 80122b2:	4619      	mov	r1, r3
 80122b4:	250a      	movs	r5, #10
 80122b6:	4640      	mov	r0, r8
 80122b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122bc:	3a30      	subs	r2, #48	; 0x30
 80122be:	2a09      	cmp	r2, #9
 80122c0:	d903      	bls.n	80122ca <_vfiprintf_r+0x1ca>
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0c3      	beq.n	801224e <_vfiprintf_r+0x14e>
 80122c6:	9105      	str	r1, [sp, #20]
 80122c8:	e7c1      	b.n	801224e <_vfiprintf_r+0x14e>
 80122ca:	fb05 2101 	mla	r1, r5, r1, r2
 80122ce:	2301      	movs	r3, #1
 80122d0:	4680      	mov	r8, r0
 80122d2:	e7f0      	b.n	80122b6 <_vfiprintf_r+0x1b6>
 80122d4:	ab03      	add	r3, sp, #12
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	4622      	mov	r2, r4
 80122da:	4b13      	ldr	r3, [pc, #76]	; (8012328 <_vfiprintf_r+0x228>)
 80122dc:	a904      	add	r1, sp, #16
 80122de:	4630      	mov	r0, r6
 80122e0:	f3af 8000 	nop.w
 80122e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80122e8:	4681      	mov	r9, r0
 80122ea:	d1d5      	bne.n	8012298 <_vfiprintf_r+0x198>
 80122ec:	89a3      	ldrh	r3, [r4, #12]
 80122ee:	065b      	lsls	r3, r3, #25
 80122f0:	f53f af7e 	bmi.w	80121f0 <_vfiprintf_r+0xf0>
 80122f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122f6:	e77d      	b.n	80121f4 <_vfiprintf_r+0xf4>
 80122f8:	ab03      	add	r3, sp, #12
 80122fa:	9300      	str	r3, [sp, #0]
 80122fc:	4622      	mov	r2, r4
 80122fe:	4b0a      	ldr	r3, [pc, #40]	; (8012328 <_vfiprintf_r+0x228>)
 8012300:	a904      	add	r1, sp, #16
 8012302:	4630      	mov	r0, r6
 8012304:	f000 f888 	bl	8012418 <_printf_i>
 8012308:	e7ec      	b.n	80122e4 <_vfiprintf_r+0x1e4>
 801230a:	bf00      	nop
 801230c:	080156ac 	.word	0x080156ac
 8012310:	080156ec 	.word	0x080156ec
 8012314:	080156cc 	.word	0x080156cc
 8012318:	0801568c 	.word	0x0801568c
 801231c:	080156f2 	.word	0x080156f2
 8012320:	080156f6 	.word	0x080156f6
 8012324:	00000000 	.word	0x00000000
 8012328:	080120db 	.word	0x080120db

0801232c <_printf_common>:
 801232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012330:	4691      	mov	r9, r2
 8012332:	461f      	mov	r7, r3
 8012334:	688a      	ldr	r2, [r1, #8]
 8012336:	690b      	ldr	r3, [r1, #16]
 8012338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801233c:	4293      	cmp	r3, r2
 801233e:	bfb8      	it	lt
 8012340:	4613      	movlt	r3, r2
 8012342:	f8c9 3000 	str.w	r3, [r9]
 8012346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801234a:	4606      	mov	r6, r0
 801234c:	460c      	mov	r4, r1
 801234e:	b112      	cbz	r2, 8012356 <_printf_common+0x2a>
 8012350:	3301      	adds	r3, #1
 8012352:	f8c9 3000 	str.w	r3, [r9]
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	0699      	lsls	r1, r3, #26
 801235a:	bf42      	ittt	mi
 801235c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012360:	3302      	addmi	r3, #2
 8012362:	f8c9 3000 	strmi.w	r3, [r9]
 8012366:	6825      	ldr	r5, [r4, #0]
 8012368:	f015 0506 	ands.w	r5, r5, #6
 801236c:	d107      	bne.n	801237e <_printf_common+0x52>
 801236e:	f104 0a19 	add.w	sl, r4, #25
 8012372:	68e3      	ldr	r3, [r4, #12]
 8012374:	f8d9 2000 	ldr.w	r2, [r9]
 8012378:	1a9b      	subs	r3, r3, r2
 801237a:	42ab      	cmp	r3, r5
 801237c:	dc28      	bgt.n	80123d0 <_printf_common+0xa4>
 801237e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012382:	6822      	ldr	r2, [r4, #0]
 8012384:	3300      	adds	r3, #0
 8012386:	bf18      	it	ne
 8012388:	2301      	movne	r3, #1
 801238a:	0692      	lsls	r2, r2, #26
 801238c:	d42d      	bmi.n	80123ea <_printf_common+0xbe>
 801238e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012392:	4639      	mov	r1, r7
 8012394:	4630      	mov	r0, r6
 8012396:	47c0      	blx	r8
 8012398:	3001      	adds	r0, #1
 801239a:	d020      	beq.n	80123de <_printf_common+0xb2>
 801239c:	6823      	ldr	r3, [r4, #0]
 801239e:	68e5      	ldr	r5, [r4, #12]
 80123a0:	f8d9 2000 	ldr.w	r2, [r9]
 80123a4:	f003 0306 	and.w	r3, r3, #6
 80123a8:	2b04      	cmp	r3, #4
 80123aa:	bf08      	it	eq
 80123ac:	1aad      	subeq	r5, r5, r2
 80123ae:	68a3      	ldr	r3, [r4, #8]
 80123b0:	6922      	ldr	r2, [r4, #16]
 80123b2:	bf0c      	ite	eq
 80123b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123b8:	2500      	movne	r5, #0
 80123ba:	4293      	cmp	r3, r2
 80123bc:	bfc4      	itt	gt
 80123be:	1a9b      	subgt	r3, r3, r2
 80123c0:	18ed      	addgt	r5, r5, r3
 80123c2:	f04f 0900 	mov.w	r9, #0
 80123c6:	341a      	adds	r4, #26
 80123c8:	454d      	cmp	r5, r9
 80123ca:	d11a      	bne.n	8012402 <_printf_common+0xd6>
 80123cc:	2000      	movs	r0, #0
 80123ce:	e008      	b.n	80123e2 <_printf_common+0xb6>
 80123d0:	2301      	movs	r3, #1
 80123d2:	4652      	mov	r2, sl
 80123d4:	4639      	mov	r1, r7
 80123d6:	4630      	mov	r0, r6
 80123d8:	47c0      	blx	r8
 80123da:	3001      	adds	r0, #1
 80123dc:	d103      	bne.n	80123e6 <_printf_common+0xba>
 80123de:	f04f 30ff 	mov.w	r0, #4294967295
 80123e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e6:	3501      	adds	r5, #1
 80123e8:	e7c3      	b.n	8012372 <_printf_common+0x46>
 80123ea:	18e1      	adds	r1, r4, r3
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	2030      	movs	r0, #48	; 0x30
 80123f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80123f4:	4422      	add	r2, r4
 80123f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80123fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80123fe:	3302      	adds	r3, #2
 8012400:	e7c5      	b.n	801238e <_printf_common+0x62>
 8012402:	2301      	movs	r3, #1
 8012404:	4622      	mov	r2, r4
 8012406:	4639      	mov	r1, r7
 8012408:	4630      	mov	r0, r6
 801240a:	47c0      	blx	r8
 801240c:	3001      	adds	r0, #1
 801240e:	d0e6      	beq.n	80123de <_printf_common+0xb2>
 8012410:	f109 0901 	add.w	r9, r9, #1
 8012414:	e7d8      	b.n	80123c8 <_printf_common+0x9c>
	...

08012418 <_printf_i>:
 8012418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801241c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012420:	460c      	mov	r4, r1
 8012422:	7e09      	ldrb	r1, [r1, #24]
 8012424:	b085      	sub	sp, #20
 8012426:	296e      	cmp	r1, #110	; 0x6e
 8012428:	4617      	mov	r7, r2
 801242a:	4606      	mov	r6, r0
 801242c:	4698      	mov	r8, r3
 801242e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012430:	f000 80b3 	beq.w	801259a <_printf_i+0x182>
 8012434:	d822      	bhi.n	801247c <_printf_i+0x64>
 8012436:	2963      	cmp	r1, #99	; 0x63
 8012438:	d036      	beq.n	80124a8 <_printf_i+0x90>
 801243a:	d80a      	bhi.n	8012452 <_printf_i+0x3a>
 801243c:	2900      	cmp	r1, #0
 801243e:	f000 80b9 	beq.w	80125b4 <_printf_i+0x19c>
 8012442:	2958      	cmp	r1, #88	; 0x58
 8012444:	f000 8083 	beq.w	801254e <_printf_i+0x136>
 8012448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801244c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012450:	e032      	b.n	80124b8 <_printf_i+0xa0>
 8012452:	2964      	cmp	r1, #100	; 0x64
 8012454:	d001      	beq.n	801245a <_printf_i+0x42>
 8012456:	2969      	cmp	r1, #105	; 0x69
 8012458:	d1f6      	bne.n	8012448 <_printf_i+0x30>
 801245a:	6820      	ldr	r0, [r4, #0]
 801245c:	6813      	ldr	r3, [r2, #0]
 801245e:	0605      	lsls	r5, r0, #24
 8012460:	f103 0104 	add.w	r1, r3, #4
 8012464:	d52a      	bpl.n	80124bc <_printf_i+0xa4>
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	6011      	str	r1, [r2, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	da03      	bge.n	8012476 <_printf_i+0x5e>
 801246e:	222d      	movs	r2, #45	; 0x2d
 8012470:	425b      	negs	r3, r3
 8012472:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012476:	486f      	ldr	r0, [pc, #444]	; (8012634 <_printf_i+0x21c>)
 8012478:	220a      	movs	r2, #10
 801247a:	e039      	b.n	80124f0 <_printf_i+0xd8>
 801247c:	2973      	cmp	r1, #115	; 0x73
 801247e:	f000 809d 	beq.w	80125bc <_printf_i+0x1a4>
 8012482:	d808      	bhi.n	8012496 <_printf_i+0x7e>
 8012484:	296f      	cmp	r1, #111	; 0x6f
 8012486:	d020      	beq.n	80124ca <_printf_i+0xb2>
 8012488:	2970      	cmp	r1, #112	; 0x70
 801248a:	d1dd      	bne.n	8012448 <_printf_i+0x30>
 801248c:	6823      	ldr	r3, [r4, #0]
 801248e:	f043 0320 	orr.w	r3, r3, #32
 8012492:	6023      	str	r3, [r4, #0]
 8012494:	e003      	b.n	801249e <_printf_i+0x86>
 8012496:	2975      	cmp	r1, #117	; 0x75
 8012498:	d017      	beq.n	80124ca <_printf_i+0xb2>
 801249a:	2978      	cmp	r1, #120	; 0x78
 801249c:	d1d4      	bne.n	8012448 <_printf_i+0x30>
 801249e:	2378      	movs	r3, #120	; 0x78
 80124a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124a4:	4864      	ldr	r0, [pc, #400]	; (8012638 <_printf_i+0x220>)
 80124a6:	e055      	b.n	8012554 <_printf_i+0x13c>
 80124a8:	6813      	ldr	r3, [r2, #0]
 80124aa:	1d19      	adds	r1, r3, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	6011      	str	r1, [r2, #0]
 80124b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124b8:	2301      	movs	r3, #1
 80124ba:	e08c      	b.n	80125d6 <_printf_i+0x1be>
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	6011      	str	r1, [r2, #0]
 80124c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124c4:	bf18      	it	ne
 80124c6:	b21b      	sxthne	r3, r3
 80124c8:	e7cf      	b.n	801246a <_printf_i+0x52>
 80124ca:	6813      	ldr	r3, [r2, #0]
 80124cc:	6825      	ldr	r5, [r4, #0]
 80124ce:	1d18      	adds	r0, r3, #4
 80124d0:	6010      	str	r0, [r2, #0]
 80124d2:	0628      	lsls	r0, r5, #24
 80124d4:	d501      	bpl.n	80124da <_printf_i+0xc2>
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	e002      	b.n	80124e0 <_printf_i+0xc8>
 80124da:	0668      	lsls	r0, r5, #25
 80124dc:	d5fb      	bpl.n	80124d6 <_printf_i+0xbe>
 80124de:	881b      	ldrh	r3, [r3, #0]
 80124e0:	4854      	ldr	r0, [pc, #336]	; (8012634 <_printf_i+0x21c>)
 80124e2:	296f      	cmp	r1, #111	; 0x6f
 80124e4:	bf14      	ite	ne
 80124e6:	220a      	movne	r2, #10
 80124e8:	2208      	moveq	r2, #8
 80124ea:	2100      	movs	r1, #0
 80124ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80124f0:	6865      	ldr	r5, [r4, #4]
 80124f2:	60a5      	str	r5, [r4, #8]
 80124f4:	2d00      	cmp	r5, #0
 80124f6:	f2c0 8095 	blt.w	8012624 <_printf_i+0x20c>
 80124fa:	6821      	ldr	r1, [r4, #0]
 80124fc:	f021 0104 	bic.w	r1, r1, #4
 8012500:	6021      	str	r1, [r4, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d13d      	bne.n	8012582 <_printf_i+0x16a>
 8012506:	2d00      	cmp	r5, #0
 8012508:	f040 808e 	bne.w	8012628 <_printf_i+0x210>
 801250c:	4665      	mov	r5, ip
 801250e:	2a08      	cmp	r2, #8
 8012510:	d10b      	bne.n	801252a <_printf_i+0x112>
 8012512:	6823      	ldr	r3, [r4, #0]
 8012514:	07db      	lsls	r3, r3, #31
 8012516:	d508      	bpl.n	801252a <_printf_i+0x112>
 8012518:	6923      	ldr	r3, [r4, #16]
 801251a:	6862      	ldr	r2, [r4, #4]
 801251c:	429a      	cmp	r2, r3
 801251e:	bfde      	ittt	le
 8012520:	2330      	movle	r3, #48	; 0x30
 8012522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012526:	f105 35ff 	addle.w	r5, r5, #4294967295
 801252a:	ebac 0305 	sub.w	r3, ip, r5
 801252e:	6123      	str	r3, [r4, #16]
 8012530:	f8cd 8000 	str.w	r8, [sp]
 8012534:	463b      	mov	r3, r7
 8012536:	aa03      	add	r2, sp, #12
 8012538:	4621      	mov	r1, r4
 801253a:	4630      	mov	r0, r6
 801253c:	f7ff fef6 	bl	801232c <_printf_common>
 8012540:	3001      	adds	r0, #1
 8012542:	d14d      	bne.n	80125e0 <_printf_i+0x1c8>
 8012544:	f04f 30ff 	mov.w	r0, #4294967295
 8012548:	b005      	add	sp, #20
 801254a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801254e:	4839      	ldr	r0, [pc, #228]	; (8012634 <_printf_i+0x21c>)
 8012550:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012554:	6813      	ldr	r3, [r2, #0]
 8012556:	6821      	ldr	r1, [r4, #0]
 8012558:	1d1d      	adds	r5, r3, #4
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	6015      	str	r5, [r2, #0]
 801255e:	060a      	lsls	r2, r1, #24
 8012560:	d50b      	bpl.n	801257a <_printf_i+0x162>
 8012562:	07ca      	lsls	r2, r1, #31
 8012564:	bf44      	itt	mi
 8012566:	f041 0120 	orrmi.w	r1, r1, #32
 801256a:	6021      	strmi	r1, [r4, #0]
 801256c:	b91b      	cbnz	r3, 8012576 <_printf_i+0x15e>
 801256e:	6822      	ldr	r2, [r4, #0]
 8012570:	f022 0220 	bic.w	r2, r2, #32
 8012574:	6022      	str	r2, [r4, #0]
 8012576:	2210      	movs	r2, #16
 8012578:	e7b7      	b.n	80124ea <_printf_i+0xd2>
 801257a:	064d      	lsls	r5, r1, #25
 801257c:	bf48      	it	mi
 801257e:	b29b      	uxthmi	r3, r3
 8012580:	e7ef      	b.n	8012562 <_printf_i+0x14a>
 8012582:	4665      	mov	r5, ip
 8012584:	fbb3 f1f2 	udiv	r1, r3, r2
 8012588:	fb02 3311 	mls	r3, r2, r1, r3
 801258c:	5cc3      	ldrb	r3, [r0, r3]
 801258e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012592:	460b      	mov	r3, r1
 8012594:	2900      	cmp	r1, #0
 8012596:	d1f5      	bne.n	8012584 <_printf_i+0x16c>
 8012598:	e7b9      	b.n	801250e <_printf_i+0xf6>
 801259a:	6813      	ldr	r3, [r2, #0]
 801259c:	6825      	ldr	r5, [r4, #0]
 801259e:	6961      	ldr	r1, [r4, #20]
 80125a0:	1d18      	adds	r0, r3, #4
 80125a2:	6010      	str	r0, [r2, #0]
 80125a4:	0628      	lsls	r0, r5, #24
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	d501      	bpl.n	80125ae <_printf_i+0x196>
 80125aa:	6019      	str	r1, [r3, #0]
 80125ac:	e002      	b.n	80125b4 <_printf_i+0x19c>
 80125ae:	066a      	lsls	r2, r5, #25
 80125b0:	d5fb      	bpl.n	80125aa <_printf_i+0x192>
 80125b2:	8019      	strh	r1, [r3, #0]
 80125b4:	2300      	movs	r3, #0
 80125b6:	6123      	str	r3, [r4, #16]
 80125b8:	4665      	mov	r5, ip
 80125ba:	e7b9      	b.n	8012530 <_printf_i+0x118>
 80125bc:	6813      	ldr	r3, [r2, #0]
 80125be:	1d19      	adds	r1, r3, #4
 80125c0:	6011      	str	r1, [r2, #0]
 80125c2:	681d      	ldr	r5, [r3, #0]
 80125c4:	6862      	ldr	r2, [r4, #4]
 80125c6:	2100      	movs	r1, #0
 80125c8:	4628      	mov	r0, r5
 80125ca:	f7ed fe91 	bl	80002f0 <memchr>
 80125ce:	b108      	cbz	r0, 80125d4 <_printf_i+0x1bc>
 80125d0:	1b40      	subs	r0, r0, r5
 80125d2:	6060      	str	r0, [r4, #4]
 80125d4:	6863      	ldr	r3, [r4, #4]
 80125d6:	6123      	str	r3, [r4, #16]
 80125d8:	2300      	movs	r3, #0
 80125da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125de:	e7a7      	b.n	8012530 <_printf_i+0x118>
 80125e0:	6923      	ldr	r3, [r4, #16]
 80125e2:	462a      	mov	r2, r5
 80125e4:	4639      	mov	r1, r7
 80125e6:	4630      	mov	r0, r6
 80125e8:	47c0      	blx	r8
 80125ea:	3001      	adds	r0, #1
 80125ec:	d0aa      	beq.n	8012544 <_printf_i+0x12c>
 80125ee:	6823      	ldr	r3, [r4, #0]
 80125f0:	079b      	lsls	r3, r3, #30
 80125f2:	d413      	bmi.n	801261c <_printf_i+0x204>
 80125f4:	68e0      	ldr	r0, [r4, #12]
 80125f6:	9b03      	ldr	r3, [sp, #12]
 80125f8:	4298      	cmp	r0, r3
 80125fa:	bfb8      	it	lt
 80125fc:	4618      	movlt	r0, r3
 80125fe:	e7a3      	b.n	8012548 <_printf_i+0x130>
 8012600:	2301      	movs	r3, #1
 8012602:	464a      	mov	r2, r9
 8012604:	4639      	mov	r1, r7
 8012606:	4630      	mov	r0, r6
 8012608:	47c0      	blx	r8
 801260a:	3001      	adds	r0, #1
 801260c:	d09a      	beq.n	8012544 <_printf_i+0x12c>
 801260e:	3501      	adds	r5, #1
 8012610:	68e3      	ldr	r3, [r4, #12]
 8012612:	9a03      	ldr	r2, [sp, #12]
 8012614:	1a9b      	subs	r3, r3, r2
 8012616:	42ab      	cmp	r3, r5
 8012618:	dcf2      	bgt.n	8012600 <_printf_i+0x1e8>
 801261a:	e7eb      	b.n	80125f4 <_printf_i+0x1dc>
 801261c:	2500      	movs	r5, #0
 801261e:	f104 0919 	add.w	r9, r4, #25
 8012622:	e7f5      	b.n	8012610 <_printf_i+0x1f8>
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1ac      	bne.n	8012582 <_printf_i+0x16a>
 8012628:	7803      	ldrb	r3, [r0, #0]
 801262a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801262e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012632:	e76c      	b.n	801250e <_printf_i+0xf6>
 8012634:	080156fd 	.word	0x080156fd
 8012638:	0801570e 	.word	0x0801570e

0801263c <_sbrk_r>:
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4c06      	ldr	r4, [pc, #24]	; (8012658 <_sbrk_r+0x1c>)
 8012640:	2300      	movs	r3, #0
 8012642:	4605      	mov	r5, r0
 8012644:	4608      	mov	r0, r1
 8012646:	6023      	str	r3, [r4, #0]
 8012648:	f7ee fcb2 	bl	8000fb0 <_sbrk>
 801264c:	1c43      	adds	r3, r0, #1
 801264e:	d102      	bne.n	8012656 <_sbrk_r+0x1a>
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	b103      	cbz	r3, 8012656 <_sbrk_r+0x1a>
 8012654:	602b      	str	r3, [r5, #0]
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	2400342c 	.word	0x2400342c

0801265c <__sread>:
 801265c:	b510      	push	{r4, lr}
 801265e:	460c      	mov	r4, r1
 8012660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012664:	f000 fa48 	bl	8012af8 <_read_r>
 8012668:	2800      	cmp	r0, #0
 801266a:	bfab      	itete	ge
 801266c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801266e:	89a3      	ldrhlt	r3, [r4, #12]
 8012670:	181b      	addge	r3, r3, r0
 8012672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012676:	bfac      	ite	ge
 8012678:	6563      	strge	r3, [r4, #84]	; 0x54
 801267a:	81a3      	strhlt	r3, [r4, #12]
 801267c:	bd10      	pop	{r4, pc}

0801267e <__swrite>:
 801267e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012682:	461f      	mov	r7, r3
 8012684:	898b      	ldrh	r3, [r1, #12]
 8012686:	05db      	lsls	r3, r3, #23
 8012688:	4605      	mov	r5, r0
 801268a:	460c      	mov	r4, r1
 801268c:	4616      	mov	r6, r2
 801268e:	d505      	bpl.n	801269c <__swrite+0x1e>
 8012690:	2302      	movs	r3, #2
 8012692:	2200      	movs	r2, #0
 8012694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012698:	f000 f9b6 	bl	8012a08 <_lseek_r>
 801269c:	89a3      	ldrh	r3, [r4, #12]
 801269e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126a6:	81a3      	strh	r3, [r4, #12]
 80126a8:	4632      	mov	r2, r6
 80126aa:	463b      	mov	r3, r7
 80126ac:	4628      	mov	r0, r5
 80126ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126b2:	f000 b869 	b.w	8012788 <_write_r>

080126b6 <__sseek>:
 80126b6:	b510      	push	{r4, lr}
 80126b8:	460c      	mov	r4, r1
 80126ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126be:	f000 f9a3 	bl	8012a08 <_lseek_r>
 80126c2:	1c43      	adds	r3, r0, #1
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	bf15      	itete	ne
 80126c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80126ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126d2:	81a3      	strheq	r3, [r4, #12]
 80126d4:	bf18      	it	ne
 80126d6:	81a3      	strhne	r3, [r4, #12]
 80126d8:	bd10      	pop	{r4, pc}

080126da <__sclose>:
 80126da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126de:	f000 b8d3 	b.w	8012888 <_close_r>
	...

080126e4 <__swbuf_r>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	460e      	mov	r6, r1
 80126e8:	4614      	mov	r4, r2
 80126ea:	4605      	mov	r5, r0
 80126ec:	b118      	cbz	r0, 80126f6 <__swbuf_r+0x12>
 80126ee:	6983      	ldr	r3, [r0, #24]
 80126f0:	b90b      	cbnz	r3, 80126f6 <__swbuf_r+0x12>
 80126f2:	f7ff fba1 	bl	8011e38 <__sinit>
 80126f6:	4b21      	ldr	r3, [pc, #132]	; (801277c <__swbuf_r+0x98>)
 80126f8:	429c      	cmp	r4, r3
 80126fa:	d12a      	bne.n	8012752 <__swbuf_r+0x6e>
 80126fc:	686c      	ldr	r4, [r5, #4]
 80126fe:	69a3      	ldr	r3, [r4, #24]
 8012700:	60a3      	str	r3, [r4, #8]
 8012702:	89a3      	ldrh	r3, [r4, #12]
 8012704:	071a      	lsls	r2, r3, #28
 8012706:	d52e      	bpl.n	8012766 <__swbuf_r+0x82>
 8012708:	6923      	ldr	r3, [r4, #16]
 801270a:	b363      	cbz	r3, 8012766 <__swbuf_r+0x82>
 801270c:	6923      	ldr	r3, [r4, #16]
 801270e:	6820      	ldr	r0, [r4, #0]
 8012710:	1ac0      	subs	r0, r0, r3
 8012712:	6963      	ldr	r3, [r4, #20]
 8012714:	b2f6      	uxtb	r6, r6
 8012716:	4283      	cmp	r3, r0
 8012718:	4637      	mov	r7, r6
 801271a:	dc04      	bgt.n	8012726 <__swbuf_r+0x42>
 801271c:	4621      	mov	r1, r4
 801271e:	4628      	mov	r0, r5
 8012720:	f000 f948 	bl	80129b4 <_fflush_r>
 8012724:	bb28      	cbnz	r0, 8012772 <__swbuf_r+0x8e>
 8012726:	68a3      	ldr	r3, [r4, #8]
 8012728:	3b01      	subs	r3, #1
 801272a:	60a3      	str	r3, [r4, #8]
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	1c5a      	adds	r2, r3, #1
 8012730:	6022      	str	r2, [r4, #0]
 8012732:	701e      	strb	r6, [r3, #0]
 8012734:	6963      	ldr	r3, [r4, #20]
 8012736:	3001      	adds	r0, #1
 8012738:	4283      	cmp	r3, r0
 801273a:	d004      	beq.n	8012746 <__swbuf_r+0x62>
 801273c:	89a3      	ldrh	r3, [r4, #12]
 801273e:	07db      	lsls	r3, r3, #31
 8012740:	d519      	bpl.n	8012776 <__swbuf_r+0x92>
 8012742:	2e0a      	cmp	r6, #10
 8012744:	d117      	bne.n	8012776 <__swbuf_r+0x92>
 8012746:	4621      	mov	r1, r4
 8012748:	4628      	mov	r0, r5
 801274a:	f000 f933 	bl	80129b4 <_fflush_r>
 801274e:	b190      	cbz	r0, 8012776 <__swbuf_r+0x92>
 8012750:	e00f      	b.n	8012772 <__swbuf_r+0x8e>
 8012752:	4b0b      	ldr	r3, [pc, #44]	; (8012780 <__swbuf_r+0x9c>)
 8012754:	429c      	cmp	r4, r3
 8012756:	d101      	bne.n	801275c <__swbuf_r+0x78>
 8012758:	68ac      	ldr	r4, [r5, #8]
 801275a:	e7d0      	b.n	80126fe <__swbuf_r+0x1a>
 801275c:	4b09      	ldr	r3, [pc, #36]	; (8012784 <__swbuf_r+0xa0>)
 801275e:	429c      	cmp	r4, r3
 8012760:	bf08      	it	eq
 8012762:	68ec      	ldreq	r4, [r5, #12]
 8012764:	e7cb      	b.n	80126fe <__swbuf_r+0x1a>
 8012766:	4621      	mov	r1, r4
 8012768:	4628      	mov	r0, r5
 801276a:	f000 f81f 	bl	80127ac <__swsetup_r>
 801276e:	2800      	cmp	r0, #0
 8012770:	d0cc      	beq.n	801270c <__swbuf_r+0x28>
 8012772:	f04f 37ff 	mov.w	r7, #4294967295
 8012776:	4638      	mov	r0, r7
 8012778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801277a:	bf00      	nop
 801277c:	080156ac 	.word	0x080156ac
 8012780:	080156cc 	.word	0x080156cc
 8012784:	0801568c 	.word	0x0801568c

08012788 <_write_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4c07      	ldr	r4, [pc, #28]	; (80127a8 <_write_r+0x20>)
 801278c:	4605      	mov	r5, r0
 801278e:	4608      	mov	r0, r1
 8012790:	4611      	mov	r1, r2
 8012792:	2200      	movs	r2, #0
 8012794:	6022      	str	r2, [r4, #0]
 8012796:	461a      	mov	r2, r3
 8012798:	f7ee fbb9 	bl	8000f0e <_write>
 801279c:	1c43      	adds	r3, r0, #1
 801279e:	d102      	bne.n	80127a6 <_write_r+0x1e>
 80127a0:	6823      	ldr	r3, [r4, #0]
 80127a2:	b103      	cbz	r3, 80127a6 <_write_r+0x1e>
 80127a4:	602b      	str	r3, [r5, #0]
 80127a6:	bd38      	pop	{r3, r4, r5, pc}
 80127a8:	2400342c 	.word	0x2400342c

080127ac <__swsetup_r>:
 80127ac:	4b32      	ldr	r3, [pc, #200]	; (8012878 <__swsetup_r+0xcc>)
 80127ae:	b570      	push	{r4, r5, r6, lr}
 80127b0:	681d      	ldr	r5, [r3, #0]
 80127b2:	4606      	mov	r6, r0
 80127b4:	460c      	mov	r4, r1
 80127b6:	b125      	cbz	r5, 80127c2 <__swsetup_r+0x16>
 80127b8:	69ab      	ldr	r3, [r5, #24]
 80127ba:	b913      	cbnz	r3, 80127c2 <__swsetup_r+0x16>
 80127bc:	4628      	mov	r0, r5
 80127be:	f7ff fb3b 	bl	8011e38 <__sinit>
 80127c2:	4b2e      	ldr	r3, [pc, #184]	; (801287c <__swsetup_r+0xd0>)
 80127c4:	429c      	cmp	r4, r3
 80127c6:	d10f      	bne.n	80127e8 <__swsetup_r+0x3c>
 80127c8:	686c      	ldr	r4, [r5, #4]
 80127ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	0715      	lsls	r5, r2, #28
 80127d2:	d42c      	bmi.n	801282e <__swsetup_r+0x82>
 80127d4:	06d0      	lsls	r0, r2, #27
 80127d6:	d411      	bmi.n	80127fc <__swsetup_r+0x50>
 80127d8:	2209      	movs	r2, #9
 80127da:	6032      	str	r2, [r6, #0]
 80127dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127e0:	81a3      	strh	r3, [r4, #12]
 80127e2:	f04f 30ff 	mov.w	r0, #4294967295
 80127e6:	e03e      	b.n	8012866 <__swsetup_r+0xba>
 80127e8:	4b25      	ldr	r3, [pc, #148]	; (8012880 <__swsetup_r+0xd4>)
 80127ea:	429c      	cmp	r4, r3
 80127ec:	d101      	bne.n	80127f2 <__swsetup_r+0x46>
 80127ee:	68ac      	ldr	r4, [r5, #8]
 80127f0:	e7eb      	b.n	80127ca <__swsetup_r+0x1e>
 80127f2:	4b24      	ldr	r3, [pc, #144]	; (8012884 <__swsetup_r+0xd8>)
 80127f4:	429c      	cmp	r4, r3
 80127f6:	bf08      	it	eq
 80127f8:	68ec      	ldreq	r4, [r5, #12]
 80127fa:	e7e6      	b.n	80127ca <__swsetup_r+0x1e>
 80127fc:	0751      	lsls	r1, r2, #29
 80127fe:	d512      	bpl.n	8012826 <__swsetup_r+0x7a>
 8012800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012802:	b141      	cbz	r1, 8012816 <__swsetup_r+0x6a>
 8012804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012808:	4299      	cmp	r1, r3
 801280a:	d002      	beq.n	8012812 <__swsetup_r+0x66>
 801280c:	4630      	mov	r0, r6
 801280e:	f7ff fba5 	bl	8011f5c <_free_r>
 8012812:	2300      	movs	r3, #0
 8012814:	6363      	str	r3, [r4, #52]	; 0x34
 8012816:	89a3      	ldrh	r3, [r4, #12]
 8012818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801281c:	81a3      	strh	r3, [r4, #12]
 801281e:	2300      	movs	r3, #0
 8012820:	6063      	str	r3, [r4, #4]
 8012822:	6923      	ldr	r3, [r4, #16]
 8012824:	6023      	str	r3, [r4, #0]
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	f043 0308 	orr.w	r3, r3, #8
 801282c:	81a3      	strh	r3, [r4, #12]
 801282e:	6923      	ldr	r3, [r4, #16]
 8012830:	b94b      	cbnz	r3, 8012846 <__swsetup_r+0x9a>
 8012832:	89a3      	ldrh	r3, [r4, #12]
 8012834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801283c:	d003      	beq.n	8012846 <__swsetup_r+0x9a>
 801283e:	4621      	mov	r1, r4
 8012840:	4630      	mov	r0, r6
 8012842:	f000 f917 	bl	8012a74 <__smakebuf_r>
 8012846:	89a2      	ldrh	r2, [r4, #12]
 8012848:	f012 0301 	ands.w	r3, r2, #1
 801284c:	d00c      	beq.n	8012868 <__swsetup_r+0xbc>
 801284e:	2300      	movs	r3, #0
 8012850:	60a3      	str	r3, [r4, #8]
 8012852:	6963      	ldr	r3, [r4, #20]
 8012854:	425b      	negs	r3, r3
 8012856:	61a3      	str	r3, [r4, #24]
 8012858:	6923      	ldr	r3, [r4, #16]
 801285a:	b953      	cbnz	r3, 8012872 <__swsetup_r+0xc6>
 801285c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012860:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012864:	d1ba      	bne.n	80127dc <__swsetup_r+0x30>
 8012866:	bd70      	pop	{r4, r5, r6, pc}
 8012868:	0792      	lsls	r2, r2, #30
 801286a:	bf58      	it	pl
 801286c:	6963      	ldrpl	r3, [r4, #20]
 801286e:	60a3      	str	r3, [r4, #8]
 8012870:	e7f2      	b.n	8012858 <__swsetup_r+0xac>
 8012872:	2000      	movs	r0, #0
 8012874:	e7f7      	b.n	8012866 <__swsetup_r+0xba>
 8012876:	bf00      	nop
 8012878:	24000030 	.word	0x24000030
 801287c:	080156ac 	.word	0x080156ac
 8012880:	080156cc 	.word	0x080156cc
 8012884:	0801568c 	.word	0x0801568c

08012888 <_close_r>:
 8012888:	b538      	push	{r3, r4, r5, lr}
 801288a:	4c06      	ldr	r4, [pc, #24]	; (80128a4 <_close_r+0x1c>)
 801288c:	2300      	movs	r3, #0
 801288e:	4605      	mov	r5, r0
 8012890:	4608      	mov	r0, r1
 8012892:	6023      	str	r3, [r4, #0]
 8012894:	f7ee fb57 	bl	8000f46 <_close>
 8012898:	1c43      	adds	r3, r0, #1
 801289a:	d102      	bne.n	80128a2 <_close_r+0x1a>
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	b103      	cbz	r3, 80128a2 <_close_r+0x1a>
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	bd38      	pop	{r3, r4, r5, pc}
 80128a4:	2400342c 	.word	0x2400342c

080128a8 <__sflush_r>:
 80128a8:	898a      	ldrh	r2, [r1, #12]
 80128aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ae:	4605      	mov	r5, r0
 80128b0:	0710      	lsls	r0, r2, #28
 80128b2:	460c      	mov	r4, r1
 80128b4:	d458      	bmi.n	8012968 <__sflush_r+0xc0>
 80128b6:	684b      	ldr	r3, [r1, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	dc05      	bgt.n	80128c8 <__sflush_r+0x20>
 80128bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128be:	2b00      	cmp	r3, #0
 80128c0:	dc02      	bgt.n	80128c8 <__sflush_r+0x20>
 80128c2:	2000      	movs	r0, #0
 80128c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128ca:	2e00      	cmp	r6, #0
 80128cc:	d0f9      	beq.n	80128c2 <__sflush_r+0x1a>
 80128ce:	2300      	movs	r3, #0
 80128d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128d4:	682f      	ldr	r7, [r5, #0]
 80128d6:	6a21      	ldr	r1, [r4, #32]
 80128d8:	602b      	str	r3, [r5, #0]
 80128da:	d032      	beq.n	8012942 <__sflush_r+0x9a>
 80128dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128de:	89a3      	ldrh	r3, [r4, #12]
 80128e0:	075a      	lsls	r2, r3, #29
 80128e2:	d505      	bpl.n	80128f0 <__sflush_r+0x48>
 80128e4:	6863      	ldr	r3, [r4, #4]
 80128e6:	1ac0      	subs	r0, r0, r3
 80128e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128ea:	b10b      	cbz	r3, 80128f0 <__sflush_r+0x48>
 80128ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128ee:	1ac0      	subs	r0, r0, r3
 80128f0:	2300      	movs	r3, #0
 80128f2:	4602      	mov	r2, r0
 80128f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128f6:	6a21      	ldr	r1, [r4, #32]
 80128f8:	4628      	mov	r0, r5
 80128fa:	47b0      	blx	r6
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	89a3      	ldrh	r3, [r4, #12]
 8012900:	d106      	bne.n	8012910 <__sflush_r+0x68>
 8012902:	6829      	ldr	r1, [r5, #0]
 8012904:	291d      	cmp	r1, #29
 8012906:	d848      	bhi.n	801299a <__sflush_r+0xf2>
 8012908:	4a29      	ldr	r2, [pc, #164]	; (80129b0 <__sflush_r+0x108>)
 801290a:	40ca      	lsrs	r2, r1
 801290c:	07d6      	lsls	r6, r2, #31
 801290e:	d544      	bpl.n	801299a <__sflush_r+0xf2>
 8012910:	2200      	movs	r2, #0
 8012912:	6062      	str	r2, [r4, #4]
 8012914:	04d9      	lsls	r1, r3, #19
 8012916:	6922      	ldr	r2, [r4, #16]
 8012918:	6022      	str	r2, [r4, #0]
 801291a:	d504      	bpl.n	8012926 <__sflush_r+0x7e>
 801291c:	1c42      	adds	r2, r0, #1
 801291e:	d101      	bne.n	8012924 <__sflush_r+0x7c>
 8012920:	682b      	ldr	r3, [r5, #0]
 8012922:	b903      	cbnz	r3, 8012926 <__sflush_r+0x7e>
 8012924:	6560      	str	r0, [r4, #84]	; 0x54
 8012926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012928:	602f      	str	r7, [r5, #0]
 801292a:	2900      	cmp	r1, #0
 801292c:	d0c9      	beq.n	80128c2 <__sflush_r+0x1a>
 801292e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012932:	4299      	cmp	r1, r3
 8012934:	d002      	beq.n	801293c <__sflush_r+0x94>
 8012936:	4628      	mov	r0, r5
 8012938:	f7ff fb10 	bl	8011f5c <_free_r>
 801293c:	2000      	movs	r0, #0
 801293e:	6360      	str	r0, [r4, #52]	; 0x34
 8012940:	e7c0      	b.n	80128c4 <__sflush_r+0x1c>
 8012942:	2301      	movs	r3, #1
 8012944:	4628      	mov	r0, r5
 8012946:	47b0      	blx	r6
 8012948:	1c41      	adds	r1, r0, #1
 801294a:	d1c8      	bne.n	80128de <__sflush_r+0x36>
 801294c:	682b      	ldr	r3, [r5, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d0c5      	beq.n	80128de <__sflush_r+0x36>
 8012952:	2b1d      	cmp	r3, #29
 8012954:	d001      	beq.n	801295a <__sflush_r+0xb2>
 8012956:	2b16      	cmp	r3, #22
 8012958:	d101      	bne.n	801295e <__sflush_r+0xb6>
 801295a:	602f      	str	r7, [r5, #0]
 801295c:	e7b1      	b.n	80128c2 <__sflush_r+0x1a>
 801295e:	89a3      	ldrh	r3, [r4, #12]
 8012960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012964:	81a3      	strh	r3, [r4, #12]
 8012966:	e7ad      	b.n	80128c4 <__sflush_r+0x1c>
 8012968:	690f      	ldr	r7, [r1, #16]
 801296a:	2f00      	cmp	r7, #0
 801296c:	d0a9      	beq.n	80128c2 <__sflush_r+0x1a>
 801296e:	0793      	lsls	r3, r2, #30
 8012970:	680e      	ldr	r6, [r1, #0]
 8012972:	bf08      	it	eq
 8012974:	694b      	ldreq	r3, [r1, #20]
 8012976:	600f      	str	r7, [r1, #0]
 8012978:	bf18      	it	ne
 801297a:	2300      	movne	r3, #0
 801297c:	eba6 0807 	sub.w	r8, r6, r7
 8012980:	608b      	str	r3, [r1, #8]
 8012982:	f1b8 0f00 	cmp.w	r8, #0
 8012986:	dd9c      	ble.n	80128c2 <__sflush_r+0x1a>
 8012988:	4643      	mov	r3, r8
 801298a:	463a      	mov	r2, r7
 801298c:	6a21      	ldr	r1, [r4, #32]
 801298e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012990:	4628      	mov	r0, r5
 8012992:	47b0      	blx	r6
 8012994:	2800      	cmp	r0, #0
 8012996:	dc06      	bgt.n	80129a6 <__sflush_r+0xfe>
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801299e:	81a3      	strh	r3, [r4, #12]
 80129a0:	f04f 30ff 	mov.w	r0, #4294967295
 80129a4:	e78e      	b.n	80128c4 <__sflush_r+0x1c>
 80129a6:	4407      	add	r7, r0
 80129a8:	eba8 0800 	sub.w	r8, r8, r0
 80129ac:	e7e9      	b.n	8012982 <__sflush_r+0xda>
 80129ae:	bf00      	nop
 80129b0:	20400001 	.word	0x20400001

080129b4 <_fflush_r>:
 80129b4:	b538      	push	{r3, r4, r5, lr}
 80129b6:	690b      	ldr	r3, [r1, #16]
 80129b8:	4605      	mov	r5, r0
 80129ba:	460c      	mov	r4, r1
 80129bc:	b1db      	cbz	r3, 80129f6 <_fflush_r+0x42>
 80129be:	b118      	cbz	r0, 80129c8 <_fflush_r+0x14>
 80129c0:	6983      	ldr	r3, [r0, #24]
 80129c2:	b90b      	cbnz	r3, 80129c8 <_fflush_r+0x14>
 80129c4:	f7ff fa38 	bl	8011e38 <__sinit>
 80129c8:	4b0c      	ldr	r3, [pc, #48]	; (80129fc <_fflush_r+0x48>)
 80129ca:	429c      	cmp	r4, r3
 80129cc:	d109      	bne.n	80129e2 <_fflush_r+0x2e>
 80129ce:	686c      	ldr	r4, [r5, #4]
 80129d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129d4:	b17b      	cbz	r3, 80129f6 <_fflush_r+0x42>
 80129d6:	4621      	mov	r1, r4
 80129d8:	4628      	mov	r0, r5
 80129da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129de:	f7ff bf63 	b.w	80128a8 <__sflush_r>
 80129e2:	4b07      	ldr	r3, [pc, #28]	; (8012a00 <_fflush_r+0x4c>)
 80129e4:	429c      	cmp	r4, r3
 80129e6:	d101      	bne.n	80129ec <_fflush_r+0x38>
 80129e8:	68ac      	ldr	r4, [r5, #8]
 80129ea:	e7f1      	b.n	80129d0 <_fflush_r+0x1c>
 80129ec:	4b05      	ldr	r3, [pc, #20]	; (8012a04 <_fflush_r+0x50>)
 80129ee:	429c      	cmp	r4, r3
 80129f0:	bf08      	it	eq
 80129f2:	68ec      	ldreq	r4, [r5, #12]
 80129f4:	e7ec      	b.n	80129d0 <_fflush_r+0x1c>
 80129f6:	2000      	movs	r0, #0
 80129f8:	bd38      	pop	{r3, r4, r5, pc}
 80129fa:	bf00      	nop
 80129fc:	080156ac 	.word	0x080156ac
 8012a00:	080156cc 	.word	0x080156cc
 8012a04:	0801568c 	.word	0x0801568c

08012a08 <_lseek_r>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4c07      	ldr	r4, [pc, #28]	; (8012a28 <_lseek_r+0x20>)
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	4608      	mov	r0, r1
 8012a10:	4611      	mov	r1, r2
 8012a12:	2200      	movs	r2, #0
 8012a14:	6022      	str	r2, [r4, #0]
 8012a16:	461a      	mov	r2, r3
 8012a18:	f7ee fabc 	bl	8000f94 <_lseek>
 8012a1c:	1c43      	adds	r3, r0, #1
 8012a1e:	d102      	bne.n	8012a26 <_lseek_r+0x1e>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	b103      	cbz	r3, 8012a26 <_lseek_r+0x1e>
 8012a24:	602b      	str	r3, [r5, #0]
 8012a26:	bd38      	pop	{r3, r4, r5, pc}
 8012a28:	2400342c 	.word	0x2400342c

08012a2c <__swhatbuf_r>:
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	460e      	mov	r6, r1
 8012a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a34:	2900      	cmp	r1, #0
 8012a36:	b096      	sub	sp, #88	; 0x58
 8012a38:	4614      	mov	r4, r2
 8012a3a:	461d      	mov	r5, r3
 8012a3c:	da07      	bge.n	8012a4e <__swhatbuf_r+0x22>
 8012a3e:	2300      	movs	r3, #0
 8012a40:	602b      	str	r3, [r5, #0]
 8012a42:	89b3      	ldrh	r3, [r6, #12]
 8012a44:	061a      	lsls	r2, r3, #24
 8012a46:	d410      	bmi.n	8012a6a <__swhatbuf_r+0x3e>
 8012a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a4c:	e00e      	b.n	8012a6c <__swhatbuf_r+0x40>
 8012a4e:	466a      	mov	r2, sp
 8012a50:	f000 f864 	bl	8012b1c <_fstat_r>
 8012a54:	2800      	cmp	r0, #0
 8012a56:	dbf2      	blt.n	8012a3e <__swhatbuf_r+0x12>
 8012a58:	9a01      	ldr	r2, [sp, #4]
 8012a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a62:	425a      	negs	r2, r3
 8012a64:	415a      	adcs	r2, r3
 8012a66:	602a      	str	r2, [r5, #0]
 8012a68:	e7ee      	b.n	8012a48 <__swhatbuf_r+0x1c>
 8012a6a:	2340      	movs	r3, #64	; 0x40
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	6023      	str	r3, [r4, #0]
 8012a70:	b016      	add	sp, #88	; 0x58
 8012a72:	bd70      	pop	{r4, r5, r6, pc}

08012a74 <__smakebuf_r>:
 8012a74:	898b      	ldrh	r3, [r1, #12]
 8012a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a78:	079d      	lsls	r5, r3, #30
 8012a7a:	4606      	mov	r6, r0
 8012a7c:	460c      	mov	r4, r1
 8012a7e:	d507      	bpl.n	8012a90 <__smakebuf_r+0x1c>
 8012a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	6123      	str	r3, [r4, #16]
 8012a88:	2301      	movs	r3, #1
 8012a8a:	6163      	str	r3, [r4, #20]
 8012a8c:	b002      	add	sp, #8
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}
 8012a90:	ab01      	add	r3, sp, #4
 8012a92:	466a      	mov	r2, sp
 8012a94:	f7ff ffca 	bl	8012a2c <__swhatbuf_r>
 8012a98:	9900      	ldr	r1, [sp, #0]
 8012a9a:	4605      	mov	r5, r0
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	f7ff faab 	bl	8011ff8 <_malloc_r>
 8012aa2:	b948      	cbnz	r0, 8012ab8 <__smakebuf_r+0x44>
 8012aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aa8:	059a      	lsls	r2, r3, #22
 8012aaa:	d4ef      	bmi.n	8012a8c <__smakebuf_r+0x18>
 8012aac:	f023 0303 	bic.w	r3, r3, #3
 8012ab0:	f043 0302 	orr.w	r3, r3, #2
 8012ab4:	81a3      	strh	r3, [r4, #12]
 8012ab6:	e7e3      	b.n	8012a80 <__smakebuf_r+0xc>
 8012ab8:	4b0d      	ldr	r3, [pc, #52]	; (8012af0 <__smakebuf_r+0x7c>)
 8012aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	6020      	str	r0, [r4, #0]
 8012ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ac4:	81a3      	strh	r3, [r4, #12]
 8012ac6:	9b00      	ldr	r3, [sp, #0]
 8012ac8:	6163      	str	r3, [r4, #20]
 8012aca:	9b01      	ldr	r3, [sp, #4]
 8012acc:	6120      	str	r0, [r4, #16]
 8012ace:	b15b      	cbz	r3, 8012ae8 <__smakebuf_r+0x74>
 8012ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f000 f833 	bl	8012b40 <_isatty_r>
 8012ada:	b128      	cbz	r0, 8012ae8 <__smakebuf_r+0x74>
 8012adc:	89a3      	ldrh	r3, [r4, #12]
 8012ade:	f023 0303 	bic.w	r3, r3, #3
 8012ae2:	f043 0301 	orr.w	r3, r3, #1
 8012ae6:	81a3      	strh	r3, [r4, #12]
 8012ae8:	89a3      	ldrh	r3, [r4, #12]
 8012aea:	431d      	orrs	r5, r3
 8012aec:	81a5      	strh	r5, [r4, #12]
 8012aee:	e7cd      	b.n	8012a8c <__smakebuf_r+0x18>
 8012af0:	08011e01 	.word	0x08011e01

08012af4 <__malloc_lock>:
 8012af4:	4770      	bx	lr

08012af6 <__malloc_unlock>:
 8012af6:	4770      	bx	lr

08012af8 <_read_r>:
 8012af8:	b538      	push	{r3, r4, r5, lr}
 8012afa:	4c07      	ldr	r4, [pc, #28]	; (8012b18 <_read_r+0x20>)
 8012afc:	4605      	mov	r5, r0
 8012afe:	4608      	mov	r0, r1
 8012b00:	4611      	mov	r1, r2
 8012b02:	2200      	movs	r2, #0
 8012b04:	6022      	str	r2, [r4, #0]
 8012b06:	461a      	mov	r2, r3
 8012b08:	f7ee f9e4 	bl	8000ed4 <_read>
 8012b0c:	1c43      	adds	r3, r0, #1
 8012b0e:	d102      	bne.n	8012b16 <_read_r+0x1e>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	b103      	cbz	r3, 8012b16 <_read_r+0x1e>
 8012b14:	602b      	str	r3, [r5, #0]
 8012b16:	bd38      	pop	{r3, r4, r5, pc}
 8012b18:	2400342c 	.word	0x2400342c

08012b1c <_fstat_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4c07      	ldr	r4, [pc, #28]	; (8012b3c <_fstat_r+0x20>)
 8012b20:	2300      	movs	r3, #0
 8012b22:	4605      	mov	r5, r0
 8012b24:	4608      	mov	r0, r1
 8012b26:	4611      	mov	r1, r2
 8012b28:	6023      	str	r3, [r4, #0]
 8012b2a:	f7ee fa18 	bl	8000f5e <_fstat>
 8012b2e:	1c43      	adds	r3, r0, #1
 8012b30:	d102      	bne.n	8012b38 <_fstat_r+0x1c>
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	b103      	cbz	r3, 8012b38 <_fstat_r+0x1c>
 8012b36:	602b      	str	r3, [r5, #0]
 8012b38:	bd38      	pop	{r3, r4, r5, pc}
 8012b3a:	bf00      	nop
 8012b3c:	2400342c 	.word	0x2400342c

08012b40 <_isatty_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4c06      	ldr	r4, [pc, #24]	; (8012b5c <_isatty_r+0x1c>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4605      	mov	r5, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	6023      	str	r3, [r4, #0]
 8012b4c:	f7ee fa17 	bl	8000f7e <_isatty>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_isatty_r+0x1a>
 8012b54:	6823      	ldr	r3, [r4, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_isatty_r+0x1a>
 8012b58:	602b      	str	r3, [r5, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	2400342c 	.word	0x2400342c

08012b60 <_init>:
 8012b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b62:	bf00      	nop
 8012b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b66:	bc08      	pop	{r3}
 8012b68:	469e      	mov	lr, r3
 8012b6a:	4770      	bx	lr

08012b6c <_fini>:
 8012b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6e:	bf00      	nop
 8012b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b72:	bc08      	pop	{r3}
 8012b74:	469e      	mov	lr, r3
 8012b76:	4770      	bx	lr
